
unit efl_input_event_eo;
interface

{
  Automatically converted by H2Pas 1.0.0 from efl_input_event_eo.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    efl_input_event_eo.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

Type
PEfl_Class  = ^Efl_Class;
PEfl_Input_Device  = ^Efl_Input_Device;
PEfl_Input_Event  = ^Efl_Input_Event;
PEo  = ^Eo;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{$ifndef _EFL_INPUT_EVENT_EO_H_}
{$define _EFL_INPUT_EVENT_EO_H_}
{$ifndef _EFL_INPUT_EVENT_EO_CLASS_TYPE}
{$define _EFL_INPUT_EVENT_EO_CLASS_TYPE}
type
  PEfl_Input_Event = ^TEfl_Input_Event;
  TEfl_Input_Event = TEo;
{$endif}
{$ifndef _EFL_INPUT_EVENT_EO_TYPES}
{$define _EFL_INPUT_EVENT_EO_TYPES}
{$endif}
{*
 * @brief Represents a generic event data.
 *
 * @note Most Efl Events do not carry Efl Objects, rather simple data
 * structures. This class is intended to carry more complex event data, such as
 * pointer events.
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }

{ was #define dname def_expr }
function EFL_INPUT_EVENT_MIXIN : longint; { return type might be wrong }

(* Const before type ignored *)
function efl_input_event_mixin_get:PEfl_Class;cdecl;external;
{*
 * @brief The time at which an event was generated.
 *
 * If the event is generated by a server (eg. X.org or Wayland), then the time
 * may be set by the server. Usually this time will be based on the monotonic
 * clock, if available, but this class can not guarantee it.
 *
 * Call this when generating events manually.
 *
 * @param[in] obj The object.
 * @param[in] ms Time in milliseconds when the event happened.
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_timestamp_set(obj:PEo; ms:Tdouble);cdecl;external;
{*
 * @brief The time at which an event was generated.
 *
 * If the event is generated by a server (eg. X.org or Wayland), then the time
 * may be set by the server. Usually this time will be based on the monotonic
 * clock, if available, but this class can not guarantee it.
 *
 * @param[in] obj The object.
 *
 * @return Time in milliseconds when the event happened.
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_timestamp_get(obj:PEo):Tdouble;cdecl;external;
{* Resets the internal data to 0 or default values.
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_reset(obj:PEo);cdecl;external;
{*
 * @brief Input device that originated this event.
 *
 * @param[in] obj The object.
 * @param[in] dev Input device origin
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_device_set(obj:PEo; dev:PEfl_Input_Device);cdecl;external;
{*
 * @brief Input device that originated this event.
 *
 * @param[in] obj The object.
 *
 * @return Input device origin
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_device_get(obj:PEo):PEfl_Input_Device;cdecl;external;
{*
 * @brief Extra flags for this event, may be changed by the user.
 *
 * @param[in] obj The object.
 * @param[in] flags Input event flags
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_event_flags_set(obj:PEo; flags:TEfl_Input_Flags);cdecl;external;
{*
 * @brief Extra flags for this event, may be changed by the user.
 *
 * @param[in] obj The object.
 *
 * @return Input event flags
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_event_flags_get(obj:PEo):TEfl_Input_Flags;cdecl;external;
{*
 * @brief @c true if @ref efl_input_event_flags_get indicates the event is on
 * hold.
 *
 * @param[in] obj The object.
 * @param[in] val @c true if the event is on hold, @c false otherwise
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_processed_set(obj:PEo; val:TEina_Bool);cdecl;external;
{*
 * @brief @c true if @ref efl_input_event_flags_get indicates the event is on
 * hold.
 *
 * @param[in] obj The object.
 *
 * @return @c true if the event is on hold, @c false otherwise
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_processed_get(obj:PEo):TEina_Bool;cdecl;external;
{*
 * @brief @c true if @ref efl_input_event_flags_get indicates the event
 * happened while scrolling.
 *
 * @param[in] obj The object.
 * @param[in] val @c true if the event happened while scrolling, @c false
 * otherwise
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
procedure efl_input_scrolling_set(obj:PEo; val:TEina_Bool);cdecl;external;
{*
 * @brief @c true if @ref efl_input_event_flags_get indicates the event
 * happened while scrolling.
 *
 * @param[in] obj The object.
 *
 * @return @c true if the event happened while scrolling, @c false otherwise
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_scrolling_get(obj:PEo):TEina_Bool;cdecl;external;
{*
 * @brief @c true if the event was fake, not triggered by real hardware.
 *
 * @param[in] obj The object.
 *
 * @return @c true if the event was not from real hardware, @c false otherwise
 *
 * @since 1.23
 *
 * @ingroup Efl_Input_Event
  }
(* Const before type ignored *)
function efl_input_fake_get(obj:PEo):TEina_Bool;cdecl;external;
{$endif}

implementation

{ was #define dname def_expr }
function EFL_INPUT_EVENT_MIXIN : longint; { return type might be wrong }
  begin
    EFL_INPUT_EVENT_MIXIN:=efl_input_event_mixin_get;
  end;


end.
