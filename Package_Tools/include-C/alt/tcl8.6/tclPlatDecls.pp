
unit tclPlatDecls;
interface

{
  Automatically converted by H2Pas 1.0.0 from tclPlatDecls.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    tclPlatDecls.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

Type
Pchar  = ^char;
PTCHAR  = ^TCHAR;
PTcl_DString  = ^Tcl_DString;
PTcl_Interp  = ^Tcl_Interp;
PTclPlatStubs  = ^TclPlatStubs;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{
 * tclPlatDecls.h --
 *
 *	Declarations of platform specific Tcl APIs.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
  }
{
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tcl.decls script.
  }
{
 * TCHAR is needed here for win32, so if it is not defined yet do it here.
 * This way, we don't need to include <tchar.h> just for one define.
  }
{$if (defined(_WIN32) || defined(__CYGWIN__)) && !defined(_TCHAR_DEFINED)}
{$if defined(_UNICODE)}
type
  PTCHAR = ^TTCHAR;
  TTCHAR = Twchar_t;
{$else}
type
  PTCHAR = ^TTCHAR;
  TTCHAR = char;
{$endif}
{$define _TCHAR_DEFINED}
{$endif}
{ !BEGIN!: Do not edit below this line.  }
{ C++ extern C conditionnal removed }
{
 * Exported function declarations:
  }
{$if defined(_WIN32) || defined(__CYGWIN__) /* WIN */}
{ 0  }
(* Const before type ignored *)

function Tcl_WinUtfToTChar(str:Pchar; len:longint; dsPtr:PTcl_DString):PTCHAR;cdecl;external;
{ 1  }
(* Const before type ignored *)
function Tcl_WinTCharToUtf(str:PTCHAR; len:longint; dsPtr:PTcl_DString):Pchar;cdecl;external;
{ Slot 2 is reserved  }
{ 3  }
procedure TclWinConvertError_(errCode:dword);cdecl;external;
{$endif}
{ WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
{ 0  }
(* Const before type ignored *)

function Tcl_MacOSXOpenBundleResources(interp:PTcl_Interp; bundleName:Pchar; hasResourceFile:longint; maxPathLen:longint; libraryPath:Pchar):longint;cdecl;external;
{ 1  }
(* Const before type ignored *)
(* Const before type ignored *)
function Tcl_MacOSXOpenVersionedBundleResources(interp:PTcl_Interp; bundleName:Pchar; bundleVersion:Pchar; hasResourceFile:longint; maxPathLen:longint; 
           libraryPath:Pchar):longint;cdecl;external;
{ 2  }
(* Const before type ignored *)
procedure TclMacOSXNotifierAddRunLoopMode_(runLoopMode:pointer);cdecl;external;
{$endif}
{ MACOSX  }
{$if defined(_WIN32) || defined(__CYGWIN__) /* WIN */}
(* Const before type ignored *)
{ 0  }
(* Const before type ignored *)
{ 1  }
{ 3  }
{$endif}
{ WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
(* Const before type ignored *)
{ 0  }
(* Const before type ignored *)
(* Const before type ignored *)
{ 1  }
(* Const before type ignored *)
{ 2  }
{$endif}
{ MACOSX  }
type
  PTclPlatStubs = ^TTclPlatStubs;
  TTclPlatStubs = record
      magic : longint;
      hooks : pointer;
      tcl_WinUtfToTChar : function (str:Pchar; len:longint; dsPtr:PTcl_DString):PTCHAR;cdecl;
      tcl_WinTCharToUtf : function (str:PTCHAR; len:longint; dsPtr:PTcl_DString):Pchar;cdecl;
      reserved2 : procedure ;cdecl;
      tclWinConvertError_ : procedure (errCode:dword);cdecl;
      tcl_MacOSXOpenBundleResources : function (interp:PTcl_Interp; bundleName:Pchar; hasResourceFile:longint; maxPathLen:longint; libraryPath:Pchar):longint;cdecl;
      tcl_MacOSXOpenVersionedBundleResources : function (interp:PTcl_Interp; bundleName:Pchar; bundleVersion:Pchar; hasResourceFile:longint; maxPathLen:longint; 
                   libraryPath:Pchar):longint;cdecl;
      tclMacOSXNotifierAddRunLoopMode_ : procedure (runLoopMode:pointer);cdecl;
    end;
(* Const before type ignored *)
  var
    tclPlatStubsPtr : PTclPlatStubs;cvar;external;
{ C++ end of extern C conditionnal removed }
{$if defined(USE_TCL_STUBS)}
{
 * Inline function declarations:
  }
{$if defined(_WIN32) || defined(__CYGWIN__) /* WIN */}
{ 0  }

const
  Tcl_WinUtfToTChar = tclPlatStubsPtr^.tcl_WinUtfToTChar;  
{ 1  }
  Tcl_WinTCharToUtf = tclPlatStubsPtr^.tcl_WinTCharToUtf;  
{ Slot 2 is reserved  }
{ 3  }
  TclWinConvertError_ = tclPlatStubsPtr^.tclWinConvertError_;  
{$endif}
{ WIN  }
{$ifdef MAC_OSX_TCL /* MACOSX */}
{ 0  }

const
  Tcl_MacOSXOpenBundleResources = tclPlatStubsPtr^.tcl_MacOSXOpenBundleResources;  
{ 1  }
  Tcl_MacOSXOpenVersionedBundleResources = tclPlatStubsPtr^.tcl_MacOSXOpenVersionedBundleResources;  
{ 2  }
  TclMacOSXNotifierAddRunLoopMode_ = tclPlatStubsPtr^.tclMacOSXNotifierAddRunLoopMode_;  
{$endif}
{ MACOSX  }
{$endif}
{ defined(USE_TCL_STUBS)  }
{ !END!: Do not edit above this line.  }
{$undef TclUnusedStubEntry}
{$undef TclMacOSXNotifierAddRunLoopMode_}
{$undef TclWinConvertError_}
{$ifdef MAC_OSX_TCL /* MACOSX */}
{$undef Tcl_MacOSXOpenBundleResources}
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function Tcl_MacOSXOpenBundleResources(a,b,c,d,e : longint) : longint;

{$endif}
{$undef TCL_STORAGE_CLASS}

const
  TCL_STORAGE_CLASS = DLLIMPORT;  
{$endif}
{ _TCLPLATDECLS  }

implementation

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function Tcl_MacOSXOpenBundleResources(a,b,c,d,e : longint) : longint;
begin
  Tcl_MacOSXOpenBundleResources:=Tcl_MacOSXOpenVersionedBundleResources(a,b,NULL,c,d,e);
end;


end.
