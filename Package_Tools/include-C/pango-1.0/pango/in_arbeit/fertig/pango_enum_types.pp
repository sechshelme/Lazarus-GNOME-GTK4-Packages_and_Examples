
unit pango_enum_types;
interface

{
  Automatically converted by H2Pas 1.0.0 from pango_enum_types.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    pango_enum_types.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
{$ifndef __PANGO_ENUM_TYPES_H__}
{$define __PANGO_ENUM_TYPES_H__}
{$include <glib-object.h>}
{$include <pango/pango-version-macros.h>}
{ enumerations from "pango-attributes.h"  }

function pango_attr_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_ATTR_TYPE : longint; { return type might be wrong }

function pango_underline_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_UNDERLINE : longint; { return type might be wrong }

function pango_overline_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_OVERLINE : longint; { return type might be wrong }

function pango_show_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_SHOW_FLAGS : longint; { return type might be wrong }

function pango_text_transform_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_TEXT_TRANSFORM : longint; { return type might be wrong }

function pango_baseline_shift_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_BASELINE_SHIFT : longint; { return type might be wrong }

function pango_font_scale_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_FONT_SCALE : longint; { return type might be wrong }

{ enumerations from "pango-bidi-type.h"  }
function pango_bidi_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_BIDI_TYPE : longint; { return type might be wrong }

{ enumerations from "pango-coverage.h"  }
function pango_coverage_level_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_COVERAGE_LEVEL : longint; { return type might be wrong }

{ enumerations from "pango-direction.h"  }
function pango_direction_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_DIRECTION : longint; { return type might be wrong }

{ enumerations from "pango-font.h"  }
function pango_style_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_STYLE : longint; { return type might be wrong }

function pango_variant_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_VARIANT : longint; { return type might be wrong }

function pango_weight_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_WEIGHT : longint; { return type might be wrong }

function pango_stretch_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_STRETCH : longint; { return type might be wrong }

function pango_font_mask_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_FONT_MASK : longint; { return type might be wrong }

{ enumerations from "pango-glyph.h"  }
function pango_shape_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_SHAPE_FLAGS : longint; { return type might be wrong }

{ enumerations from "pango-gravity.h"  }
function pango_gravity_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_GRAVITY : longint; { return type might be wrong }

function pango_gravity_hint_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_GRAVITY_HINT : longint; { return type might be wrong }

{ enumerations from "pango-layout.h"  }
function pango_alignment_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_ALIGNMENT : longint; { return type might be wrong }

function pango_wrap_mode_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_WRAP_MODE : longint; { return type might be wrong }

function pango_ellipsize_mode_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_ELLIPSIZE_MODE : longint; { return type might be wrong }

function pango_layout_serialize_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_SERIALIZE_FLAGS : longint; { return type might be wrong }

function pango_layout_deserialize_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_DESERIALIZE_ERROR : longint; { return type might be wrong }

function pango_layout_deserialize_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_DESERIALIZE_FLAGS : longint; { return type might be wrong }

{ enumerations from "pango-renderer.h"  }
function pango_render_part_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_RENDER_PART : longint; { return type might be wrong }

{ enumerations from "pango-script.h"  }
function pango_script_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_SCRIPT : longint; { return type might be wrong }

{ enumerations from "pango-tabs.h"  }
function pango_tab_align_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function PANGO_TYPE_TAB_ALIGN : longint; { return type might be wrong }

{$endif}
{ __PANGO_ENUM_TYPES_H__  }
{ Generated data ends here  }

implementation

{ was #define dname def_expr }
function PANGO_TYPE_ATTR_TYPE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_ATTR_TYPE:=pango_attr_type_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_UNDERLINE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_UNDERLINE:=pango_underline_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_OVERLINE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_OVERLINE:=pango_overline_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_SHOW_FLAGS : longint; { return type might be wrong }
  begin
    PANGO_TYPE_SHOW_FLAGS:=pango_show_flags_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_TEXT_TRANSFORM : longint; { return type might be wrong }
  begin
    PANGO_TYPE_TEXT_TRANSFORM:=pango_text_transform_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_BASELINE_SHIFT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_BASELINE_SHIFT:=pango_baseline_shift_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_FONT_SCALE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_FONT_SCALE:=pango_font_scale_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_BIDI_TYPE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_BIDI_TYPE:=pango_bidi_type_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_COVERAGE_LEVEL : longint; { return type might be wrong }
  begin
    PANGO_TYPE_COVERAGE_LEVEL:=pango_coverage_level_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_DIRECTION : longint; { return type might be wrong }
  begin
    PANGO_TYPE_DIRECTION:=pango_direction_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_STYLE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_STYLE:=pango_style_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_VARIANT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_VARIANT:=pango_variant_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_WEIGHT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_WEIGHT:=pango_weight_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_STRETCH : longint; { return type might be wrong }
  begin
    PANGO_TYPE_STRETCH:=pango_stretch_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_FONT_MASK : longint; { return type might be wrong }
  begin
    PANGO_TYPE_FONT_MASK:=pango_font_mask_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_SHAPE_FLAGS : longint; { return type might be wrong }
  begin
    PANGO_TYPE_SHAPE_FLAGS:=pango_shape_flags_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_GRAVITY : longint; { return type might be wrong }
  begin
    PANGO_TYPE_GRAVITY:=pango_gravity_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_GRAVITY_HINT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_GRAVITY_HINT:=pango_gravity_hint_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_ALIGNMENT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_ALIGNMENT:=pango_alignment_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_WRAP_MODE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_WRAP_MODE:=pango_wrap_mode_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_ELLIPSIZE_MODE : longint; { return type might be wrong }
  begin
    PANGO_TYPE_ELLIPSIZE_MODE:=pango_ellipsize_mode_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_SERIALIZE_FLAGS : longint; { return type might be wrong }
  begin
    PANGO_TYPE_LAYOUT_SERIALIZE_FLAGS:=pango_layout_serialize_flags_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_DESERIALIZE_ERROR : longint; { return type might be wrong }
  begin
    PANGO_TYPE_LAYOUT_DESERIALIZE_ERROR:=pango_layout_deserialize_error_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_LAYOUT_DESERIALIZE_FLAGS : longint; { return type might be wrong }
  begin
    PANGO_TYPE_LAYOUT_DESERIALIZE_FLAGS:=pango_layout_deserialize_flags_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_RENDER_PART : longint; { return type might be wrong }
  begin
    PANGO_TYPE_RENDER_PART:=pango_render_part_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_SCRIPT : longint; { return type might be wrong }
  begin
    PANGO_TYPE_SCRIPT:=pango_script_get_type;
  end;

{ was #define dname def_expr }
function PANGO_TYPE_TAB_ALIGN : longint; { return type might be wrong }
  begin
    PANGO_TYPE_TAB_ALIGN:=pango_tab_align_get_type;
  end;


end.
