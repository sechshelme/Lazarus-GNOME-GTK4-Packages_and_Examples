/*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 */

#ifndef __XML_GLOBALS_H
#define __XML_GLOBALS_H

#include <libxml/xmlversion.h>
#include <libxml/parser.h>
#include <libxml/xmlerror.h>
#include <libxml/SAX2.h>
#include <libxml/xmlmemory.h>

#ifdef __cplusplus
extern "C" {
#endif

extern void  xmlInitGlobals(void);
extern void  xmlCleanupGlobals(void);

/**
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
 */
typedef xmlParserInputBufferPtr (*xmlParserInputBufferCreateFilenameFunc) (const char *URI,
									   xmlCharEncoding enc);


/**
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
 */
typedef xmlOutputBufferPtr (*xmlOutputBufferCreateFilenameFunc) (const char *URI,
								 xmlCharEncodingHandlerPtr encoder,
								 int compression);

extern xmlParserInputBufferCreateFilenameFunc
 xmlParserInputBufferCreateFilenameDefault (xmlParserInputBufferCreateFilenameFunc func);
extern xmlOutputBufferCreateFilenameFunc
 xmlOutputBufferCreateFilenameDefault (xmlOutputBufferCreateFilenameFunc func);

/*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 */

#undef	docbDefaultSAXHandler
#undef	htmlDefaultSAXHandler
#undef	oldXMLWDcompatibility
#undef	xmlBufferAllocScheme
#undef	xmlDefaultBufferSize
#undef	xmlDefaultSAXHandler
#undef	xmlDefaultSAXLocator
#undef	xmlDoValidityCheckingDefaultValue
#undef	xmlFree
#undef	xmlGenericError
#undef	xmlStructuredError
#undef	xmlGenericErrorContext
#undef	xmlStructuredErrorContext
#undef	xmlGetWarningsDefaultValue
#undef	xmlIndentTreeOutput
#undef  xmlTreeIndentString
#undef	xmlKeepBlanksDefaultValue
#undef	xmlLineNumbersDefaultValue
#undef	xmlLoadExtDtdDefaultValue
#undef	xmlMalloc
#undef	xmlMallocAtomic
#undef	xmlMemStrdup
#undef	xmlParserDebugEntities
#undef	xmlParserVersion
#undef	xmlPedanticParserDefaultValue
#undef	xmlRealloc
#undef	xmlSaveNoEmptyTags
#undef	xmlSubstituteEntitiesDefaultValue
#undef  xmlRegisterNodeDefaultValue
#undef  xmlDeregisterNodeDefaultValue
#undef  xmlLastError
#undef  xmlParserInputBufferCreateFilenameValue
#undef  xmlOutputBufferCreateFilenameValue

/**
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
 */
typedef void (*xmlRegisterNodeFunc) (xmlNodePtr node);
/**
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
 */
typedef void (*xmlDeregisterNodeFunc) (xmlNodePtr node);

typedef struct _xmlGlobalState xmlGlobalState;
typedef xmlGlobalState *xmlGlobalStatePtr;
struct _xmlGlobalState
{
	const char *xmlParserVersion;

	xmlSAXLocator xmlDefaultSAXLocator;
	xmlSAXHandlerV1 xmlDefaultSAXHandler;
	xmlSAXHandlerV1 docbDefaultSAXHandler;
	xmlSAXHandlerV1 htmlDefaultSAXHandler;

	xmlFreeFunc xmlFree;
	xmlMallocFunc xmlMalloc;
	xmlStrdupFunc xmlMemStrdup;
	xmlReallocFunc xmlRealloc;

	xmlGenericErrorFunc xmlGenericError;
	xmlStructuredErrorFunc xmlStructuredError;
	void *xmlGenericErrorContext;

	int oldXMLWDcompatibility;

	xmlBufferAllocationScheme xmlBufferAllocScheme;
	int xmlDefaultBufferSize;

	int xmlSubstituteEntitiesDefaultValue;
	int xmlDoValidityCheckingDefaultValue;
	int xmlGetWarningsDefaultValue;
	int xmlKeepBlanksDefaultValue;
	int xmlLineNumbersDefaultValue;
	int xmlLoadExtDtdDefaultValue;
	int xmlParserDebugEntities;
	int xmlPedanticParserDefaultValue;

	int xmlSaveNoEmptyTags;
	int xmlIndentTreeOutput;
	const char *xmlTreeIndentString;

	xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
	xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;

	xmlMallocFunc xmlMallocAtomic;
	xmlError xmlLastError;

	xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
	xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;

	void *xmlStructuredErrorContext;
};

#ifdef __cplusplus
}
#endif
#include <libxml/threads.h>
#ifdef __cplusplus
extern "C" {
#endif

extern void 	xmlInitializeGlobalState(xmlGlobalStatePtr gs);

extern void  xmlThrDefSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);

extern void  xmlThrDefSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);

extern xmlRegisterNodeFunc  xmlRegisterNodeDefault(xmlRegisterNodeFunc func);
extern xmlRegisterNodeFunc  xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc func);
extern xmlDeregisterNodeFunc  xmlDeregisterNodeDefault(xmlDeregisterNodeFunc func);
extern xmlDeregisterNodeFunc  xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc func);

extern xmlOutputBufferCreateFilenameFunc 
	xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
extern xmlParserInputBufferCreateFilenameFunc 
	xmlThrDefParserInputBufferCreateFilenameDefault(
				xmlParserInputBufferCreateFilenameFunc func);

/** DOC_DISABLE */
/*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 */

//#ifdef LIBXML_THREAD_ALLOC_ENABLED
//#ifdef LIBXML_THREAD_ENABLED
extern  xmlMallocFunc *  __xmlMalloc(void);
//#define xmlMalloc \
//(*(__xmlMalloc()))
//#else
extern xmlMallocFunc xmlMalloc;
//#endif

//#ifdef LIBXML_THREAD_ENABLED
extern  xmlMallocFunc *  __xmlMallocAtomic(void);
//#define xmlMallocAtomic \
//(*(__xmlMallocAtomic()))
//#else
extern xmlMallocFunc xmlMallocAtomic;
//#endif

//#ifdef LIBXML_THREAD_ENABLED
extern  xmlReallocFunc *  __xmlRealloc(void);
//#define xmlRealloc \
//(*(__xmlRealloc()))
//#else
extern xmlReallocFunc xmlRealloc;
//#endif

//#ifdef LIBXML_THREAD_ENABLED
extern  xmlFreeFunc *  __xmlFree(void);
//#define xmlFree \
//(*(__xmlFree()))
//#else
extern xmlFreeFunc xmlFree;
//#endif

//#ifdef LIBXML_THREAD_ENABLED
extern  xmlStrdupFunc *  __xmlMemStrdup(void);
//#define xmlMemStrdup \
//(*(__xmlMemStrdup()))
//#else
extern xmlStrdupFunc xmlMemStrdup;
//#endif

#else /* !LIBXML_THREAD_ALLOC_ENABLED */
extern xmlMallocFunc xmlMalloc;
extern xmlMallocFunc xmlMallocAtomic;
extern xmlReallocFunc xmlRealloc;
extern xmlFreeFunc xmlFree;
extern xmlStrdupFunc xmlMemStrdup;
#endif /* LIBXML_THREAD_ALLOC_ENABLED */

//#ifdef LIBXML_DOCB_ENABLED
extern  xmlSAXHandlerV1 *  __docbDefaultSAXHandler(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define docbDefaultSAXHandler \
//(*(__docbDefaultSAXHandler()))
//#else
extern xmlSAXHandlerV1 docbDefaultSAXHandler;
//#endif
//#endif

//#ifdef LIBXML_HTML_ENABLED
extern xmlSAXHandlerV1 *  __htmlDefaultSAXHandler(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define htmlDefaultSAXHandler \
//(*(__htmlDefaultSAXHandler()))
//#else
extern xmlSAXHandlerV1 htmlDefaultSAXHandler;
//#endif
#endif

extern xmlError *  __xmlLastError(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlLastError \
//(*(__xmlLastError()))
//#else
extern xmlError xmlLastError;
//#endif

/*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 */


extern int *  __oldXMLWDcompatibility(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define oldXMLWDcompatibility \
//(*(__oldXMLWDcompatibility()))
//#else
extern int oldXMLWDcompatibility;
//#endif

extern xmlBufferAllocationScheme *  __xmlBufferAllocScheme(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlBufferAllocScheme \
//(*(__xmlBufferAllocScheme()))
//#else
extern xmlBufferAllocationScheme xmlBufferAllocScheme;
//#endif
extern xmlBufferAllocationScheme 
	xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);

extern int *  __xmlDefaultBufferSize(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlDefaultBufferSize \
//(*(__xmlDefaultBufferSize()))
//#else
extern int xmlDefaultBufferSize;
//#endif
extern int  xmlThrDefDefaultBufferSize(int v);

extern xmlSAXHandlerV1 *  __xmlDefaultSAXHandler(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlDefaultSAXHandler \
//(*(__xmlDefaultSAXHandler()))
//#else
extern xmlSAXHandlerV1 xmlDefaultSAXHandler;
//#endif

extern xmlSAXLocator *  __xmlDefaultSAXLocator(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlDefaultSAXLocator \
//(*(__xmlDefaultSAXLocator()))
//#else
extern xmlSAXLocator xmlDefaultSAXLocator;
//#endif

extern int *  __xmlDoValidityCheckingDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlDoValidityCheckingDefaultValue \
//(*(__xmlDoValidityCheckingDefaultValue()))
//#else
extern int xmlDoValidityCheckingDefaultValue;
//#endif
extern int  xmlThrDefDoValidityCheckingDefaultValue(int v);

extern xmlGenericErrorFunc *  __xmlGenericError(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlGenericError \
//(*(__xmlGenericError()))
//#else
extern xmlGenericErrorFunc xmlGenericError;
//#endif

extern xmlStructuredErrorFunc *  __xmlStructuredError(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlStructuredError \
//(*(__xmlStructuredError()))
//#else
extern xmlStructuredErrorFunc xmlStructuredError;
//#endif

extern void * *  __xmlGenericErrorContext(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlGenericErrorContext \
//(*(__xmlGenericErrorContext()))
//#else
extern void * xmlGenericErrorContext;
//#endif

extern void * *  __xmlStructuredErrorContext(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlStructuredErrorContext \
//(*(__xmlStructuredErrorContext()))
//#else
extern void * xmlStructuredErrorContext;
//#endif

extern int *  __xmlGetWarningsDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlGetWarningsDefaultValue \
//(*(__xmlGetWarningsDefaultValue()))
//#else
extern int xmlGetWarningsDefaultValue;
//#endif
extern int  xmlThrDefGetWarningsDefaultValue(int v);

extern int *  __xmlIndentTreeOutput(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlIndentTreeOutput \
//(*(__xmlIndentTreeOutput()))
//#else
extern int xmlIndentTreeOutput;
//#endif
extern int  xmlThrDefIndentTreeOutput(int v);

extern const char * *  __xmlTreeIndentString(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlTreeIndentString \
//(*(__xmlTreeIndentString()))
//#else
extern const char * xmlTreeIndentString;
//#endif
extern const char *  xmlThrDefTreeIndentString(const char * v);

extern int *  __xmlKeepBlanksDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlKeepBlanksDefaultValue \
//(*(__xmlKeepBlanksDefaultValue()))
//#else
extern int xmlKeepBlanksDefaultValue;
//#endif
extern int  xmlThrDefKeepBlanksDefaultValue(int v);

extern int *  __xmlLineNumbersDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlLineNumbersDefaultValue \
//(*(__xmlLineNumbersDefaultValue()))
//#else
extern int xmlLineNumbersDefaultValue;
//#endif
extern int  xmlThrDefLineNumbersDefaultValue(int v);

extern int *  __xmlLoadExtDtdDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlLoadExtDtdDefaultValue \
//(*(__xmlLoadExtDtdDefaultValue()))
//#else
extern int xmlLoadExtDtdDefaultValue;
//#endif
extern int  xmlThrDefLoadExtDtdDefaultValue(int v);

extern int *  __xmlParserDebugEntities(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlParserDebugEntities \
//(*(__xmlParserDebugEntities()))
//#else
extern int xmlParserDebugEntities;
//#endif
extern int  xmlThrDefParserDebugEntities(int v);

extern const char * *  __xmlParserVersion(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlParserVersion \
//(*(__xmlParserVersion()))
//#else
extern const char * xmlParserVersion;
//#endif

extern int *  __xmlPedanticParserDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlPedanticParserDefaultValue \
//(*(__xmlPedanticParserDefaultValue()))
//#else
extern int xmlPedanticParserDefaultValue;
//#endif
extern int  xmlThrDefPedanticParserDefaultValue(int v);

extern int *  __xmlSaveNoEmptyTags(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlSaveNoEmptyTags \
//(*(__xmlSaveNoEmptyTags()))
//#else
extern int xmlSaveNoEmptyTags;
//#endif
extern int  xmlThrDefSaveNoEmptyTags(int v);

extern int *  __xmlSubstituteEntitiesDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlSubstituteEntitiesDefaultValue \
//(*(__xmlSubstituteEntitiesDefaultValue()))
//#else
extern int xmlSubstituteEntitiesDefaultValue;
//#endif
extern int  xmlThrDefSubstituteEntitiesDefaultValue(int v);

extern xmlRegisterNodeFunc *  __xmlRegisterNodeDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlRegisterNodeDefaultValue \
//(*(__xmlRegisterNodeDefaultValue()))
//#else
extern xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
//#endif

extern xmlDeregisterNodeFunc *  __xmlDeregisterNodeDefaultValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlDeregisterNodeDefaultValue \
//(*(__xmlDeregisterNodeDefaultValue()))
//#else
extern xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;
//#endif

extern xmlParserInputBufferCreateFilenameFunc *  __xmlParserInputBufferCreateFilenameValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlParserInputBufferCreateFilenameValue \
//(*(__xmlParserInputBufferCreateFilenameValue()))
//#else
extern xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
//#endif

extern xmlOutputBufferCreateFilenameFunc *  __xmlOutputBufferCreateFilenameValue(void);
//#ifdef LIBXML_THREAD_ENABLED
//#define xmlOutputBufferCreateFilenameValue \
//(*(__xmlOutputBufferCreateFilenameValue()))
//#else
extern xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
//#endif

#ifdef __cplusplus
}
#endif

#endif /* __XML_GLOBALS_H */
