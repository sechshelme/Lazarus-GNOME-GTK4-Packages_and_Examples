
unit chvalid;
interface

{
  Automatically converted by H2Pas 1.0.0 from chvalid.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    chvalid.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

Type
PxmlChLRange  = ^xmlChLRange;
PxmlChLRangePtr  = ^xmlChLRangePtr;
PxmlChRangeGroup  = ^xmlChRangeGroup;
PxmlChRangeGroupPtr  = ^xmlChRangeGroupPtr;
PxmlChSRange  = ^xmlChSRange;
PxmlChSRangePtr  = ^xmlChSRangePtr;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character
 *               range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
  }
{$ifndef __XML_CHVALID_H__}
{$define __XML_CHVALID_H__}
{$include <libxml/xmlversion.h>}
{$include <libxml/xmlstring.h>}
{ C++ extern C conditionnal removed }
{
 * Define our typedefs and structures
 *
  }
type

  PxmlChSRangePtr = ^TxmlChSRangePtr;
  TxmlChSRangePtr = PxmlChSRange;
  PxmlChSRange = ^TxmlChSRange;
  TxmlChSRange = record
      low : word;
      high : word;
    end;


  PxmlChLRangePtr = ^TxmlChLRangePtr;
  TxmlChLRangePtr = PxmlChLRange;
  PxmlChLRange = ^TxmlChLRange;
  TxmlChLRange = record
      low : dword;
      high : dword;
    end;


  PxmlChRangeGroupPtr = ^TxmlChRangeGroupPtr;
  TxmlChRangeGroupPtr = PxmlChRangeGroup;
(* Const before type ignored *)
{ points to an array of ranges  }
(* Const before type ignored *)
  PxmlChRangeGroup = ^TxmlChRangeGroup;
  TxmlChRangeGroup = record
      nbShortRange : longint;
      nbLongRange : longint;
      shortRange : PxmlChSRange;
      longRange : PxmlChLRange;
    end;

{*
 * Range checking routine
  }
(* Const before type ignored *)

function xmlCharInRange(val:dword; group:PxmlChRangeGroup):longint;cdecl;external;
{*
 * xmlIsBaseChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBaseChar_ch(c : longint) : longint;

{*
 * xmlIsBaseCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBaseCharQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsBaseCharGroup : TxmlChRangeGroup;cvar;external;
{*
 * xmlIsBlank_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsBlank_ch(c : longint) : longint;

{*
 * xmlIsBlankQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBlankQ(c : longint) : longint;

{*
 * xmlIsChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsChar_ch(c : longint) : longint;

{*
 * xmlIsCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsCharQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsCharGroup : TxmlChRangeGroup;cvar;external;
{*
 * xmlIsCombiningQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsCombiningQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsCombiningGroup : TxmlChRangeGroup;cvar;external;
{*
 * xmlIsDigit_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsDigit_ch(c : longint) : longint;

{*
 * xmlIsDigitQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsDigitQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsDigitGroup : TxmlChRangeGroup;cvar;external;
{*
 * xmlIsExtender_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsExtender_ch(c : longint) : longint;

{*
 * xmlIsExtenderQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsExtenderQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsExtenderGroup : TxmlChRangeGroup;cvar;external;
{*
 * xmlIsIdeographicQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsIdeographicQ(c : longint) : longint;

(* Const before type ignored *)
  var
    xmlIsIdeographicGroup : TxmlChRangeGroup;cvar;external;
(* Const before type ignored *)
    xmlIsPubidChar_tab : array[0..255] of byte;cvar;external;
{*
 * xmlIsPubidChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   

function xmlIsPubidChar_ch(c : longint) : longint;

{*
 * xmlIsPubidCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
  }
{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsPubidCharQ(c : longint) : longint;

function xmlIsBaseChar(ch:dword):longint;cdecl;external;
function xmlIsBlank(ch:dword):longint;cdecl;external;
function xmlIsChar(ch:dword):longint;cdecl;external;
function xmlIsCombining(ch:dword):longint;cdecl;external;
function xmlIsDigit(ch:dword):longint;cdecl;external;
function xmlIsExtender(ch:dword):longint;cdecl;external;
function xmlIsIdeographic(ch:dword):longint;cdecl;external;
function xmlIsPubidChar(ch:dword):longint;cdecl;external;
{ C++ end of extern C conditionnal removed }
{$endif}
{ __XML_CHVALID_H__  }

implementation

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBaseChar_ch(c : longint) : longint;
begin
  xmlIsBaseChar_ch:=((((($41<=c) and (c<=$5a)) or (($61<=c) and (c<=$7a))) or (($c0<=c) and (c<=$d6))) or (($d8<=c) and (c<=$f6))) or ($f8<=c);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBaseCharQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsBaseChar_ch(c)
  else
    if_local1:=xmlCharInRange(c,@(xmlIsBaseCharGroup));
  xmlIsBaseCharQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBlank_ch(c : longint) : longint;
begin
  xmlIsBlank_ch:=((c=$20) or (($9<=c) and (@(c<=$a)))) or (c=$d);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsBlankQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsBlank_ch(c)
  else
    if_local1:=0;
  xmlIsBlankQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsChar_ch(c : longint) : longint;
begin
  xmlIsChar_ch:=((($9<=c) and (@(c<=$a))) or (c=$d)) or ($20<=c);
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsCharQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsChar_ch(c)
  else
    if_local1:=((($100<=c) and (@(c<=$d7ff))) or (($e000<=c) and (@(c<=$fffd)))) or (($10000<=c) and (@(c<=$10ffff)));
  xmlIsCharQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsCombiningQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=0
  else
    if_local1:=xmlCharInRange(c,@(xmlIsCombiningGroup));
  xmlIsCombiningQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsDigit_ch(c : longint) : longint;
begin
  xmlIsDigit_ch:=($30<=c) and (@(c<=$39));
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsDigitQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsDigit_ch(c)
  else
    if_local1:=xmlCharInRange(c,@(xmlIsDigitGroup));
  xmlIsDigitQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsExtender_ch(c : longint) : longint;
begin
  xmlIsExtender_ch:=c=$b7;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsExtenderQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsExtender_ch(c)
  else
    if_local1:=xmlCharInRange(c,@(xmlIsExtenderGroup));
  xmlIsExtenderQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsIdeographicQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=0
  else
    if_local1:=((($4e00<=c) and (c<=$9fa5)) or (c=$3007)) or (($3021<=c) and (c<=$3029));
  xmlIsIdeographicQ:=if_local1;
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsPubidChar_ch(c : longint) : longint;
begin
  xmlIsPubidChar_ch:=xmlIsPubidChar_tab[c];
end;

{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function xmlIsPubidCharQ(c : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if c<$100 then
    if_local1:=xmlIsPubidChar_ch(c)
  else
    if_local1:=0;
  xmlIsPubidCharQ:=if_local1;
end;


end.
