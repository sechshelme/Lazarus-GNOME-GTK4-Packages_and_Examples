
unit globals;
interface

{
  Automatically converted by H2Pas 1.0.0 from globals.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    globals.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

Type
Pchar  = ^char;
Plongint  = ^longint;
PxmlBufferAllocationScheme  = ^xmlBufferAllocationScheme;
PxmlDeregisterNodeFunc  = ^xmlDeregisterNodeFunc;
PxmlError  = ^xmlError;
PxmlFreeFunc  = ^xmlFreeFunc;
PxmlGenericErrorFunc  = ^xmlGenericErrorFunc;
PxmlGlobalState  = ^xmlGlobalState;
PxmlGlobalStatePtr  = ^xmlGlobalStatePtr;
PxmlMallocFunc  = ^xmlMallocFunc;
PxmlOutputBufferCreateFilenameFunc  = ^xmlOutputBufferCreateFilenameFunc;
PxmlParserInputBufferCreateFilenameFunc  = ^xmlParserInputBufferCreateFilenameFunc;
PxmlReallocFunc  = ^xmlReallocFunc;
PxmlRegisterNodeFunc  = ^xmlRegisterNodeFunc;
PxmlSAXHandlerV1  = ^xmlSAXHandlerV1;
PxmlSAXLocator  = ^xmlSAXLocator;
PxmlStrdupFunc  = ^xmlStrdupFunc;
PxmlStructuredErrorFunc  = ^xmlStructuredErrorFunc;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
  }
{$ifndef __XML_GLOBALS_H}
{$define __XML_GLOBALS_H}
{$include <libxml/xmlversion.h>}
{$include <libxml/parser.h>}
{$include <libxml/xmlerror.h>}
{$include <libxml/SAX2.h>}
{$include <libxml/xmlmemory.h>}
{ C++ extern C conditionnal removed }

procedure xmlInitGlobals;cdecl;external;
procedure xmlCleanupGlobals;cdecl;external;
{*
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
  }
(* Const before type ignored *)
type

  TxmlParserInputBufferCreateFilenameFunc = function (URI:Pchar; enc:TxmlCharEncoding):TxmlParserInputBufferPtr;cdecl;
{*
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
  }
(* Const before type ignored *)

  TxmlOutputBufferCreateFilenameFunc = function (URI:Pchar; encoder:TxmlCharEncodingHandlerPtr; compression:longint):TxmlOutputBufferPtr;cdecl;

function xmlParserInputBufferCreateFilenameDefault(func:TxmlParserInputBufferCreateFilenameFunc):TxmlParserInputBufferCreateFilenameFunc;cdecl;external;
function xmlOutputBufferCreateFilenameDefault(func:TxmlOutputBufferCreateFilenameFunc):TxmlOutputBufferCreateFilenameFunc;cdecl;external;
{
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
  }
{$undef	docbDefaultSAXHandler}
{$undef	htmlDefaultSAXHandler}
{$undef	oldXMLWDcompatibility}
{$undef	xmlBufferAllocScheme}
{$undef	xmlDefaultBufferSize}
{$undef	xmlDefaultSAXHandler}
{$undef	xmlDefaultSAXLocator}
{$undef	xmlDoValidityCheckingDefaultValue}
{$undef	xmlFree}
{$undef	xmlGenericError}
{$undef	xmlStructuredError}
{$undef	xmlGenericErrorContext}
{$undef	xmlStructuredErrorContext}
{$undef	xmlGetWarningsDefaultValue}
{$undef	xmlIndentTreeOutput}
{$undef  xmlTreeIndentString}
{$undef	xmlKeepBlanksDefaultValue}
{$undef	xmlLineNumbersDefaultValue}
{$undef	xmlLoadExtDtdDefaultValue}
{$undef	xmlMalloc}
{$undef	xmlMallocAtomic}
{$undef	xmlMemStrdup}
{$undef	xmlParserDebugEntities}
{$undef	xmlParserVersion}
{$undef	xmlPedanticParserDefaultValue}
{$undef	xmlRealloc}
{$undef	xmlSaveNoEmptyTags}
{$undef	xmlSubstituteEntitiesDefaultValue}
{$undef  xmlRegisterNodeDefaultValue}
{$undef  xmlDeregisterNodeDefaultValue}
{$undef  xmlLastError}
{$undef  xmlParserInputBufferCreateFilenameValue}
{$undef  xmlOutputBufferCreateFilenameValue}
{*
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
  }
type

  TxmlRegisterNodeFunc = procedure (node:TxmlNodePtr);cdecl;
{*
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
  }

  TxmlDeregisterNodeFunc = procedure (node:TxmlNodePtr);cdecl;

  PxmlGlobalStatePtr = ^TxmlGlobalStatePtr;
  TxmlGlobalStatePtr = PxmlGlobalState;
(* Const before type ignored *)
(* Const before type ignored *)
  PxmlGlobalState = ^TxmlGlobalState;
  TxmlGlobalState = record
      xmlParserVersion : Pchar;
      xmlDefaultSAXLocator : TxmlSAXLocator;
      xmlDefaultSAXHandler : TxmlSAXHandlerV1;
      docbDefaultSAXHandler : TxmlSAXHandlerV1;
      htmlDefaultSAXHandler : TxmlSAXHandlerV1;
      xmlFree : TxmlFreeFunc;
      xmlMalloc : TxmlMallocFunc;
      xmlMemStrdup : TxmlStrdupFunc;
      xmlRealloc : TxmlReallocFunc;
      xmlGenericError : TxmlGenericErrorFunc;
      xmlStructuredError : TxmlStructuredErrorFunc;
      xmlGenericErrorContext : pointer;
      oldXMLWDcompatibility : longint;
      xmlBufferAllocScheme : TxmlBufferAllocationScheme;
      xmlDefaultBufferSize : longint;
      xmlSubstituteEntitiesDefaultValue : longint;
      xmlDoValidityCheckingDefaultValue : longint;
      xmlGetWarningsDefaultValue : longint;
      xmlKeepBlanksDefaultValue : longint;
      xmlLineNumbersDefaultValue : longint;
      xmlLoadExtDtdDefaultValue : longint;
      xmlParserDebugEntities : longint;
      xmlPedanticParserDefaultValue : longint;
      xmlSaveNoEmptyTags : longint;
      xmlIndentTreeOutput : longint;
      xmlTreeIndentString : Pchar;
      xmlRegisterNodeDefaultValue : TxmlRegisterNodeFunc;
      xmlDeregisterNodeDefaultValue : TxmlDeregisterNodeFunc;
      xmlMallocAtomic : TxmlMallocFunc;
      xmlLastError : TxmlError;
      xmlParserInputBufferCreateFilenameValue : TxmlParserInputBufferCreateFilenameFunc;
      xmlOutputBufferCreateFilenameValue : TxmlOutputBufferCreateFilenameFunc;
      xmlStructuredErrorContext : pointer;
    end;

{ C++ end of extern C conditionnal removed }
{$include <libxml/threads.h>}
{ C++ extern C conditionnal removed }

procedure xmlInitializeGlobalState(gs:TxmlGlobalStatePtr);cdecl;external;
procedure xmlThrDefSetGenericErrorFunc(ctx:pointer; handler:TxmlGenericErrorFunc);cdecl;external;
procedure xmlThrDefSetStructuredErrorFunc(ctx:pointer; handler:TxmlStructuredErrorFunc);cdecl;external;
function xmlRegisterNodeDefault(func:TxmlRegisterNodeFunc):TxmlRegisterNodeFunc;cdecl;external;
function xmlThrDefRegisterNodeDefault(func:TxmlRegisterNodeFunc):TxmlRegisterNodeFunc;cdecl;external;
function xmlDeregisterNodeDefault(func:TxmlDeregisterNodeFunc):TxmlDeregisterNodeFunc;cdecl;external;
function xmlThrDefDeregisterNodeDefault(func:TxmlDeregisterNodeFunc):TxmlDeregisterNodeFunc;cdecl;external;
function xmlThrDefOutputBufferCreateFilenameDefault(func:TxmlOutputBufferCreateFilenameFunc):TxmlOutputBufferCreateFilenameFunc;cdecl;external;
function xmlThrDefParserInputBufferCreateFilenameDefault(func:TxmlParserInputBufferCreateFilenameFunc):TxmlParserInputBufferCreateFilenameFunc;cdecl;external;
{* DOC_DISABLE  }
{
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
  }
{#ifdef LIBXML_THREAD_ALLOC_ENABLED }
{#ifdef LIBXML_THREAD_ENABLED }
function __xmlMalloc:PxmlMallocFunc;cdecl;external;
{#define xmlMalloc \ }
{(*(__xmlMalloc())) }
{#else }
  var
    xmlMalloc : TxmlMallocFunc;cvar;external;
{#endif }
{#ifdef LIBXML_THREAD_ENABLED }

function __xmlMallocAtomic:PxmlMallocFunc;cdecl;external;
{#define xmlMallocAtomic \ }
{(*(__xmlMallocAtomic())) }
{#else }
  var
    xmlMallocAtomic : TxmlMallocFunc;cvar;external;
{#endif }
{#ifdef LIBXML_THREAD_ENABLED }

function __xmlRealloc:PxmlReallocFunc;cdecl;external;
{#define xmlRealloc \ }
{(*(__xmlRealloc())) }
{#else }
  var
    xmlRealloc : TxmlReallocFunc;cvar;external;
{#endif }
{#ifdef LIBXML_THREAD_ENABLED }

function __xmlFree:PxmlFreeFunc;cdecl;external;
{#define xmlFree \ }
{(*(__xmlFree())) }
{#else }
  var
    xmlFree : TxmlFreeFunc;cvar;external;
{#endif }
{#ifdef LIBXML_THREAD_ENABLED }

function __xmlMemStrdup:PxmlStrdupFunc;cdecl;external;
{#define xmlMemStrdup \ }
{(*(__xmlMemStrdup())) }
{#else }
  var
    xmlMemStrdup : TxmlStrdupFunc;cvar;external;
{#endif }
{$else}
{ !LIBXML_THREAD_ALLOC_ENABLED  }
  var
    xmlMalloc : TxmlMallocFunc;cvar;external;
    xmlMallocAtomic : TxmlMallocFunc;cvar;external;
    xmlRealloc : TxmlReallocFunc;cvar;external;
    xmlFree : TxmlFreeFunc;cvar;external;
    xmlMemStrdup : TxmlStrdupFunc;cvar;external;
{$endif}
{ LIBXML_THREAD_ALLOC_ENABLED  }
{#ifdef LIBXML_DOCB_ENABLED }

function __docbDefaultSAXHandler:PxmlSAXHandlerV1;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define docbDefaultSAXHandler \ }
{(*(__docbDefaultSAXHandler())) }
{#else }
  var
    docbDefaultSAXHandler : TxmlSAXHandlerV1;cvar;external;
{#endif }
{#endif }
{#ifdef LIBXML_HTML_ENABLED }

function __htmlDefaultSAXHandler:PxmlSAXHandlerV1;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define htmlDefaultSAXHandler \ }
{(*(__htmlDefaultSAXHandler())) }
{#else }
  var
    htmlDefaultSAXHandler : TxmlSAXHandlerV1;cvar;external;
{#endif }
{$endif}

function __xmlLastError:PxmlError;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlLastError \ }
{(*(__xmlLastError())) }
{#else }
  var
    xmlLastError : TxmlError;cvar;external;
{#endif }
{
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
  }

function __oldXMLWDcompatibility:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define oldXMLWDcompatibility \ }
{(*(__oldXMLWDcompatibility())) }
{#else }
  var
    oldXMLWDcompatibility : longint;cvar;external;
{#endif }

function __xmlBufferAllocScheme:PxmlBufferAllocationScheme;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlBufferAllocScheme \ }
{(*(__xmlBufferAllocScheme())) }
{#else }
  var
    xmlBufferAllocScheme : TxmlBufferAllocationScheme;cvar;external;
{#endif }

function xmlThrDefBufferAllocScheme(v:TxmlBufferAllocationScheme):TxmlBufferAllocationScheme;cdecl;external;
function __xmlDefaultBufferSize:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlDefaultBufferSize \ }
{(*(__xmlDefaultBufferSize())) }
{#else }
  var
    xmlDefaultBufferSize : longint;cvar;external;
{#endif }

function xmlThrDefDefaultBufferSize(v:longint):longint;cdecl;external;
function __xmlDefaultSAXHandler:PxmlSAXHandlerV1;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlDefaultSAXHandler \ }
{(*(__xmlDefaultSAXHandler())) }
{#else }
  var
    xmlDefaultSAXHandler : TxmlSAXHandlerV1;cvar;external;
{#endif }

function __xmlDefaultSAXLocator:PxmlSAXLocator;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlDefaultSAXLocator \ }
{(*(__xmlDefaultSAXLocator())) }
{#else }
  var
    xmlDefaultSAXLocator : TxmlSAXLocator;cvar;external;
{#endif }

function __xmlDoValidityCheckingDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlDoValidityCheckingDefaultValue \ }
{(*(__xmlDoValidityCheckingDefaultValue())) }
{#else }
  var
    xmlDoValidityCheckingDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefDoValidityCheckingDefaultValue(v:longint):longint;cdecl;external;
function __xmlGenericError:PxmlGenericErrorFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlGenericError \ }
{(*(__xmlGenericError())) }
{#else }
  var
    xmlGenericError : TxmlGenericErrorFunc;cvar;external;
{#endif }

function __xmlStructuredError:PxmlStructuredErrorFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlStructuredError \ }
{(*(__xmlStructuredError())) }
{#else }
  var
    xmlStructuredError : TxmlStructuredErrorFunc;cvar;external;
{#endif }

function __xmlGenericErrorContext:^pointer;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlGenericErrorContext \ }
{(*(__xmlGenericErrorContext())) }
{#else }
  var
    xmlGenericErrorContext : pointer;cvar;external;
{#endif }

function __xmlStructuredErrorContext:^pointer;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlStructuredErrorContext \ }
{(*(__xmlStructuredErrorContext())) }
{#else }
  var
    xmlStructuredErrorContext : pointer;cvar;external;
{#endif }

function __xmlGetWarningsDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlGetWarningsDefaultValue \ }
{(*(__xmlGetWarningsDefaultValue())) }
{#else }
  var
    xmlGetWarningsDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefGetWarningsDefaultValue(v:longint):longint;cdecl;external;
function __xmlIndentTreeOutput:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlIndentTreeOutput \ }
{(*(__xmlIndentTreeOutput())) }
{#else }
  var
    xmlIndentTreeOutput : longint;cvar;external;
{#endif }

function xmlThrDefIndentTreeOutput(v:longint):longint;cdecl;external;
(* Const before type ignored *)
function __xmlTreeIndentString:^Pchar;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlTreeIndentString \ }
{(*(__xmlTreeIndentString())) }
{#else }
(* Const before type ignored *)
  var
    xmlTreeIndentString : Pchar;cvar;external;
{#endif }
(* Const before type ignored *)
(* Const before type ignored *)

function xmlThrDefTreeIndentString(v:Pchar):Pchar;cdecl;external;
function __xmlKeepBlanksDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlKeepBlanksDefaultValue \ }
{(*(__xmlKeepBlanksDefaultValue())) }
{#else }
  var
    xmlKeepBlanksDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefKeepBlanksDefaultValue(v:longint):longint;cdecl;external;
function __xmlLineNumbersDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlLineNumbersDefaultValue \ }
{(*(__xmlLineNumbersDefaultValue())) }
{#else }
  var
    xmlLineNumbersDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefLineNumbersDefaultValue(v:longint):longint;cdecl;external;
function __xmlLoadExtDtdDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlLoadExtDtdDefaultValue \ }
{(*(__xmlLoadExtDtdDefaultValue())) }
{#else }
  var
    xmlLoadExtDtdDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefLoadExtDtdDefaultValue(v:longint):longint;cdecl;external;
function __xmlParserDebugEntities:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlParserDebugEntities \ }
{(*(__xmlParserDebugEntities())) }
{#else }
  var
    xmlParserDebugEntities : longint;cvar;external;
{#endif }

function xmlThrDefParserDebugEntities(v:longint):longint;cdecl;external;
(* Const before type ignored *)
function __xmlParserVersion:^Pchar;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlParserVersion \ }
{(*(__xmlParserVersion())) }
{#else }
(* Const before type ignored *)
  var
    xmlParserVersion : Pchar;cvar;external;
{#endif }

function __xmlPedanticParserDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlPedanticParserDefaultValue \ }
{(*(__xmlPedanticParserDefaultValue())) }
{#else }
  var
    xmlPedanticParserDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefPedanticParserDefaultValue(v:longint):longint;cdecl;external;
function __xmlSaveNoEmptyTags:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlSaveNoEmptyTags \ }
{(*(__xmlSaveNoEmptyTags())) }
{#else }
  var
    xmlSaveNoEmptyTags : longint;cvar;external;
{#endif }

function xmlThrDefSaveNoEmptyTags(v:longint):longint;cdecl;external;
function __xmlSubstituteEntitiesDefaultValue:Plongint;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlSubstituteEntitiesDefaultValue \ }
{(*(__xmlSubstituteEntitiesDefaultValue())) }
{#else }
  var
    xmlSubstituteEntitiesDefaultValue : longint;cvar;external;
{#endif }

function xmlThrDefSubstituteEntitiesDefaultValue(v:longint):longint;cdecl;external;
function __xmlRegisterNodeDefaultValue:PxmlRegisterNodeFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlRegisterNodeDefaultValue \ }
{(*(__xmlRegisterNodeDefaultValue())) }
{#else }
  var
    xmlRegisterNodeDefaultValue : TxmlRegisterNodeFunc;cvar;external;
{#endif }

function __xmlDeregisterNodeDefaultValue:PxmlDeregisterNodeFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlDeregisterNodeDefaultValue \ }
{(*(__xmlDeregisterNodeDefaultValue())) }
{#else }
  var
    xmlDeregisterNodeDefaultValue : TxmlDeregisterNodeFunc;cvar;external;
{#endif }

function __xmlParserInputBufferCreateFilenameValue:PxmlParserInputBufferCreateFilenameFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlParserInputBufferCreateFilenameValue \ }
{(*(__xmlParserInputBufferCreateFilenameValue())) }
{#else }
  var
    xmlParserInputBufferCreateFilenameValue : TxmlParserInputBufferCreateFilenameFunc;cvar;external;
{#endif }

function __xmlOutputBufferCreateFilenameValue:PxmlOutputBufferCreateFilenameFunc;cdecl;external;
{#ifdef LIBXML_THREAD_ENABLED }
{#define xmlOutputBufferCreateFilenameValue \ }
{(*(__xmlOutputBufferCreateFilenameValue())) }
{#else }
  var
    xmlOutputBufferCreateFilenameValue : TxmlOutputBufferCreateFilenameFunc;cvar;external;
{#endif }
{ C++ end of extern C conditionnal removed }
{$endif}
{ __XML_GLOBALS_H  }

implementation


end.
