
unit adw_enums;
interface

{
  Automatically converted by H2Pas 1.0.0 from adw_enums.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    adw_enums.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
(** unsupported pragma#pragma once*)
{$include <glib-object.h>}
{$if !defined(_ADWAITA_INSIDE) && !defined(ADWAITA_COMPILATION)}
{$error "Only <adwaita.h> can be included directly."}
{$endif}
{$include "adw-version.h"}
{ enumerations from "adw-alert-dialog.h"  }

function adw_response_appearance_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_RESPONSE_APPEARANCE : longint; { return type might be wrong }

{ enumerations from "adw-animation.h"  }
function adw_animation_state_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_ANIMATION_STATE : longint; { return type might be wrong }

{ enumerations from "adw-breakpoint.h"  }
function adw_breakpoint_condition_length_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_BREAKPOINT_CONDITION_LENGTH_TYPE : longint; { return type might be wrong }

function adw_breakpoint_condition_ratio_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_BREAKPOINT_CONDITION_RATIO_TYPE : longint; { return type might be wrong }

{ enumerations from "adw-dialog.h"  }
function adw_dialog_presentation_mode_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_DIALOG_PRESENTATION_MODE : longint; { return type might be wrong }

{ enumerations from "adw-easing.h"  }
function adw_easing_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_EASING : longint; { return type might be wrong }

{ enumerations from "adw-flap.h"  }
function adw_flap_fold_policy_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_FLAP_FOLD_POLICY : longint; { return type might be wrong }

function adw_flap_transition_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_FLAP_TRANSITION_TYPE : longint; { return type might be wrong }

{ enumerations from "adw-fold-threshold-policy.h"  }
function adw_fold_threshold_policy_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_FOLD_THRESHOLD_POLICY : longint; { return type might be wrong }

{ enumerations from "adw-header-bar.h"  }
function adw_centering_policy_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_CENTERING_POLICY : longint; { return type might be wrong }

{ enumerations from "adw-leaflet.h"  }
function adw_leaflet_transition_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_LEAFLET_TRANSITION_TYPE : longint; { return type might be wrong }

{ enumerations from "adw-length-unit.h"  }
function adw_length_unit_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_LENGTH_UNIT : longint; { return type might be wrong }

{ enumerations from "adw-navigation-direction.h"  }
function adw_navigation_direction_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_NAVIGATION_DIRECTION : longint; { return type might be wrong }

{ enumerations from "adw-squeezer.h"  }
function adw_squeezer_transition_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_SQUEEZER_TRANSITION_TYPE : longint; { return type might be wrong }

{ enumerations from "adw-style-manager.h"  }
function adw_color_scheme_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_COLOR_SCHEME : longint; { return type might be wrong }

{ enumerations from "adw-tab-view.h"  }
function adw_tab_view_shortcuts_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_TAB_VIEW_SHORTCUTS : longint; { return type might be wrong }

{ enumerations from "adw-toast.h"  }
function adw_toast_priority_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_TOAST_PRIORITY : longint; { return type might be wrong }

{ enumerations from "adw-toolbar-view.h"  }
function adw_toolbar_style_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_TOOLBAR_STYLE : longint; { return type might be wrong }

{ enumerations from "adw-view-switcher.h"  }
function adw_view_switcher_policy_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function ADW_TYPE_VIEW_SWITCHER_POLICY : longint; { return type might be wrong }

{ Generated data ends here  }

implementation

{ was #define dname def_expr }
function ADW_TYPE_RESPONSE_APPEARANCE : longint; { return type might be wrong }
  begin
    ADW_TYPE_RESPONSE_APPEARANCE:=adw_response_appearance_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_ANIMATION_STATE : longint; { return type might be wrong }
  begin
    ADW_TYPE_ANIMATION_STATE:=adw_animation_state_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_BREAKPOINT_CONDITION_LENGTH_TYPE : longint; { return type might be wrong }
  begin
    ADW_TYPE_BREAKPOINT_CONDITION_LENGTH_TYPE:=adw_breakpoint_condition_length_type_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_BREAKPOINT_CONDITION_RATIO_TYPE : longint; { return type might be wrong }
  begin
    ADW_TYPE_BREAKPOINT_CONDITION_RATIO_TYPE:=adw_breakpoint_condition_ratio_type_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_DIALOG_PRESENTATION_MODE : longint; { return type might be wrong }
  begin
    ADW_TYPE_DIALOG_PRESENTATION_MODE:=adw_dialog_presentation_mode_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_EASING : longint; { return type might be wrong }
  begin
    ADW_TYPE_EASING:=adw_easing_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_FLAP_FOLD_POLICY : longint; { return type might be wrong }
  begin
    ADW_TYPE_FLAP_FOLD_POLICY:=adw_flap_fold_policy_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_FLAP_TRANSITION_TYPE : longint; { return type might be wrong }
  begin
    ADW_TYPE_FLAP_TRANSITION_TYPE:=adw_flap_transition_type_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_FOLD_THRESHOLD_POLICY : longint; { return type might be wrong }
  begin
    ADW_TYPE_FOLD_THRESHOLD_POLICY:=adw_fold_threshold_policy_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_CENTERING_POLICY : longint; { return type might be wrong }
  begin
    ADW_TYPE_CENTERING_POLICY:=adw_centering_policy_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_LEAFLET_TRANSITION_TYPE : longint; { return type might be wrong }
  begin
    ADW_TYPE_LEAFLET_TRANSITION_TYPE:=adw_leaflet_transition_type_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_LENGTH_UNIT : longint; { return type might be wrong }
  begin
    ADW_TYPE_LENGTH_UNIT:=adw_length_unit_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_NAVIGATION_DIRECTION : longint; { return type might be wrong }
  begin
    ADW_TYPE_NAVIGATION_DIRECTION:=adw_navigation_direction_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_SQUEEZER_TRANSITION_TYPE : longint; { return type might be wrong }
  begin
    ADW_TYPE_SQUEEZER_TRANSITION_TYPE:=adw_squeezer_transition_type_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_COLOR_SCHEME : longint; { return type might be wrong }
  begin
    ADW_TYPE_COLOR_SCHEME:=adw_color_scheme_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_TAB_VIEW_SHORTCUTS : longint; { return type might be wrong }
  begin
    ADW_TYPE_TAB_VIEW_SHORTCUTS:=adw_tab_view_shortcuts_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_TOAST_PRIORITY : longint; { return type might be wrong }
  begin
    ADW_TYPE_TOAST_PRIORITY:=adw_toast_priority_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_TOOLBAR_STYLE : longint; { return type might be wrong }
  begin
    ADW_TYPE_TOOLBAR_STYLE:=adw_toolbar_style_get_type;
  end;

{ was #define dname def_expr }
function ADW_TYPE_VIEW_SWITCHER_POLICY : longint; { return type might be wrong }
  begin
    ADW_TYPE_VIEW_SWITCHER_POLICY:=adw_view_switcher_policy_get_type;
  end;


end.
