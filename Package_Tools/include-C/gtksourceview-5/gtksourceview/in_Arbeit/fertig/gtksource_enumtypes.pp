
unit gtksource_enumtypes;
interface

{
  Automatically converted by H2Pas 1.0.0 from gtksource_enumtypes.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    gtksource_enumtypes.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
{$include <gtksourceview/gtksourceversion.h>}
{ enumerations from "gtksourcebuffer.h"  }

function gtk_source_bracket_match_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_BRACKET_MATCH_TYPE : longint; { return type might be wrong }

function gtk_source_change_case_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_CHANGE_CASE_TYPE : longint; { return type might be wrong }

function gtk_source_sort_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SORT_FLAGS : longint; { return type might be wrong }

{ enumerations from "gtksourcecompletioncell.h"  }
function gtk_source_completion_column_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPLETION_COLUMN : longint; { return type might be wrong }

{ enumerations from "gtksourcecompletioncontext.h"  }
function gtk_source_completion_activation_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPLETION_ACTIVATION : longint; { return type might be wrong }

{ enumerations from "gtksourcefile.h"  }
function gtk_source_newline_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_NEWLINE_TYPE : longint; { return type might be wrong }

function gtk_source_compression_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPRESSION_TYPE : longint; { return type might be wrong }

{ enumerations from "gtksourcefileloader.h"  }
function gtk_source_file_loader_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_LOADER_ERROR : longint; { return type might be wrong }

{ enumerations from "gtksourcefilesaver.h"  }
function gtk_source_file_saver_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_SAVER_ERROR : longint; { return type might be wrong }

function gtk_source_file_saver_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_SAVER_FLAGS : longint; { return type might be wrong }

{ enumerations from "gtksourcegutterrenderer.h"  }
function gtk_source_gutter_renderer_alignment_mode_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_GUTTER_RENDERER_ALIGNMENT_MODE : longint; { return type might be wrong }

{ enumerations from "gtksourcespacedrawer.h"  }
function gtk_source_space_type_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SPACE_TYPE_FLAGS : longint; { return type might be wrong }

function gtk_source_space_location_flags_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SPACE_LOCATION_FLAGS : longint; { return type might be wrong }

{ enumerations from "gtksourceview.h"  }
function gtk_source_view_gutter_position_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_VIEW_GUTTER_POSITION : longint; { return type might be wrong }

function gtk_source_smart_home_end_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SMART_HOME_END_TYPE : longint; { return type might be wrong }

function gtk_source_background_pattern_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GTK_SOURCE_TYPE_BACKGROUND_PATTERN_TYPE : longint; { return type might be wrong }

{ Generated data ends here  }

implementation

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_BRACKET_MATCH_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_BRACKET_MATCH_TYPE:=gtk_source_bracket_match_type_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_CHANGE_CASE_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_CHANGE_CASE_TYPE:=gtk_source_change_case_type_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SORT_FLAGS : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_SORT_FLAGS:=gtk_source_sort_flags_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPLETION_COLUMN : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_COMPLETION_COLUMN:=gtk_source_completion_column_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPLETION_ACTIVATION : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_COMPLETION_ACTIVATION:=gtk_source_completion_activation_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_NEWLINE_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_NEWLINE_TYPE:=gtk_source_newline_type_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_COMPRESSION_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_COMPRESSION_TYPE:=gtk_source_compression_type_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_LOADER_ERROR : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_FILE_LOADER_ERROR:=gtk_source_file_loader_error_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_SAVER_ERROR : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_FILE_SAVER_ERROR:=gtk_source_file_saver_error_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_FILE_SAVER_FLAGS : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_FILE_SAVER_FLAGS:=gtk_source_file_saver_flags_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_GUTTER_RENDERER_ALIGNMENT_MODE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_GUTTER_RENDERER_ALIGNMENT_MODE:=gtk_source_gutter_renderer_alignment_mode_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SPACE_TYPE_FLAGS : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_SPACE_TYPE_FLAGS:=gtk_source_space_type_flags_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SPACE_LOCATION_FLAGS : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_SPACE_LOCATION_FLAGS:=gtk_source_space_location_flags_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_VIEW_GUTTER_POSITION : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_VIEW_GUTTER_POSITION:=gtk_source_view_gutter_position_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_SMART_HOME_END_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_SMART_HOME_END_TYPE:=gtk_source_smart_home_end_type_get_type;
  end;

{ was #define dname def_expr }
function GTK_SOURCE_TYPE_BACKGROUND_PATTERN_TYPE : longint; { return type might be wrong }
  begin
    GTK_SOURCE_TYPE_BACKGROUND_PATTERN_TYPE:=gtk_source_background_pattern_type_get_type;
  end;


end.
