
unit json_enum_types;
interface

{
  Automatically converted by H2Pas 1.0.0 from json_enum_types.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    json_enum_types.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
{$ifndef __JSON_ENUM_TYPES_H__}
{$define __JSON_ENUM_TYPES_H__}
{$if !defined(__JSON_GLIB_INSIDE__) && !defined(JSON_COMPILATION)}
{$error "Only <json-glib/json-glib.h> can be included directly."}
{$endif}
{$include <glib-object.h>}
{$include <json-glib/json-version-macros.h>}
{ enumerations from "json-parser.h"  }

function json_parser_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function JSON_TYPE_PARSER_ERROR : longint; { return type might be wrong }

{ enumerations from "json-path.h"  }
function json_path_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function JSON_TYPE_PATH_ERROR : longint; { return type might be wrong }

{ enumerations from "json-reader.h"  }
function json_reader_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function JSON_TYPE_READER_ERROR : longint; { return type might be wrong }

{ enumerations from "json-types.h"  }
function json_node_type_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function JSON_TYPE_NODE_TYPE : longint; { return type might be wrong }

{$endif}
{ !__JSON_ENUM_TYPES_H__  }
{ Generated data ends here  }

implementation

{ was #define dname def_expr }
function JSON_TYPE_PARSER_ERROR : longint; { return type might be wrong }
  begin
    JSON_TYPE_PARSER_ERROR:=json_parser_error_get_type;
  end;

{ was #define dname def_expr }
function JSON_TYPE_PATH_ERROR : longint; { return type might be wrong }
  begin
    JSON_TYPE_PATH_ERROR:=json_path_error_get_type;
  end;

{ was #define dname def_expr }
function JSON_TYPE_READER_ERROR : longint; { return type might be wrong }
  begin
    JSON_TYPE_READER_ERROR:=json_reader_error_get_type;
  end;

{ was #define dname def_expr }
function JSON_TYPE_NODE_TYPE : longint; { return type might be wrong }
  begin
    JSON_TYPE_NODE_TYPE:=json_node_type_get_type;
  end;


end.
