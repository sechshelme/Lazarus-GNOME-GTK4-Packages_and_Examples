{$IFDEF read_interface}

type
  TEvas_GL = record
  end;
  PEvas_GL = ^TEvas_GL;

  TEvas_GL_Surface = record
  end;
  PEvas_GL_Surface = ^TEvas_GL_Surface;
  PPEvas_GL_Surface = ^PEvas_GL_Surface;

  TEvas_GL_Context = record
  end;
  PEvas_GL_Context = ^TEvas_GL_Context;
  PPEvas_GL_Context = ^PEvas_GL_Context;

  PEvas_GL_Func = ^TEvas_GL_Func;
  TEvas_GL_Func = pointer;

  PEvasGLImage = ^TEvasGLImage;
  TEvasGLImage = pointer;

  PEvas_GL_Color_Format = ^TEvas_GL_Color_Format;
  TEvas_GL_Color_Format = longint;

const
  EVAS_GL_RGB_888 = 0;
  EVAS_GL_RGBA_8888 = 1;
  EVAS_GL_NO_FBO = 2;

type
  PEvas_GL_Depth_Bits = ^TEvas_GL_Depth_Bits;
  TEvas_GL_Depth_Bits = longint;

const
  EVAS_GL_DEPTH_NONE = 0;
  EVAS_GL_DEPTH_BIT_8 = 1;
  EVAS_GL_DEPTH_BIT_16 = 2;
  EVAS_GL_DEPTH_BIT_24 = 3;
  EVAS_GL_DEPTH_BIT_32 = 4;

type
  PEvas_GL_Stencil_Bits = ^TEvas_GL_Stencil_Bits;
  TEvas_GL_Stencil_Bits = longint;

const
  EVAS_GL_STENCIL_NONE = 0;
  EVAS_GL_STENCIL_BIT_1 = 1;
  EVAS_GL_STENCIL_BIT_2 = 2;
  EVAS_GL_STENCIL_BIT_4 = 3;
  EVAS_GL_STENCIL_BIT_8 = 4;
  EVAS_GL_STENCIL_BIT_16 = 5;

type
  PEvas_GL_Options_Bits = ^TEvas_GL_Options_Bits;
  TEvas_GL_Options_Bits = longint;

const
  EVAS_GL_OPTIONS_NONE = 0;
  EVAS_GL_OPTIONS_DIRECT = 1 shl 0;
  EVAS_GL_OPTIONS_CLIENT_SIDE_ROTATION = 1 shl 1;

type
  PEvas_GL_Multisample_Bits = ^TEvas_GL_Multisample_Bits;
  TEvas_GL_Multisample_Bits = longint;

const
  EVAS_GL_MULTISAMPLE_NONE = 0;
  EVAS_GL_MULTISAMPLE_LOW = 1;
  EVAS_GL_MULTISAMPLE_MED = 2;
  EVAS_GL_MULTISAMPLE_HIGH = 3;

type
  PEvas_GL_Context_Version = ^TEvas_GL_Context_Version;
  TEvas_GL_Context_Version = longint;

const
  EVAS_GL_GLES_1_X = 1;
  EVAS_GL_GLES_2_X = 2;
  EVAS_GL_GLES_3_X = 3;

type
  PEvas_GL_Config = ^TEvas_GL_Config;

  TEvas_GL_Config = record
    color_format: TEvas_GL_Color_Format;
    depth_bits: TEvas_GL_Depth_Bits;
    stencil_bits: TEvas_GL_Stencil_Bits;
    options_bits: TEvas_GL_Options_Bits;
    multisample_bits: TEvas_GL_Multisample_Bits;
    gles_version: TEvas_GL_Context_Version;
  end;

const
  EVAS_GL_EXTENSIONS = 1;

{-------------------------------------------------------------------------
 * Data type definitions
 *----------------------------------------------------------------------- }
type
  PPGLvoid = ^PGLvoid;
  PGLvoid = ^TGLvoid;
  TGLvoid = pointer;

  PPGLchar = ^PGLchar;
  PGLchar = ^TGLchar;
  TGLchar = char;

  PGLenum = ^TGLenum;
  TGLenum = dword;

  PGLboolean = ^TGLboolean;
  TGLboolean = byte;

  PGLbitfield = ^TGLbitfield;
  TGLbitfield = dword;

  PGLbyte = ^TGLbyte;
  TGLbyte = char;

  PGLshort = ^TGLshort;
  TGLshort = smallint;

  PGLint = ^TGLint;
  TGLint = longint;

  PGLsizei = ^TGLsizei;
  TGLsizei = longint;

  PGLubyte = ^TGLubyte;
  TGLubyte = byte;

  PGLushort = ^TGLushort;
  TGLushort = word;

  PGLuint = ^TGLuint;
  TGLuint = dword;

  PGLfloat = ^TGLfloat;
  TGLfloat = single;

  PGLclampf = ^TGLclampf;
  TGLclampf = single;

  PGLfixed = ^TGLfixed;
  TGLfixed = longint;

const
  GL_DEPTH_BUFFER_BIT = $00000100;
  GL_STENCIL_BUFFER_BIT = $00000400;
  GL_COLOR_BUFFER_BIT = $00004000;
  GL_FALSE = 0;
  GL_TRUE = 1;
  GL_POINTS = $0000;
  GL_LINES = $0001;
  GL_LINE_LOOP = $0002;
  GL_LINE_STRIP = $0003;
  GL_TRIANGLES = $0004;
  GL_TRIANGLE_STRIP = $0005;
  GL_TRIANGLE_FAN = $0006;
  GL_ZERO = 0;
  GL_ONE = 1;
  GL_SRC_COLOR = $0300;
  GL_ONE_MINUS_SRC_COLOR = $0301;
  GL_SRC_ALPHA = $0302;
  GL_ONE_MINUS_SRC_ALPHA = $0303;
  GL_DST_ALPHA = $0304;
  GL_ONE_MINUS_DST_ALPHA = $0305;
  GL_DST_COLOR = $0306;
  GL_ONE_MINUS_DST_COLOR = $0307;
  GL_SRC_ALPHA_SATURATE = $0308;
  GL_FUNC_ADD = $8006;
  GL_BLEND_EQUATION = $8009;
  GL_BLEND_EQUATION_RGB = $8009;
  GL_BLEND_EQUATION_ALPHA = $883D;
  GL_FUNC_SUBTRACT = $800A;
  GL_FUNC_REVERSE_SUBTRACT = $800B;
  GL_BLEND_DST_RGB = $80C8;
  GL_BLEND_SRC_RGB = $80C9;
  GL_BLEND_DST_ALPHA = $80CA;
  GL_BLEND_SRC_ALPHA = $80CB;
  GL_CONSTANT_COLOR = $8001;
  GL_ONE_MINUS_CONSTANT_COLOR = $8002;
  GL_CONSTANT_ALPHA = $8003;
  GL_ONE_MINUS_CONSTANT_ALPHA = $8004;
  GL_BLEND_COLOR = $8005;
  GL_ARRAY_BUFFER = $8892;
  GL_ELEMENT_ARRAY_BUFFER = $8893;
  GL_ARRAY_BUFFER_BINDING = $8894;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = $8895;
  GL_STREAM_DRAW = $88E0;
  GL_STATIC_DRAW = $88E4;
  GL_DYNAMIC_DRAW = $88E8;
  GL_BUFFER_SIZE = $8764;
  GL_BUFFER_USAGE = $8765;
  GL_CURRENT_VERTEX_ATTRIB = $8626;
  GL_FRONT = $0404;
  GL_BACK = $0405;
  GL_FRONT_AND_BACK = $0408;
  GL_TEXTURE_2D = $0DE1;
  GL_CULL_FACE = $0B44;
  GL_BLEND = $0BE2;
  GL_DITHER = $0BD0;
  GL_STENCIL_TEST = $0B90;
  GL_DEPTH_TEST = $0B71;
  GL_SCISSOR_TEST = $0C11;
  GL_POLYGON_OFFSET_FILL = $8037;
  GL_SAMPLE_ALPHA_TO_COVERAGE = $809E;
  GL_SAMPLE_COVERAGE = $80A0;
  GL_NO_ERROR = 0;
  GL_INVALID_ENUM = $0500;
  GL_INVALID_VALUE = $0501;
  GL_INVALID_OPERATION = $0502;
  GL_OUT_OF_MEMORY = $0505;
  GL_CW = $0900;
  GL_CCW = $0901;
  GL_LINE_WIDTH = $0B21;
  GL_ALIASED_POINT_SIZE_RANGE = $846D;
  GL_ALIASED_LINE_WIDTH_RANGE = $846E;
  GL_CULL_FACE_MODE = $0B45;
  GL_FRONT_FACE = $0B46;
  GL_DEPTH_RANGE = $0B70;
  GL_DEPTH_WRITEMASK = $0B72;
  GL_DEPTH_CLEAR_VALUE = $0B73;
  GL_DEPTH_FUNC = $0B74;
  GL_STENCIL_CLEAR_VALUE = $0B91;
  GL_STENCIL_FUNC = $0B92;
  GL_STENCIL_FAIL = $0B94;
  GL_STENCIL_PASS_DEPTH_FAIL = $0B95;
  GL_STENCIL_PASS_DEPTH_PASS = $0B96;
  GL_STENCIL_REF = $0B97;
  GL_STENCIL_VALUE_MASK = $0B93;
  GL_STENCIL_WRITEMASK = $0B98;
  GL_STENCIL_BACK_FUNC = $8800;
  GL_STENCIL_BACK_FAIL = $8801;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = $8802;
  GL_STENCIL_BACK_PASS_DEPTH_PASS = $8803;
  GL_STENCIL_BACK_REF = $8CA3;
  GL_STENCIL_BACK_VALUE_MASK = $8CA4;
  GL_STENCIL_BACK_WRITEMASK = $8CA5;
  GL_VIEWPORT = $0BA2;
  GL_SCISSOR_BOX = $0C10;
  GL_COLOR_CLEAR_VALUE = $0C22;
  GL_COLOR_WRITEMASK = $0C23;
  GL_UNPACK_ALIGNMENT = $0CF5;
  GL_PACK_ALIGNMENT = $0D05;
  GL_MAX_TEXTURE_SIZE = $0D33;
  GL_MAX_VIEWPORT_DIMS = $0D3A;
  GL_SUBPIXEL_BITS = $0D50;
  GL_RED_BITS = $0D52;
  GL_GREEN_BITS = $0D53;
  GL_BLUE_BITS = $0D54;
  GL_ALPHA_BITS = $0D55;
  GL_DEPTH_BITS = $0D56;
  GL_STENCIL_BITS = $0D57;
  GL_POLYGON_OFFSET_UNITS = $2A00;
  GL_POLYGON_OFFSET_FACTOR = $8038;
  GL_TEXTURE_BINDING_2D = $8069;
  GL_SAMPLE_BUFFERS = $80A8;
  GL_SAMPLES = $80A9;
  GL_SAMPLE_COVERAGE_VALUE = $80AA;
  GL_SAMPLE_COVERAGE_INVERT = $80AB;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
  GL_COMPRESSED_TEXTURE_FORMATS = $86A3;
  GL_DONT_CARE = $1100;
  GL_FASTEST = $1101;
  GL_NICEST = $1102;
  GL_GENERATE_MIPMAP_HINT = $8192;
  GL_BYTE = $1400;
  GL_UNSIGNED_BYTE = $1401;
  GL_SHORT = $1402;
  GL_UNSIGNED_SHORT = $1403;
  GL_INT = $1404;
  GL_UNSIGNED_INT = $1405;
  GL_FLOAT = $1406;
  GL_FIXED = $140C;
  GL_DEPTH_COMPONENT = $1902;
  GL_ALPHA = $1906;
  GL_RGB = $1907;
  GL_RGBA = $1908;
  GL_LUMINANCE = $1909;
  GL_LUMINANCE_ALPHA = $190A;
  GL_UNSIGNED_SHORT_4_4_4_4 = $8033;
  GL_UNSIGNED_SHORT_5_5_5_1 = $8034;
  GL_UNSIGNED_SHORT_5_6_5 = $8363;
  GL_FRAGMENT_SHADER = $8B30;
  GL_VERTEX_SHADER = $8B31;
  GL_MAX_VERTEX_ATTRIBS = $8869;
  GL_MAX_VERTEX_UNIFORM_VECTORS = $8DFB;
  GL_MAX_VARYING_VECTORS = $8DFC;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
  GL_MAX_TEXTURE_IMAGE_UNITS = $8872;
  GL_MAX_FRAGMENT_UNIFORM_VECTORS = $8DFD;
  GL_SHADER_TYPE = $8B4F;
  GL_DELETE_STATUS = $8B80;
  GL_LINK_STATUS = $8B82;
  GL_VALIDATE_STATUS = $8B83;
  GL_ATTACHED_SHADERS = $8B85;
  GL_ACTIVE_UNIFORMS = $8B86;
  GL_ACTIVE_UNIFORM_MAX_LENGTH = $8B87;
  GL_ACTIVE_ATTRIBUTES = $8B89;
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = $8B8A;
  GL_SHADING_LANGUAGE_VERSION = $8B8C;
  GL_CURRENT_PROGRAM = $8B8D;
  GL_NEVER = $0200;
  GL_LESS = $0201;
  GL_EQUAL = $0202;
  GL_LEQUAL = $0203;
  GL_GREATER = $0204;
  GL_NOTEQUAL = $0205;
  GL_GEQUAL = $0206;
  GL_ALWAYS = $0207;
  GL_KEEP = $1E00;
  GL_REPLACE = $1E01;
  GL_INCR = $1E02;
  GL_DECR = $1E03;
  GL_INVERT = $150A;
  GL_INCR_WRAP = $8507;
  GL_DECR_WRAP = $8508;
  GL_VENDOR = $1F00;
  GL_RENDERER = $1F01;
  GL_VERSION = $1F02;
  GL_EXTENSIONS = $1F03;
  GL_NEAREST = $2600;
  GL_LINEAR = $2601;
  GL_NEAREST_MIPMAP_NEAREST = $2700;
  GL_LINEAR_MIPMAP_NEAREST = $2701;
  GL_NEAREST_MIPMAP_LINEAR = $2702;
  GL_LINEAR_MIPMAP_LINEAR = $2703;
  GL_TEXTURE_MAG_FILTER = $2800;
  GL_TEXTURE_MIN_FILTER = $2801;
  GL_TEXTURE_WRAP_S = $2802;
  GL_TEXTURE_WRAP_T = $2803;
  GL_TEXTURE = $1702;
  GL_TEXTURE_CUBE_MAP = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $851A;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = $851C;
  GL_TEXTURE0 = $84C0;
  GL_TEXTURE1 = $84C1;
  GL_TEXTURE2 = $84C2;
  GL_TEXTURE3 = $84C3;
  GL_TEXTURE4 = $84C4;
  GL_TEXTURE5 = $84C5;
  GL_TEXTURE6 = $84C6;
  GL_TEXTURE7 = $84C7;
  GL_TEXTURE8 = $84C8;
  GL_TEXTURE9 = $84C9;
  GL_TEXTURE10 = $84CA;
  GL_TEXTURE11 = $84CB;
  GL_TEXTURE12 = $84CC;
  GL_TEXTURE13 = $84CD;
  GL_TEXTURE14 = $84CE;
  GL_TEXTURE15 = $84CF;
  GL_TEXTURE16 = $84D0;
  GL_TEXTURE17 = $84D1;
  GL_TEXTURE18 = $84D2;
  GL_TEXTURE19 = $84D3;
  GL_TEXTURE20 = $84D4;
  GL_TEXTURE21 = $84D5;
  GL_TEXTURE22 = $84D6;
  GL_TEXTURE23 = $84D7;
  GL_TEXTURE24 = $84D8;
  GL_TEXTURE25 = $84D9;
  GL_TEXTURE26 = $84DA;
  GL_TEXTURE27 = $84DB;
  GL_TEXTURE28 = $84DC;
  GL_TEXTURE29 = $84DD;
  GL_TEXTURE30 = $84DE;
  GL_TEXTURE31 = $84DF;
  GL_ACTIVE_TEXTURE = $84E0;
  GL_REPEAT = $2901;
  GL_CLAMP_TO_EDGE = $812F;
  GL_MIRRORED_REPEAT = $8370;
  GL_FLOAT_VEC2 = $8B50;
  GL_FLOAT_VEC3 = $8B51;
  GL_FLOAT_VEC4 = $8B52;
  GL_INT_VEC2 = $8B53;
  GL_INT_VEC3 = $8B54;
  GL_INT_VEC4 = $8B55;
  GL_BOOL = $8B56;
  GL_BOOL_VEC2 = $8B57;
  GL_BOOL_VEC3 = $8B58;
  GL_BOOL_VEC4 = $8B59;
  GL_FLOAT_MAT2 = $8B5A;
  GL_FLOAT_MAT3 = $8B5B;
  GL_FLOAT_MAT4 = $8B5C;
  GL_SAMPLER_2D = $8B5E;
  GL_SAMPLER_CUBE = $8B60;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = $8622;
  GL_VERTEX_ATTRIB_ARRAY_SIZE = $8623;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = $8624;
  GL_VERTEX_ATTRIB_ARRAY_TYPE = $8625;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = $886A;
  GL_VERTEX_ATTRIB_ARRAY_POINTER = $8645;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
  GL_IMPLEMENTATION_COLOR_READ_TYPE = $8B9A;
  GL_IMPLEMENTATION_COLOR_READ_FORMAT = $8B9B;
  GL_COMPILE_STATUS = $8B81;
  GL_INFO_LOG_LENGTH = $8B84;
  GL_SHADER_SOURCE_LENGTH = $8B88;
  GL_SHADER_COMPILER = $8DFA;
  GL_SHADER_BINARY_FORMATS = $8DF8;
  GL_NUM_SHADER_BINARY_FORMATS = $8DF9;
  GL_LOW_FLOAT = $8DF0;
  GL_MEDIUM_FLOAT = $8DF1;
  GL_HIGH_FLOAT = $8DF2;
  GL_LOW_INT = $8DF3;
  GL_MEDIUM_INT = $8DF4;
  GL_HIGH_INT = $8DF5;
  GL_FRAMEBUFFER = $8D40;
  GL_RENDERBUFFER = $8D41;
  GL_RGBA4 = $8056;
  GL_RGB5_A1 = $8057;
  GL_RGB565 = $8D62;
  GL_DEPTH_COMPONENT16 = $81A5;
  GL_STENCIL_INDEX = $1901;
  GL_STENCIL_INDEX8 = $8D48;
  GL_RENDERBUFFER_WIDTH = $8D42;
  GL_RENDERBUFFER_HEIGHT = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT = $8D44;
  GL_RENDERBUFFER_RED_SIZE = $8D50;
  GL_RENDERBUFFER_GREEN_SIZE = $8D51;
  GL_RENDERBUFFER_BLUE_SIZE = $8D52;
  GL_RENDERBUFFER_ALPHA_SIZE = $8D53;
  GL_RENDERBUFFER_DEPTH_SIZE = $8D54;
  GL_RENDERBUFFER_STENCIL_SIZE = $8D55;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
  GL_COLOR_ATTACHMENT0 = $8CE0;
  GL_DEPTH_ATTACHMENT = $8D00;
  GL_STENCIL_ATTACHMENT = $8D20;
  GL_NONE = 0;
  GL_FRAMEBUFFER_COMPLETE = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = $8CD9;
  GL_FRAMEBUFFER_UNSUPPORTED = $8CDD;
  GL_FRAMEBUFFER_BINDING = $8CA6;
  GL_RENDERBUFFER_BINDING = $8CA7;
  GL_MAX_RENDERBUFFER_SIZE = $84E8;
  GL_INVALID_FRAMEBUFFER_OPERATION = $0506;

const
  __gl2ext_h_ = 1;

const
  GL_KHR_blend_equation_advanced = 1;
  GL_MULTIPLY_KHR = $9294;
  GL_SCREEN_KHR = $9295;
  GL_OVERLAY_KHR = $9296;
  GL_DARKEN_KHR = $9297;
  GL_LIGHTEN_KHR = $9298;
  GL_COLORDODGE_KHR = $9299;
  GL_COLORBURN_KHR = $929A;
  GL_HARDLIGHT_KHR = $929B;
  GL_SOFTLIGHT_KHR = $929C;
  GL_DIFFERENCE_KHR = $929E;
  GL_EXCLUSION_KHR = $92A0;
  GL_HSL_HUE_KHR = $92AD;
  GL_HSL_SATURATION_KHR = $92AE;
  GL_HSL_COLOR_KHR = $92AF;
  GL_HSL_LUMINOSITY_KHR = $92B0;

const
  GL_KHR_blend_equation_advanced_coherent = 1;
  GL_BLEND_ADVANCED_COHERENT_KHR = $9285;

const
  GL_KHR_context_flush_control = 1;
  GL_CONTEXT_RELEASE_BEHAVIOR_KHR = $82FB;
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = $82FC;

const
  GL_KHR_debug = 1;
  GL_SAMPLER = $82E6;
  GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = $8242;
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = $8243;
  GL_DEBUG_CALLBACK_FUNCTION_KHR = $8244;
  GL_DEBUG_CALLBACK_USER_PARAM_KHR = $8245;
  GL_DEBUG_SOURCE_API_KHR = $8246;
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = $8247;
  GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = $8248;
  GL_DEBUG_SOURCE_THIRD_PARTY_KHR = $8249;
  GL_DEBUG_SOURCE_APPLICATION_KHR = $824A;
  GL_DEBUG_SOURCE_OTHER_KHR = $824B;
  GL_DEBUG_TYPE_ERROR_KHR = $824C;
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = $824D;
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = $824E;
  GL_DEBUG_TYPE_PORTABILITY_KHR = $824F;
  GL_DEBUG_TYPE_PERFORMANCE_KHR = $8250;
  GL_DEBUG_TYPE_OTHER_KHR = $8251;
  GL_DEBUG_TYPE_MARKER_KHR = $8268;
  GL_DEBUG_TYPE_PUSH_GROUP_KHR = $8269;
  GL_DEBUG_TYPE_POP_GROUP_KHR = $826A;
  GL_DEBUG_SEVERITY_NOTIFICATION_KHR = $826B;
  GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = $826C;
  GL_DEBUG_GROUP_STACK_DEPTH_KHR = $826D;
  GL_BUFFER_KHR = $82E0;
  GL_SHADER_KHR = $82E1;
  GL_PROGRAM_KHR = $82E2;
  GL_VERTEX_ARRAY_KHR = $8074;
  GL_QUERY_KHR = $82E3;
  GL_PROGRAM_PIPELINE_KHR = $82E4;
  GL_SAMPLER_KHR = $82E6;
  GL_MAX_LABEL_LENGTH_KHR = $82E8;
  GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = $9143;
  GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = $9144;
  GL_DEBUG_LOGGED_MESSAGES_KHR = $9145;
  GL_DEBUG_SEVERITY_HIGH_KHR = $9146;
  GL_DEBUG_SEVERITY_MEDIUM_KHR = $9147;
  GL_DEBUG_SEVERITY_LOW_KHR = $9148;
  GL_DEBUG_OUTPUT_KHR = $92E0;
  GL_CONTEXT_FLAG_DEBUG_BIT_KHR = $00000002;
  GL_STACK_OVERFLOW_KHR = $0503;
  GL_STACK_UNDERFLOW_KHR = $0504;

const
  GL_KHR_texture_compression_astc_hdr = 1;
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR = $93B0;
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR = $93B1;
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR = $93B2;
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR = $93B3;
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR = $93B4;
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR = $93B5;
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR = $93B6;
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR = $93B7;
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR = $93B8;
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR = $93B9;
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR = $93BA;
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR = $93BB;
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR = $93BC;
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR = $93BD;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = $93D0;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = $93D1;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = $93D2;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = $93D3;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = $93D4;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = $93D5;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = $93D6;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = $93D7;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = $93D8;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = $93D9;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = $93DA;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = $93DB;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = $93DC;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = $93DD;

const
  GL_KHR_texture_compression_astc_ldr = 1;

const
  GL_KHR_texture_compression_astc_sliced_3d = 1;

const
  GL_OES_EGL_image = 1;

const
  GL_OES_EGL_image_external = 1;
  GL_TEXTURE_EXTERNAL_OES = $8D65;
  GL_TEXTURE_BINDING_EXTERNAL_OES = $8D67;
  GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = $8D68;
  GL_SAMPLER_EXTERNAL_OES = $8D66;

const
  GL_OES_EGL_image_external_essl3 = 1;

const
  GL_OES_compressed_ETC1_RGB8_sub_texture = 1;

const
  GL_OES_compressed_ETC1_RGB8_texture = 1;
  GL_ETC1_RGB8_OES = $8D64;

const
  GL_OES_compressed_paletted_texture = 1;
  GL_PALETTE4_RGB8_OES = $8B90;
  GL_PALETTE4_RGBA8_OES = $8B91;
  GL_PALETTE4_R5_G6_B5_OES = $8B92;
  GL_PALETTE4_RGBA4_OES = $8B93;
  GL_PALETTE4_RGB5_A1_OES = $8B94;
  GL_PALETTE8_RGB8_OES = $8B95;
  GL_PALETTE8_RGBA8_OES = $8B96;
  GL_PALETTE8_R5_G6_B5_OES = $8B97;
  GL_PALETTE8_RGBA4_OES = $8B98;
  GL_PALETTE8_RGB5_A1_OES = $8B99;

const
  GL_OES_copy_image = 1;

const
  GL_OES_depth24 = 1;
  GL_DEPTH_COMPONENT24_OES = $81A6;

const
  GL_OES_depth32 = 1;
  GL_DEPTH_COMPONENT32_OES = $81A7;

const
  GL_OES_depth_texture = 1;

const
  GL_OES_draw_buffers_indexed = 1;
  GL_MIN = $8007;
  GL_MAX = $8008;

const
  GL_OES_draw_elements_base_vertex = 1;

const
  GL_OES_element_index_uint = 1;

const
  GL_OES_fbo_render_mipmap = 1;

const
  GL_OES_fragment_precision_high = 1;

const
  GL_OES_geometry_point_size = 1;

const
  GL_OES_geometry_shader = 1;
  GL_GEOMETRY_SHADER_OES = $8DD9;
  GL_GEOMETRY_SHADER_BIT_OES = $00000004;
  GL_GEOMETRY_LINKED_VERTICES_OUT_OES = $8916;
  GL_GEOMETRY_LINKED_INPUT_TYPE_OES = $8917;
  GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = $8918;
  GL_GEOMETRY_SHADER_INVOCATIONS_OES = $887F;
  GL_LAYER_PROVOKING_VERTEX_OES = $825E;
  GL_LINES_ADJACENCY_OES = $000A;
  GL_LINE_STRIP_ADJACENCY_OES = $000B;
  GL_TRIANGLES_ADJACENCY_OES = $000C;
  GL_TRIANGLE_STRIP_ADJACENCY_OES = $000D;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = $8DDF;
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = $8A2C;
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = $8A32;
  GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = $9123;
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = $9124;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = $8DE1;
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = $8E5A;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = $8C29;
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = $92CF;
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = $92D5;
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = $90CD;
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = $90D7;
  GL_FIRST_VERTEX_CONVENTION_OES = $8E4D;
  GL_LAST_VERTEX_CONVENTION_OES = $8E4E;
  GL_UNDEFINED_VERTEX_OES = $8260;
  GL_PRIMITIVES_GENERATED_OES = $8C87;
  GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = $9312;
  GL_MAX_FRAMEBUFFER_LAYERS_OES = $9317;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = $8DA8;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = $8DA7;
  GL_REFERENCED_BY_GEOMETRY_SHADER_OES = $9309;

const
  GL_OES_get_program_binary = 1;
  GL_PROGRAM_BINARY_LENGTH_OES = $8741;
  GL_NUM_PROGRAM_BINARY_FORMATS_OES = $87FE;
  GL_PROGRAM_BINARY_FORMATS_OES = $87FF;

const
  GL_OES_gpu_shader5 = 1;

const
  GL_OES_mapbuffer = 1;
  GL_WRITE_ONLY_OES = $88B9;
  GL_BUFFER_ACCESS_OES = $88BB;
  GL_BUFFER_MAPPED_OES = $88BC;
  GL_BUFFER_MAP_POINTER_OES = $88BD;

const
  GL_OES_packed_depth_stencil = 1;
  GL_DEPTH_STENCIL_OES = $84F9;
  GL_UNSIGNED_INT_24_8_OES = $84FA;
  GL_DEPTH24_STENCIL8_OES = $88F0;

const
  GL_OES_primitive_bounding_box = 1;
  GL_PRIMITIVE_BOUNDING_BOX_OES = $92BE;

const
  GL_OES_required_internalformat = 1;
  GL_ALPHA8_OES = $803C;
  GL_DEPTH_COMPONENT16_OES = $81A5;
  GL_LUMINANCE4_ALPHA4_OES = $8043;
  GL_LUMINANCE8_ALPHA8_OES = $8045;
  GL_LUMINANCE8_OES = $8040;
  GL_RGBA4_OES = $8056;
  GL_RGB5_A1_OES = $8057;
  GL_RGB565_OES = $8D62;
  GL_RGB8_OES = $8051;
  GL_RGBA8_OES = $8058;
  GL_RGB10_EXT = $8052;
  GL_RGB10_A2_EXT = $8059;

const
  GL_OES_rgb8_rgba8 = 1;

const
  GL_OES_sample_shading = 1;
  GL_SAMPLE_SHADING_OES = $8C36;
  GL_MIN_SAMPLE_SHADING_VALUE_OES = $8C37;

const
  GL_OES_sample_variables = 1;

const
  GL_OES_shader_image_atomic = 1;

const
  GL_OES_shader_io_blocks = 1;

const
  GL_OES_shader_multisample_interpolation = 1;
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = $8E5B;
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = $8E5C;
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = $8E5D;

const
  GL_OES_standard_derivatives = 1;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = $8B8B;

const
  GL_OES_stencil1 = 1;
  GL_STENCIL_INDEX1_OES = $8D46;

const
  GL_OES_stencil4 = 1;
  GL_STENCIL_INDEX4_OES = $8D47;

const
  GL_OES_surfaceless_context = 1;
  GL_FRAMEBUFFER_UNDEFINED_OES = $8219;

const
  GL_OES_tessellation_point_size = 1;

const
  GL_OES_tessellation_shader = 1;
  GL_PATCHES_OES = $000E;
  GL_PATCH_VERTICES_OES = $8E72;
  GL_TESS_CONTROL_OUTPUT_VERTICES_OES = $8E75;
  GL_TESS_GEN_MODE_OES = $8E76;
  GL_TESS_GEN_SPACING_OES = $8E77;
  GL_TESS_GEN_VERTEX_ORDER_OES = $8E78;
  GL_TESS_GEN_POINT_MODE_OES = $8E79;
  GL_ISOLINES_OES = $8E7A;
  GL_QUADS_OES = $0007;
  GL_FRACTIONAL_ODD_OES = $8E7B;
  GL_FRACTIONAL_EVEN_OES = $8E7C;
  GL_MAX_PATCH_VERTICES_OES = $8E7D;
  GL_MAX_TESS_GEN_LEVEL_OES = $8E7E;
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = $8E7F;
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = $8E80;
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = $8E81;
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = $8E82;
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = $8E83;
  GL_MAX_TESS_PATCH_COMPONENTS_OES = $8E84;
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = $8E85;
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = $8E86;
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = $8E89;
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = $8E8A;
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = $886C;
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = $886D;
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = $8E1E;
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = $8E1F;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = $92CD;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = $92CE;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = $92D3;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = $92D4;
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = $90CB;
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = $90CC;
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = $90D8;
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = $90D9;
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = $8221;
  GL_IS_PER_PATCH_OES = $92E7;
  GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = $9307;
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = $9308;
  GL_TESS_CONTROL_SHADER_OES = $8E88;
  GL_TESS_EVALUATION_SHADER_OES = $8E87;
  GL_TESS_CONTROL_SHADER_BIT_OES = $00000008;
  GL_TESS_EVALUATION_SHADER_BIT_OES = $00000010;

const
  GL_OES_texture_3D = 1;
  GL_TEXTURE_WRAP_R_OES = $8072;
  GL_TEXTURE_3D_OES = $806F;
  GL_TEXTURE_BINDING_3D_OES = $806A;
  GL_MAX_3D_TEXTURE_SIZE_OES = $8073;
  GL_SAMPLER_3D_OES = $8B5F;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = $8CD4;

const
  GL_OES_texture_border_clamp = 1;
  GL_TEXTURE_BORDER_COLOR_OES = $1004;
  GL_CLAMP_TO_BORDER_OES = $812D;

const
  GL_OES_texture_buffer = 1;
  GL_TEXTURE_BUFFER_OES = $8C2A;
  GL_TEXTURE_BUFFER_BINDING_OES = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE_OES = $8C2B;
  GL_TEXTURE_BINDING_BUFFER_OES = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = $8C2D;
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = $919F;
  GL_SAMPLER_BUFFER_OES = $8DC2;
  GL_INT_SAMPLER_BUFFER_OES = $8DD0;
  GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = $8DD8;
  GL_IMAGE_BUFFER_OES = $9051;
  GL_INT_IMAGE_BUFFER_OES = $905C;
  GL_UNSIGNED_INT_IMAGE_BUFFER_OES = $9067;
  GL_TEXTURE_BUFFER_OFFSET_OES = $919D;
  GL_TEXTURE_BUFFER_SIZE_OES = $919E;

const
  GL_OES_texture_compression_astc = 1;
  GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = $93C0;
  GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = $93C1;
  GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = $93C2;
  GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = $93C3;
  GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = $93C4;
  GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = $93C5;
  GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = $93C6;
  GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = $93C7;
  GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = $93C8;
  GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = $93C9;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = $93E0;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = $93E1;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = $93E2;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = $93E3;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = $93E4;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = $93E5;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = $93E6;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = $93E7;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = $93E8;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = $93E9;

const
  GL_OES_texture_cube_map_array = 1;
  GL_TEXTURE_CUBE_MAP_ARRAY_OES = $9009;
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = $900A;
  GL_SAMPLER_CUBE_MAP_ARRAY_OES = $900C;
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = $900D;
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = $900E;
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = $900F;
  GL_IMAGE_CUBE_MAP_ARRAY_OES = $9054;
  GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = $905F;
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = $906A;

const
  GL_OES_texture_float = 1;

const
  GL_OES_texture_float_linear = 1;

const
  GL_OES_texture_half_float = 1;
  GL_HALF_FLOAT_OES = $8D61;

const
  GL_OES_texture_half_float_linear = 1;

const
  GL_OES_texture_npot = 1;

const
  GL_OES_texture_stencil8 = 1;
  GL_STENCIL_INDEX_OES = $1901;
  GL_STENCIL_INDEX8_OES = $8D48;

const
  GL_OES_texture_storage_multisample_2d_array = 1;
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = $9102;
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = $9105;
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = $910B;
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = $910C;
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = $910D;

const
  GL_OES_texture_view = 1;
  GL_TEXTURE_VIEW_MIN_LEVEL_OES = $82DB;
  GL_TEXTURE_VIEW_NUM_LEVELS_OES = $82DC;
  GL_TEXTURE_VIEW_MIN_LAYER_OES = $82DD;
  GL_TEXTURE_VIEW_NUM_LAYERS_OES = $82DE;
  GL_TEXTURE_IMMUTABLE_LEVELS = $82DF;

const
  GL_OES_vertex_array_object = 1;
  GL_VERTEX_ARRAY_BINDING_OES = $85B5;

const
  GL_OES_vertex_half_float = 1;

const
  GL_OES_vertex_type_10_10_10_2 = 1;
  GL_UNSIGNED_INT_10_10_10_2_OES = $8DF6;
  GL_INT_10_10_10_2_OES = $8DF7;

const
  GL_AMD_compressed_3DC_texture = 1;
  GL_3DC_X_AMD = $87F9;
  GL_3DC_XY_AMD = $87FA;

const
  GL_AMD_compressed_ATC_texture = 1;
  GL_ATC_RGB_AMD = $8C92;
  GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = $8C93;
  GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = $87EE;

const
  GL_AMD_performance_monitor = 1;
  GL_COUNTER_TYPE_AMD = $8BC0;
  GL_COUNTER_RANGE_AMD = $8BC1;
  GL_UNSIGNED_INT64_AMD = $8BC2;
  GL_PERCENTAGE_AMD = $8BC3;
  GL_PERFMON_RESULT_AVAILABLE_AMD = $8BC4;
  GL_PERFMON_RESULT_SIZE_AMD = $8BC5;
  GL_PERFMON_RESULT_AMD = $8BC6;

const
  GL_AMD_program_binary_Z400 = 1;
  GL_Z400_BINARY_AMD = $8740;

const
  GL_ANDROID_extension_pack_es31a = 1;

const
  GL_ANGLE_depth_texture = 1;

const
  GL_ANGLE_framebuffer_blit = 1;
  GL_READ_FRAMEBUFFER_ANGLE = $8CA8;
  GL_DRAW_FRAMEBUFFER_ANGLE = $8CA9;
  GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = $8CA6;
  GL_READ_FRAMEBUFFER_BINDING_ANGLE = $8CAA;

const
  GL_ANGLE_framebuffer_multisample = 1;
  GL_RENDERBUFFER_SAMPLES_ANGLE = $8CAB;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = $8D56;
  GL_MAX_SAMPLES_ANGLE = $8D57;

const
  GL_ANGLE_instanced_arrays = 1;
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = $88FE;

const
  GL_ANGLE_pack_reverse_row_order = 1;
  GL_PACK_REVERSE_ROW_ORDER_ANGLE = $93A4;

const
  GL_ANGLE_program_binary = 1;
  GL_PROGRAM_BINARY_ANGLE = $93A6;

const
  GL_ANGLE_texture_compression_dxt3 = 1;
  GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = $83F2;

const
  GL_ANGLE_texture_compression_dxt5 = 1;
  GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = $83F3;

const
  GL_ANGLE_texture_usage = 1;
  GL_TEXTURE_USAGE_ANGLE = $93A2;
  GL_FRAMEBUFFER_ATTACHMENT_ANGLE = $93A3;

const
  GL_ANGLE_translated_shader_source = 1;
  GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = $93A0;

const
  GL_APPLE_clip_distance = 1;
  GL_MAX_CLIP_DISTANCES_APPLE = $0D32;
  GL_CLIP_DISTANCE0_APPLE = $3000;
  GL_CLIP_DISTANCE1_APPLE = $3001;
  GL_CLIP_DISTANCE2_APPLE = $3002;
  GL_CLIP_DISTANCE3_APPLE = $3003;
  GL_CLIP_DISTANCE4_APPLE = $3004;
  GL_CLIP_DISTANCE5_APPLE = $3005;
  GL_CLIP_DISTANCE6_APPLE = $3006;
  GL_CLIP_DISTANCE7_APPLE = $3007;

const
  GL_APPLE_color_buffer_packed_float = 1;

const
  GL_APPLE_copy_texture_levels = 1;

const
  GL_APPLE_framebuffer_multisample = 1;
  GL_RENDERBUFFER_SAMPLES_APPLE = $8CAB;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = $8D56;
  GL_MAX_SAMPLES_APPLE = $8D57;
  GL_READ_FRAMEBUFFER_APPLE = $8CA8;
  GL_DRAW_FRAMEBUFFER_APPLE = $8CA9;
  GL_DRAW_FRAMEBUFFER_BINDING_APPLE = $8CA6;
  GL_READ_FRAMEBUFFER_BINDING_APPLE = $8CAA;

const
  GL_APPLE_rgb_422 = 1;
  GL_RGB_422_APPLE = $8A1F;
  GL_UNSIGNED_SHORT_8_8_APPLE = $85BA;
  GL_UNSIGNED_SHORT_8_8_REV_APPLE = $85BB;
  GL_RGB_RAW_422_APPLE = $8A51;

const
  GL_APPLE_sync = 1;
  GL_SYNC_OBJECT_APPLE = $8A53;
  GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = $9111;
  GL_OBJECT_TYPE_APPLE = $9112;
  GL_SYNC_CONDITION_APPLE = $9113;
  GL_SYNC_STATUS_APPLE = $9114;
  GL_SYNC_FLAGS_APPLE = $9115;
  GL_SYNC_FENCE_APPLE = $9116;
  GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = $9117;
  GL_UNSIGNALED_APPLE = $9118;
  GL_SIGNALED_APPLE = $9119;
  GL_ALREADY_SIGNALED_APPLE = $911A;
  GL_TIMEOUT_EXPIRED_APPLE = $911B;
  GL_CONDITION_SATISFIED_APPLE = $911C;
  GL_WAIT_FAILED_APPLE = $911D;
  GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = $00000001;
  GL_TIMEOUT_IGNORED_APPLE = $FFFFFFFFFFFFFFFF;

const
  GL_APPLE_texture_format_BGRA8888 = 1;
  GL_BGRA_EXT = $80E1;
  GL_BGRA8_EXT = $93A1;

const
  GL_APPLE_texture_max_level = 1;
  GL_TEXTURE_MAX_LEVEL_APPLE = $813D;

const
  GL_APPLE_texture_packed_float = 1;
  GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = $8C3B;
  GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = $8C3E;
  GL_R11F_G11F_B10F_APPLE = $8C3A;
  GL_RGB9_E5_APPLE = $8C3D;

const
  GL_ARM_mali_program_binary = 1;
  GL_MALI_PROGRAM_BINARY_ARM = $8F61;

const
  GL_ARM_mali_shader_binary = 1;
  GL_MALI_SHADER_BINARY_ARM = $8F60;

const
  GL_ARM_rgba8 = 1;

const
  GL_ARM_shader_framebuffer_fetch = 1;
  GL_FETCH_PER_SAMPLE_ARM = $8F65;
  GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = $8F66;

const
  GL_ARM_shader_framebuffer_fetch_depth_stencil = 1;

const
  GL_DMP_program_binary = 1;
  GL_SMAPHS30_PROGRAM_BINARY_DMP = $9251;
  GL_SMAPHS_PROGRAM_BINARY_DMP = $9252;
  GL_DMP_PROGRAM_BINARY_DMP = $9253;

const
  GL_DMP_shader_binary = 1;
  GL_SHADER_BINARY_DMP = $9250;

const
  GL_EXT_YUV_target = 1;
  GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = $8BE7;

const
  GL_EXT_base_instance = 1;

const
  GL_EXT_blend_func_extended = 1;
  GL_SRC1_COLOR_EXT = $88F9;
  GL_SRC1_ALPHA_EXT = $8589;
  GL_ONE_MINUS_SRC1_COLOR_EXT = $88FA;
  GL_ONE_MINUS_SRC1_ALPHA_EXT = $88FB;
  GL_SRC_ALPHA_SATURATE_EXT = $0308;
  GL_LOCATION_INDEX_EXT = $930F;
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = $88FC;

const
  GL_EXT_blend_minmax = 1;
  GL_MIN_EXT = $8007;
  GL_MAX_EXT = $8008;

const
  GL_EXT_buffer_storage = 1;
  GL_MAP_READ_BIT = $0001;
  GL_MAP_WRITE_BIT = $0002;
  GL_MAP_PERSISTENT_BIT_EXT = $0040;
  GL_MAP_COHERENT_BIT_EXT = $0080;
  GL_DYNAMIC_STORAGE_BIT_EXT = $0100;
  GL_CLIENT_STORAGE_BIT_EXT = $0200;
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = $00004000;
  GL_BUFFER_IMMUTABLE_STORAGE_EXT = $821F;
  GL_BUFFER_STORAGE_FLAGS_EXT = $8220;

const
  GL_EXT_color_buffer_float = 1;

const
  GL_EXT_color_buffer_half_float = 1;
  GL_RGBA16F_EXT = $881A;
  GL_RGB16F_EXT = $881B;
  GL_RG16F_EXT = $822F;
  GL_R16F_EXT = $822D;
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = $8211;
  GL_UNSIGNED_NORMALIZED_EXT = $8C17;

const
  GL_EXT_copy_image = 1;

const
  GL_EXT_debug_label = 1;
  GL_PROGRAM_PIPELINE_OBJECT_EXT = $8A4F;
  GL_PROGRAM_OBJECT_EXT = $8B40;
  GL_SHADER_OBJECT_EXT = $8B48;
  GL_BUFFER_OBJECT_EXT = $9151;
  GL_QUERY_OBJECT_EXT = $9153;
  GL_VERTEX_ARRAY_OBJECT_EXT = $9154;
  GL_TRANSFORM_FEEDBACK = $8E22;

const
  GL_EXT_debug_marker = 1;

const
  GL_EXT_discard_framebuffer = 1;
  GL_COLOR_EXT = $1800;
  GL_DEPTH_EXT = $1801;
  GL_STENCIL_EXT = $1802;

const
  GL_EXT_disjoint_timer_query = 1;
  GL_QUERY_COUNTER_BITS_EXT = $8864;
  GL_CURRENT_QUERY_EXT = $8865;
  GL_QUERY_RESULT_EXT = $8866;
  GL_QUERY_RESULT_AVAILABLE_EXT = $8867;
  GL_TIME_ELAPSED_EXT = $88BF;
  GL_TIMESTAMP_EXT = $8E28;
  GL_GPU_DISJOINT_EXT = $8FBB;

const
  GL_EXT_draw_buffers = 1;
  GL_MAX_COLOR_ATTACHMENTS_EXT = $8CDF;
  GL_MAX_DRAW_BUFFERS_EXT = $8824;
  GL_DRAW_BUFFER0_EXT = $8825;
  GL_DRAW_BUFFER1_EXT = $8826;
  GL_DRAW_BUFFER2_EXT = $8827;
  GL_DRAW_BUFFER3_EXT = $8828;
  GL_DRAW_BUFFER4_EXT = $8829;
  GL_DRAW_BUFFER5_EXT = $882A;
  GL_DRAW_BUFFER6_EXT = $882B;
  GL_DRAW_BUFFER7_EXT = $882C;
  GL_DRAW_BUFFER8_EXT = $882D;
  GL_DRAW_BUFFER9_EXT = $882E;
  GL_DRAW_BUFFER10_EXT = $882F;
  GL_DRAW_BUFFER11_EXT = $8830;
  GL_DRAW_BUFFER12_EXT = $8831;
  GL_DRAW_BUFFER13_EXT = $8832;
  GL_DRAW_BUFFER14_EXT = $8833;
  GL_DRAW_BUFFER15_EXT = $8834;
  GL_COLOR_ATTACHMENT0_EXT = $8CE0;
  GL_COLOR_ATTACHMENT1_EXT = $8CE1;
  GL_COLOR_ATTACHMENT2_EXT = $8CE2;
  GL_COLOR_ATTACHMENT3_EXT = $8CE3;
  GL_COLOR_ATTACHMENT4_EXT = $8CE4;
  GL_COLOR_ATTACHMENT5_EXT = $8CE5;
  GL_COLOR_ATTACHMENT6_EXT = $8CE6;
  GL_COLOR_ATTACHMENT7_EXT = $8CE7;
  GL_COLOR_ATTACHMENT8_EXT = $8CE8;
  GL_COLOR_ATTACHMENT9_EXT = $8CE9;
  GL_COLOR_ATTACHMENT10_EXT = $8CEA;
  GL_COLOR_ATTACHMENT11_EXT = $8CEB;
  GL_COLOR_ATTACHMENT12_EXT = $8CEC;
  GL_COLOR_ATTACHMENT13_EXT = $8CED;
  GL_COLOR_ATTACHMENT14_EXT = $8CEE;
  GL_COLOR_ATTACHMENT15_EXT = $8CEF;

const
  GL_EXT_draw_buffers_indexed = 1;

const
  GL_EXT_draw_elements_base_vertex = 1;

const
  GL_EXT_draw_instanced = 1;

const
  GL_EXT_float_blend = 1;

const
  GL_EXT_geometry_point_size = 1;

const
  GL_EXT_geometry_shader = 1;
  GL_GEOMETRY_SHADER_EXT = $8DD9;
  GL_GEOMETRY_SHADER_BIT_EXT = $00000004;
  GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = $8916;
  GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = $8917;
  GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = $8918;
  GL_GEOMETRY_SHADER_INVOCATIONS_EXT = $887F;
  GL_LAYER_PROVOKING_VERTEX_EXT = $825E;
  GL_LINES_ADJACENCY_EXT = $000A;
  GL_LINE_STRIP_ADJACENCY_EXT = $000B;
  GL_TRIANGLES_ADJACENCY_EXT = $000C;
  GL_TRIANGLE_STRIP_ADJACENCY_EXT = $000D;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = $8DDF;
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = $8A2C;
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = $8A32;
  GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = $9123;
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = $9124;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = $8DE1;
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = $8E5A;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = $8C29;
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = $92CF;
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = $92D5;
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = $90CD;
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = $90D7;
  GL_FIRST_VERTEX_CONVENTION_EXT = $8E4D;
  GL_LAST_VERTEX_CONVENTION_EXT = $8E4E;
  GL_UNDEFINED_VERTEX_EXT = $8260;
  GL_PRIMITIVES_GENERATED_EXT = $8C87;
  GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = $9312;
  GL_MAX_FRAMEBUFFER_LAYERS_EXT = $9317;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = $8DA8;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = $8DA7;
  GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = $9309;

const
  GL_EXT_gpu_shader5 = 1;

const
  GL_EXT_instanced_arrays = 1;
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = $88FE;

const
  GL_EXT_map_buffer_range = 1;
  GL_MAP_READ_BIT_EXT = $0001;
  GL_MAP_WRITE_BIT_EXT = $0002;
  GL_MAP_INVALIDATE_RANGE_BIT_EXT = $0004;
  GL_MAP_INVALIDATE_BUFFER_BIT_EXT = $0008;
  GL_MAP_FLUSH_EXPLICIT_BIT_EXT = $0010;
  GL_MAP_UNSYNCHRONIZED_BIT_EXT = $0020;

const
  GL_EXT_multi_draw_arrays = 1;

const
  GL_EXT_multi_draw_indirect = 1;

const
  GL_EXT_multisampled_compatibility = 1;
  GL_MULTISAMPLE_EXT = $809D;
  GL_SAMPLE_ALPHA_TO_ONE_EXT = $809F;

const
  GL_EXT_multisampled_render_to_texture = 1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = $8D6C;
  GL_RENDERBUFFER_SAMPLES_EXT = $8CAB;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = $8D56;
  GL_MAX_SAMPLES_EXT = $8D57;

const
  GL_EXT_multiview_draw_buffers = 1;
  GL_COLOR_ATTACHMENT_EXT = $90F0;
  GL_MULTIVIEW_EXT = $90F1;
  GL_DRAW_BUFFER_EXT = $0C01;
  GL_READ_BUFFER_EXT = $0C02;
  GL_MAX_MULTIVIEW_BUFFERS_EXT = $90F2;

const
  GL_EXT_occlusion_query_boolean = 1;
  GL_ANY_SAMPLES_PASSED_EXT = $8C2F;
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = $8D6A;

const
  GL_EXT_polygon_offset_clamp = 1;
  GL_POLYGON_OFFSET_CLAMP_EXT = $8E1B;

const
  GL_EXT_post_depth_coverage = 1;

const
  GL_EXT_primitive_bounding_box = 1;
  GL_PRIMITIVE_BOUNDING_BOX_EXT = $92BE;

const
  GL_EXT_pvrtc_sRGB = 1;
  GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = $8A54;
  GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = $8A55;
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = $8A56;
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = $8A57;
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = $93F0;
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = $93F1;

const
  GL_EXT_raster_multisample = 1;
  GL_RASTER_MULTISAMPLE_EXT = $9327;
  GL_RASTER_SAMPLES_EXT = $9328;
  GL_MAX_RASTER_SAMPLES_EXT = $9329;
  GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = $932A;
  GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = $932B;
  GL_EFFECTIVE_RASTER_SAMPLES_EXT = $932C;

const
  GL_EXT_read_format_bgra = 1;
  GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = $8365;
  GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = $8366;

const
  GL_EXT_render_snorm = 1;
  GL_R8_SNORM = $8F94;
  GL_RG8_SNORM = $8F95;
  GL_RGBA8_SNORM = $8F97;
  GL_R16_SNORM_EXT = $8F98;
  GL_RG16_SNORM_EXT = $8F99;
  GL_RGBA16_SNORM_EXT = $8F9B;

const
  GL_EXT_robustness = 1;
  GL_GUILTY_CONTEXT_RESET_EXT = $8253;
  GL_INNOCENT_CONTEXT_RESET_EXT = $8254;
  GL_UNKNOWN_CONTEXT_RESET_EXT = $8255;
  GL_CONTEXT_ROBUST_ACCESS_EXT = $90F3;
  GL_RESET_NOTIFICATION_STRATEGY_EXT = $8256;
  GL_LOSE_CONTEXT_ON_RESET_EXT = $8252;
  GL_NO_RESET_NOTIFICATION_EXT = $8261;

const
  GL_EXT_sRGB = 1;
  GL_SRGB_EXT = $8C40;
  GL_SRGB_ALPHA_EXT = $8C42;
  GL_SRGB8_ALPHA8_EXT = $8C43;
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = $8210;

const
  GL_EXT_sRGB_write_control = 1;
  GL_FRAMEBUFFER_SRGB_EXT = $8DB9;

const
  GL_EXT_separate_shader_objects = 1;
  GL_ACTIVE_PROGRAM_EXT = $8259;
  GL_VERTEX_SHADER_BIT_EXT = $00000001;
  GL_FRAGMENT_SHADER_BIT_EXT = $00000002;
  GL_ALL_SHADER_BITS_EXT = $FFFFFFFF;
  GL_PROGRAM_SEPARABLE_EXT = $8258;
  GL_PROGRAM_PIPELINE_BINDING_EXT = $825A;

const
  GL_EXT_shader_framebuffer_fetch = 1;
  GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = $8A52;

const
  GL_EXT_shader_group_vote = 1;

const
  GL_EXT_shader_implicit_conversions = 1;

const
  GL_EXT_shader_integer_mix = 1;

const
  GL_EXT_shader_io_blocks = 1;

const
  GL_EXT_shader_pixel_local_storage = 1;
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = $8F63;
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = $8F67;
  GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = $8F64;

const
  GL_EXT_shader_pixel_local_storage2 = 1;
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = $9650;
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = $9651;
  GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = $9652;

const
  GL_EXT_shader_texture_lod = 1;

const
  GL_EXT_shadow_samplers = 1;
  GL_TEXTURE_COMPARE_MODE_EXT = $884C;
  GL_TEXTURE_COMPARE_FUNC_EXT = $884D;
  GL_COMPARE_REF_TO_TEXTURE_EXT = $884E;
  GL_SAMPLER_2D_SHADOW_EXT = $8B62;

const
  GL_EXT_sparse_texture = 1;
  GL_TEXTURE_SPARSE_EXT = $91A6;
  GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = $91A7;
  GL_NUM_SPARSE_LEVELS_EXT = $91AA;
  GL_NUM_VIRTUAL_PAGE_SIZES_EXT = $91A8;
  GL_VIRTUAL_PAGE_SIZE_X_EXT = $9195;
  GL_VIRTUAL_PAGE_SIZE_Y_EXT = $9196;
  GL_VIRTUAL_PAGE_SIZE_Z_EXT = $9197;
  GL_TEXTURE_2D_ARRAY = $8C1A;
  GL_TEXTURE_3D = $806F;
  GL_MAX_SPARSE_TEXTURE_SIZE_EXT = $9198;
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = $9199;
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = $919A;
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = $91A9;

const
  GL_EXT_tessellation_point_size = 1;

const
  GL_EXT_tessellation_shader = 1;
  GL_PATCHES_EXT = $000E;
  GL_PATCH_VERTICES_EXT = $8E72;
  GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = $8E75;
  GL_TESS_GEN_MODE_EXT = $8E76;
  GL_TESS_GEN_SPACING_EXT = $8E77;
  GL_TESS_GEN_VERTEX_ORDER_EXT = $8E78;
  GL_TESS_GEN_POINT_MODE_EXT = $8E79;
  GL_ISOLINES_EXT = $8E7A;
  GL_QUADS_EXT = $0007;
  GL_FRACTIONAL_ODD_EXT = $8E7B;
  GL_FRACTIONAL_EVEN_EXT = $8E7C;
  GL_MAX_PATCH_VERTICES_EXT = $8E7D;
  GL_MAX_TESS_GEN_LEVEL_EXT = $8E7E;
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = $8E7F;
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = $8E80;
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = $8E81;
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = $8E82;
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = $8E83;
  GL_MAX_TESS_PATCH_COMPONENTS_EXT = $8E84;
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = $8E85;
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = $8E86;
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = $8E89;
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = $8E8A;
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = $886C;
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = $886D;
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = $8E1E;
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = $8E1F;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = $92CD;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = $92CE;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = $92D3;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = $92D4;
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = $90CB;
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = $90CC;
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = $90D8;
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = $90D9;
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = $8221;
  GL_IS_PER_PATCH_EXT = $92E7;
  GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = $9307;
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = $9308;
  GL_TESS_CONTROL_SHADER_EXT = $8E88;
  GL_TESS_EVALUATION_SHADER_EXT = $8E87;
  GL_TESS_CONTROL_SHADER_BIT_EXT = $00000008;
  GL_TESS_EVALUATION_SHADER_BIT_EXT = $00000010;

const
  GL_EXT_texture_border_clamp = 1;
  GL_TEXTURE_BORDER_COLOR_EXT = $1004;
  GL_CLAMP_TO_BORDER_EXT = $812D;

const
  GL_EXT_texture_buffer = 1;
  GL_TEXTURE_BUFFER_EXT = $8C2A;
  GL_TEXTURE_BUFFER_BINDING_EXT = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT = $8C2B;
  GL_TEXTURE_BINDING_BUFFER_EXT = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = $8C2D;
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = $919F;
  GL_SAMPLER_BUFFER_EXT = $8DC2;
  GL_INT_SAMPLER_BUFFER_EXT = $8DD0;
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = $8DD8;
  GL_IMAGE_BUFFER_EXT = $9051;
  GL_INT_IMAGE_BUFFER_EXT = $905C;
  GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = $9067;
  GL_TEXTURE_BUFFER_OFFSET_EXT = $919D;
  GL_TEXTURE_BUFFER_SIZE_EXT = $919E;

const
  GL_EXT_texture_compression_dxt1 = 1;
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT = $83F0;
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = $83F1;

const
  GL_EXT_texture_compression_s3tc = 1;
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = $83F2;
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = $83F3;

const
  GL_EXT_texture_cube_map_array = 1;
  GL_TEXTURE_CUBE_MAP_ARRAY_EXT = $9009;
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = $900A;
  GL_SAMPLER_CUBE_MAP_ARRAY_EXT = $900C;
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = $900D;
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = $900E;
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = $900F;
  GL_IMAGE_CUBE_MAP_ARRAY_EXT = $9054;
  GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = $905F;
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = $906A;

const
  GL_EXT_texture_filter_anisotropic = 1;
  GL_TEXTURE_MAX_ANISOTROPY_EXT = $84FE;
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = $84FF;

const
  GL_EXT_texture_filter_minmax = 1;

const
  GL_EXT_texture_format_BGRA8888 = 1;

const
  GL_EXT_texture_norm16 = 1;
  GL_R16_EXT = $822A;
  GL_RG16_EXT = $822C;
  GL_RGBA16_EXT = $805B;
  GL_RGB16_EXT = $8054;
  GL_RGB16_SNORM_EXT = $8F9A;

const
  GL_EXT_texture_rg = 1;
  GL_RED_EXT = $1903;
  GL_RG_EXT = $8227;
  GL_R8_EXT = $8229;
  GL_RG8_EXT = $822B;

const
  GL_EXT_texture_sRGB_R8 = 1;
  GL_SR8_EXT = $8FBD;

const
  GL_EXT_texture_sRGB_RG8 = 1;
  GL_SRG8_EXT = $8FBE;

const
  GL_EXT_texture_sRGB_decode = 1;
  GL_TEXTURE_SRGB_DECODE_EXT = $8A48;
  GL_DECODE_EXT = $8A49;
  GL_SKIP_DECODE_EXT = $8A4A;

const
  GL_EXT_texture_storage = 1;
  GL_TEXTURE_IMMUTABLE_FORMAT_EXT = $912F;
  GL_ALPHA8_EXT = $803C;
  GL_LUMINANCE8_EXT = $8040;
  GL_LUMINANCE8_ALPHA8_EXT = $8045;
  GL_RGBA32F_EXT = $8814;
  GL_RGB32F_EXT = $8815;
  GL_ALPHA32F_EXT = $8816;
  GL_LUMINANCE32F_EXT = $8818;
  GL_LUMINANCE_ALPHA32F_EXT = $8819;
  GL_ALPHA16F_EXT = $881C;
  GL_LUMINANCE16F_EXT = $881E;
  GL_LUMINANCE_ALPHA16F_EXT = $881F;
  GL_R32F_EXT = $822E;
  GL_RG32F_EXT = $8230;

const
  GL_EXT_texture_type_2_10_10_10_REV = 1;
  GL_UNSIGNED_INT_2_10_10_10_REV_EXT = $8368;

const
  GL_EXT_texture_view = 1;
  GL_TEXTURE_VIEW_MIN_LEVEL_EXT = $82DB;
  GL_TEXTURE_VIEW_NUM_LEVELS_EXT = $82DC;
  GL_TEXTURE_VIEW_MIN_LAYER_EXT = $82DD;
  GL_TEXTURE_VIEW_NUM_LAYERS_EXT = $82DE;

const
  GL_EXT_unpack_subimage = 1;
  GL_UNPACK_ROW_LENGTH_EXT = $0CF2;
  GL_UNPACK_SKIP_ROWS_EXT = $0CF3;
  GL_UNPACK_SKIP_PIXELS_EXT = $0CF4;

const
  GL_FJ_shader_binary_GCCSO = 1;
  GL_GCCSO_SHADER_BINARY_FJ = $9260;

const
  GL_IMG_framebuffer_downsample = 1;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = $913C;
  GL_NUM_DOWNSAMPLE_SCALES_IMG = $913D;
  GL_DOWNSAMPLE_SCALES_IMG = $913E;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = $913F;

const
  GL_IMG_multisampled_render_to_texture = 1;
  GL_RENDERBUFFER_SAMPLES_IMG = $9133;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = $9134;
  GL_MAX_SAMPLES_IMG = $9135;
  GL_TEXTURE_SAMPLES_IMG = $9136;

const
  GL_IMG_program_binary = 1;
  GL_SGX_PROGRAM_BINARY_IMG = $9130;

const
  GL_IMG_read_format = 1;
  GL_BGRA_IMG = $80E1;
  GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = $8365;

const
  GL_IMG_shader_binary = 1;
  GL_SGX_BINARY_IMG = $8C0A;

const
  GL_IMG_texture_compression_pvrtc = 1;
  GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = $8C00;
  GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = $8C01;
  GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = $8C02;
  GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = $8C03;

const
  GL_IMG_texture_compression_pvrtc2 = 1;
  GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = $9137;
  GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = $9138;

const
  GL_IMG_texture_filter_cubic = 1;
  GL_CUBIC_IMG = $9139;
  GL_CUBIC_MIPMAP_NEAREST_IMG = $913A;
  GL_CUBIC_MIPMAP_LINEAR_IMG = $913B;

const
  GL_INTEL_framebuffer_CMAA = 1;

const
  GL_INTEL_performance_query = 1;
  GL_PERFQUERY_SINGLE_CONTEXT_INTEL = $00000000;
  GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = $00000001;
  GL_PERFQUERY_WAIT_INTEL = $83FB;
  GL_PERFQUERY_FLUSH_INTEL = $83FA;
  GL_PERFQUERY_DONOT_FLUSH_INTEL = $83F9;
  GL_PERFQUERY_COUNTER_EVENT_INTEL = $94F0;
  GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = $94F1;
  GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = $94F2;
  GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = $94F3;
  GL_PERFQUERY_COUNTER_RAW_INTEL = $94F4;
  GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = $94F5;
  GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = $94F8;
  GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = $94F9;
  GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = $94FA;
  GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = $94FB;
  GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = $94FC;
  GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = $94FD;
  GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = $94FE;
  GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = $94FF;
  GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = $9500;

const
  GL_NV_bindless_texture = 1;

const
  GL_NV_blend_equation_advanced = 1;
  GL_BLEND_OVERLAP_NV = $9281;
  GL_BLEND_PREMULTIPLIED_SRC_NV = $9280;
  GL_BLUE_NV = $1905;
  GL_COLORBURN_NV = $929A;
  GL_COLORDODGE_NV = $9299;
  GL_CONJOINT_NV = $9284;
  GL_CONTRAST_NV = $92A1;
  GL_DARKEN_NV = $9297;
  GL_DIFFERENCE_NV = $929E;
  GL_DISJOINT_NV = $9283;
  GL_DST_ATOP_NV = $928F;
  GL_DST_IN_NV = $928B;
  GL_DST_NV = $9287;
  GL_DST_OUT_NV = $928D;
  GL_DST_OVER_NV = $9289;
  GL_EXCLUSION_NV = $92A0;
  GL_GREEN_NV = $1904;
  GL_HARDLIGHT_NV = $929B;
  GL_HARDMIX_NV = $92A9;
  GL_HSL_COLOR_NV = $92AF;
  GL_HSL_HUE_NV = $92AD;
  GL_HSL_LUMINOSITY_NV = $92B0;
  GL_HSL_SATURATION_NV = $92AE;
  GL_INVERT_OVG_NV = $92B4;
  GL_INVERT_RGB_NV = $92A3;
  GL_LIGHTEN_NV = $9298;
  GL_LINEARBURN_NV = $92A5;
  GL_LINEARDODGE_NV = $92A4;
  GL_LINEARLIGHT_NV = $92A7;
  GL_MINUS_CLAMPED_NV = $92B3;
  GL_MINUS_NV = $929F;
  GL_MULTIPLY_NV = $9294;
  GL_OVERLAY_NV = $9296;
  GL_PINLIGHT_NV = $92A8;
  GL_PLUS_CLAMPED_ALPHA_NV = $92B2;
  GL_PLUS_CLAMPED_NV = $92B1;
  GL_PLUS_DARKER_NV = $9292;
  GL_PLUS_NV = $9291;
  GL_RED_NV = $1903;
  GL_SCREEN_NV = $9295;
  GL_SOFTLIGHT_NV = $929C;
  GL_SRC_ATOP_NV = $928E;
  GL_SRC_IN_NV = $928A;
  GL_SRC_NV = $9286;
  GL_SRC_OUT_NV = $928C;
  GL_SRC_OVER_NV = $9288;
  GL_UNCORRELATED_NV = $9282;
  GL_VIVIDLIGHT_NV = $92A6;
  GL_XOR_NV = $1506;

const
  GL_NV_blend_equation_advanced_coherent = 1;
  GL_BLEND_ADVANCED_COHERENT_NV = $9285;

const
  GL_NV_conditional_render = 1;
  GL_QUERY_WAIT_NV = $8E13;
  GL_QUERY_NO_WAIT_NV = $8E14;
  GL_QUERY_BY_REGION_WAIT_NV = $8E15;
  GL_QUERY_BY_REGION_NO_WAIT_NV = $8E16;

const
  GL_NV_conservative_raster = 1;
  GL_CONSERVATIVE_RASTERIZATION_NV = $9346;
  GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = $9347;
  GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = $9348;
  GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = $9349;

const
  GL_NV_copy_buffer = 1;
  GL_COPY_READ_BUFFER_NV = $8F36;
  GL_COPY_WRITE_BUFFER_NV = $8F37;

const
  GL_NV_coverage_sample = 1;
  GL_COVERAGE_COMPONENT_NV = $8ED0;
  GL_COVERAGE_COMPONENT4_NV = $8ED1;
  GL_COVERAGE_ATTACHMENT_NV = $8ED2;
  GL_COVERAGE_BUFFERS_NV = $8ED3;

const
  GL_COVERAGE_SAMPLES_NV = $8ED4;
  GL_COVERAGE_ALL_FRAGMENTS_NV = $8ED5;
  GL_COVERAGE_EDGE_FRAGMENTS_NV = $8ED6;
  GL_COVERAGE_AUTOMATIC_NV = $8ED7;
  GL_COVERAGE_BUFFER_BIT_NV = $00008000;

const
  GL_NV_depth_nonlinear = 1;
  GL_DEPTH_COMPONENT16_NONLINEAR_NV = $8E2C;

const
  GL_NV_draw_buffers = 1;
  GL_MAX_DRAW_BUFFERS_NV = $8824;
  GL_DRAW_BUFFER0_NV = $8825;
  GL_DRAW_BUFFER1_NV = $8826;
  GL_DRAW_BUFFER2_NV = $8827;
  GL_DRAW_BUFFER3_NV = $8828;
  GL_DRAW_BUFFER4_NV = $8829;
  GL_DRAW_BUFFER5_NV = $882A;
  GL_DRAW_BUFFER6_NV = $882B;
  GL_DRAW_BUFFER7_NV = $882C;
  GL_DRAW_BUFFER8_NV = $882D;
  GL_DRAW_BUFFER9_NV = $882E;
  GL_DRAW_BUFFER10_NV = $882F;
  GL_DRAW_BUFFER11_NV = $8830;
  GL_DRAW_BUFFER12_NV = $8831;
  GL_DRAW_BUFFER13_NV = $8832;
  GL_DRAW_BUFFER14_NV = $8833;
  GL_DRAW_BUFFER15_NV = $8834;
  GL_COLOR_ATTACHMENT0_NV = $8CE0;
  GL_COLOR_ATTACHMENT1_NV = $8CE1;
  GL_COLOR_ATTACHMENT2_NV = $8CE2;
  GL_COLOR_ATTACHMENT3_NV = $8CE3;
  GL_COLOR_ATTACHMENT4_NV = $8CE4;
  GL_COLOR_ATTACHMENT5_NV = $8CE5;
  GL_COLOR_ATTACHMENT6_NV = $8CE6;
  GL_COLOR_ATTACHMENT7_NV = $8CE7;
  GL_COLOR_ATTACHMENT8_NV = $8CE8;
  GL_COLOR_ATTACHMENT9_NV = $8CE9;
  GL_COLOR_ATTACHMENT10_NV = $8CEA;
  GL_COLOR_ATTACHMENT11_NV = $8CEB;
  GL_COLOR_ATTACHMENT12_NV = $8CEC;
  GL_COLOR_ATTACHMENT13_NV = $8CED;
  GL_COLOR_ATTACHMENT14_NV = $8CEE;
  GL_COLOR_ATTACHMENT15_NV = $8CEF;

const
  GL_NV_draw_instanced = 1;

const
  GL_NV_explicit_attrib_location = 1;

const
  GL_NV_fbo_color_attachments = 1;
  GL_MAX_COLOR_ATTACHMENTS_NV = $8CDF;

const
  GL_NV_fence = 1;
  GL_ALL_COMPLETED_NV = $84F2;
  GL_FENCE_STATUS_NV = $84F3;
  GL_FENCE_CONDITION_NV = $84F4;

const
  GL_NV_fill_rectangle = 1;
  GL_FILL_RECTANGLE_NV = $933C;

const
  GL_NV_fragment_coverage_to_color = 1;
  GL_FRAGMENT_COVERAGE_TO_COLOR_NV = $92DD;
  GL_FRAGMENT_COVERAGE_COLOR_NV = $92DE;

const
  GL_NV_fragment_shader_interlock = 1;

const
  GL_NV_framebuffer_blit = 1;
  GL_READ_FRAMEBUFFER_NV = $8CA8;
  GL_DRAW_FRAMEBUFFER_NV = $8CA9;
  GL_DRAW_FRAMEBUFFER_BINDING_NV = $8CA6;
  GL_READ_FRAMEBUFFER_BINDING_NV = $8CAA;

const
  GL_NV_framebuffer_mixed_samples = 1;
  GL_COVERAGE_MODULATION_TABLE_NV = $9331;
  GL_COLOR_SAMPLES_NV = $8E20;
  GL_DEPTH_SAMPLES_NV = $932D;
  GL_STENCIL_SAMPLES_NV = $932E;
  GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = $932F;
  GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = $9330;
  GL_COVERAGE_MODULATION_NV = $9332;
  GL_COVERAGE_MODULATION_TABLE_SIZE_NV = $9333;

const
  GL_NV_framebuffer_multisample = 1;
  GL_RENDERBUFFER_SAMPLES_NV = $8CAB;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = $8D56;
  GL_MAX_SAMPLES_NV = $8D57;

const
  GL_NV_generate_mipmap_sRGB = 1;

const
  GL_NV_geometry_shader_passthrough = 1;

const
  GL_NV_image_formats = 1;

const
  GL_NV_instanced_arrays = 1;
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = $88FE;

const
  GL_NV_internalformat_sample_query = 1;
  GL_TEXTURE_2D_MULTISAMPLE = $9100;
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY = $9102;
  GL_MULTISAMPLES_NV = $9371;
  GL_SUPERSAMPLE_SCALE_X_NV = $9372;
  GL_SUPERSAMPLE_SCALE_Y_NV = $9373;
  GL_CONFORMANT_NV = $9374;

const
  GL_NV_non_square_matrices = 1;
  GL_FLOAT_MAT2x3_NV = $8B65;
  GL_FLOAT_MAT2x4_NV = $8B66;
  GL_FLOAT_MAT3x2_NV = $8B67;
  GL_FLOAT_MAT3x4_NV = $8B68;
  GL_FLOAT_MAT4x2_NV = $8B69;
  GL_FLOAT_MAT4x3_NV = $8B6A;

const
  GL_NV_path_rendering = 1;
  GL_PATH_FORMAT_SVG_NV = $9070;
  GL_PATH_FORMAT_PS_NV = $9071;
  GL_STANDARD_FONT_NAME_NV = $9072;
  GL_SYSTEM_FONT_NAME_NV = $9073;
  GL_FILE_NAME_NV = $9074;
  GL_PATH_STROKE_WIDTH_NV = $9075;
  GL_PATH_END_CAPS_NV = $9076;
  GL_PATH_INITIAL_END_CAP_NV = $9077;
  GL_PATH_TERMINAL_END_CAP_NV = $9078;
  GL_PATH_JOIN_STYLE_NV = $9079;
  GL_PATH_MITER_LIMIT_NV = $907A;
  GL_PATH_DASH_CAPS_NV = $907B;
  GL_PATH_INITIAL_DASH_CAP_NV = $907C;
  GL_PATH_TERMINAL_DASH_CAP_NV = $907D;
  GL_PATH_DASH_OFFSET_NV = $907E;
  GL_PATH_CLIENT_LENGTH_NV = $907F;
  GL_PATH_FILL_MODE_NV = $9080;
  GL_PATH_FILL_MASK_NV = $9081;
  GL_PATH_FILL_COVER_MODE_NV = $9082;
  GL_PATH_STROKE_COVER_MODE_NV = $9083;
  GL_PATH_STROKE_MASK_NV = $9084;
  GL_COUNT_UP_NV = $9088;
  GL_COUNT_DOWN_NV = $9089;
  GL_PATH_OBJECT_BOUNDING_BOX_NV = $908A;
  GL_CONVEX_HULL_NV = $908B;
  GL_BOUNDING_BOX_NV = $908D;
  GL_TRANSLATE_X_NV = $908E;
  GL_TRANSLATE_Y_NV = $908F;
  GL_TRANSLATE_2D_NV = $9090;
  GL_TRANSLATE_3D_NV = $9091;
  GL_AFFINE_2D_NV = $9092;
  GL_AFFINE_3D_NV = $9094;
  GL_TRANSPOSE_AFFINE_2D_NV = $9096;
  GL_TRANSPOSE_AFFINE_3D_NV = $9098;
  GL_UTF8_NV = $909A;
  GL_UTF16_NV = $909B;
  GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = $909C;
  GL_PATH_COMMAND_COUNT_NV = $909D;
  GL_PATH_COORD_COUNT_NV = $909E;
  GL_PATH_DASH_ARRAY_COUNT_NV = $909F;
  GL_PATH_COMPUTED_LENGTH_NV = $90A0;
  GL_PATH_FILL_BOUNDING_BOX_NV = $90A1;
  GL_PATH_STROKE_BOUNDING_BOX_NV = $90A2;
  GL_SQUARE_NV = $90A3;
  GL_ROUND_NV = $90A4;
  GL_TRIANGULAR_NV = $90A5;
  GL_BEVEL_NV = $90A6;
  GL_MITER_REVERT_NV = $90A7;
  GL_MITER_TRUNCATE_NV = $90A8;
  GL_SKIP_MISSING_GLYPH_NV = $90A9;
  GL_USE_MISSING_GLYPH_NV = $90AA;
  GL_PATH_ERROR_POSITION_NV = $90AB;
  GL_ACCUM_ADJACENT_PAIRS_NV = $90AD;
  GL_ADJACENT_PAIRS_NV = $90AE;
  GL_FIRST_TO_REST_NV = $90AF;
  GL_PATH_GEN_MODE_NV = $90B0;
  GL_PATH_GEN_COEFF_NV = $90B1;
  GL_PATH_GEN_COMPONENTS_NV = $90B3;
  GL_PATH_STENCIL_FUNC_NV = $90B7;
  GL_PATH_STENCIL_REF_NV = $90B8;
  GL_PATH_STENCIL_VALUE_MASK_NV = $90B9;
  GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = $90BD;
  GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = $90BE;
  GL_PATH_COVER_DEPTH_FUNC_NV = $90BF;
  GL_PATH_DASH_OFFSET_RESET_NV = $90B4;
  GL_MOVE_TO_RESETS_NV = $90B5;
  GL_MOVE_TO_CONTINUES_NV = $90B6;
  GL_CLOSE_PATH_NV = $00;
  GL_MOVE_TO_NV = $02;
  GL_RELATIVE_MOVE_TO_NV = $03;
  GL_LINE_TO_NV = $04;
  GL_RELATIVE_LINE_TO_NV = $05;
  GL_HORIZONTAL_LINE_TO_NV = $06;
  GL_RELATIVE_HORIZONTAL_LINE_TO_NV = $07;
  GL_VERTICAL_LINE_TO_NV = $08;
  GL_RELATIVE_VERTICAL_LINE_TO_NV = $09;
  GL_QUADRATIC_CURVE_TO_NV = $0A;
  GL_RELATIVE_QUADRATIC_CURVE_TO_NV = $0B;
  GL_CUBIC_CURVE_TO_NV = $0C;
  GL_RELATIVE_CUBIC_CURVE_TO_NV = $0D;
  GL_SMOOTH_QUADRATIC_CURVE_TO_NV = $0E;
  GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = $0F;
  GL_SMOOTH_CUBIC_CURVE_TO_NV = $10;
  GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = $11;
  GL_SMALL_CCW_ARC_TO_NV = $12;
  GL_RELATIVE_SMALL_CCW_ARC_TO_NV = $13;
  GL_SMALL_CW_ARC_TO_NV = $14;
  GL_RELATIVE_SMALL_CW_ARC_TO_NV = $15;
  GL_LARGE_CCW_ARC_TO_NV = $16;
  GL_RELATIVE_LARGE_CCW_ARC_TO_NV = $17;
  GL_LARGE_CW_ARC_TO_NV = $18;
  GL_RELATIVE_LARGE_CW_ARC_TO_NV = $19;
  GL_RESTART_PATH_NV = $F0;
  GL_DUP_FIRST_CUBIC_CURVE_TO_NV = $F2;
  GL_DUP_LAST_CUBIC_CURVE_TO_NV = $F4;
  GL_RECT_NV = $F6;
  GL_CIRCULAR_CCW_ARC_TO_NV = $F8;
  GL_CIRCULAR_CW_ARC_TO_NV = $FA;
  GL_CIRCULAR_TANGENT_ARC_TO_NV = $FC;
  GL_ARC_TO_NV = $FE;
  GL_RELATIVE_ARC_TO_NV = $FF;
  GL_BOLD_BIT_NV = $01;
  GL_ITALIC_BIT_NV = $02;
  GL_GLYPH_WIDTH_BIT_NV = $01;
  GL_GLYPH_HEIGHT_BIT_NV = $02;
  GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = $04;
  GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = $08;
  GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = $10;
  GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = $20;
  GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = $40;
  GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = $80;
  GL_GLYPH_HAS_KERNING_BIT_NV = $100;
  GL_FONT_X_MIN_BOUNDS_BIT_NV = $00010000;
  GL_FONT_Y_MIN_BOUNDS_BIT_NV = $00020000;
  GL_FONT_X_MAX_BOUNDS_BIT_NV = $00040000;
  GL_FONT_Y_MAX_BOUNDS_BIT_NV = $00080000;
  GL_FONT_UNITS_PER_EM_BIT_NV = $00100000;
  GL_FONT_ASCENDER_BIT_NV = $00200000;
  GL_FONT_DESCENDER_BIT_NV = $00400000;
  GL_FONT_HEIGHT_BIT_NV = $00800000;
  GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = $01000000;
  GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = $02000000;
  GL_FONT_UNDERLINE_POSITION_BIT_NV = $04000000;
  GL_FONT_UNDERLINE_THICKNESS_BIT_NV = $08000000;
  GL_FONT_HAS_KERNING_BIT_NV = $10000000;
  GL_ROUNDED_RECT_NV = $E8;
  GL_RELATIVE_ROUNDED_RECT_NV = $E9;
  GL_ROUNDED_RECT2_NV = $EA;
  GL_RELATIVE_ROUNDED_RECT2_NV = $EB;
  GL_ROUNDED_RECT4_NV = $EC;
  GL_RELATIVE_ROUNDED_RECT4_NV = $ED;
  GL_ROUNDED_RECT8_NV = $EE;
  GL_RELATIVE_ROUNDED_RECT8_NV = $EF;
  GL_RELATIVE_RECT_NV = $F7;
  GL_FONT_GLYPHS_AVAILABLE_NV = $9368;
  GL_FONT_TARGET_UNAVAILABLE_NV = $9369;
  GL_FONT_UNAVAILABLE_NV = $936A;
  GL_FONT_UNINTELLIGIBLE_NV = $936B;
  GL_CONIC_CURVE_TO_NV = $1A;
  GL_RELATIVE_CONIC_CURVE_TO_NV = $1B;
  GL_FONT_NUM_GLYPH_INDICES_BIT_NV = $20000000;
  GL_STANDARD_FONT_FORMAT_NV = $936C;
  GL_PATH_PROJECTION_NV = $1701;
  GL_PATH_MODELVIEW_NV = $1700;
  GL_PATH_MODELVIEW_STACK_DEPTH_NV = $0BA3;
  GL_PATH_MODELVIEW_MATRIX_NV = $0BA6;
  GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = $0D36;
  GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = $84E3;
  GL_PATH_PROJECTION_STACK_DEPTH_NV = $0BA4;
  GL_PATH_PROJECTION_MATRIX_NV = $0BA7;
  GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = $0D38;
  GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = $84E4;
  GL_FRAGMENT_INPUT_NV = $936D;

const
  GL_NV_path_rendering_shared_edge = 1;
  GL_SHARED_EDGE_NV = $C0;

const
  GL_NV_polygon_mode = 1;
  GL_POLYGON_MODE_NV = $0B40;
  GL_POLYGON_OFFSET_POINT_NV = $2A01;
  GL_POLYGON_OFFSET_LINE_NV = $2A02;
  GL_POINT_NV = $1B00;
  GL_LINE_NV = $1B01;
  GL_FILL_NV = $1B02;

const
  GL_NV_read_buffer = 1;
  GL_READ_BUFFER_NV = $0C02;

const
  GL_NV_read_buffer_front = 1;

const
  GL_NV_read_depth = 1;

const
  GL_NV_read_depth_stencil = 1;

const
  GL_NV_read_stencil = 1;

const
  GL_NV_sRGB_formats = 1;
  GL_SLUMINANCE_NV = $8C46;
  GL_SLUMINANCE_ALPHA_NV = $8C44;
  GL_SRGB8_NV = $8C41;
  GL_SLUMINANCE8_NV = $8C47;
  GL_SLUMINANCE8_ALPHA8_NV = $8C45;
  GL_COMPRESSED_SRGB_S3TC_DXT1_NV = $8C4C;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = $8C4D;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = $8C4E;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = $8C4F;
  GL_ETC1_SRGB8_NV = $88EE;

const
  GL_NV_sample_locations = 1;
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = $933D;
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = $933E;
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = $933F;
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = $9340;
  GL_SAMPLE_LOCATION_NV = $8E50;
  GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = $9341;
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = $9342;
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = $9343;

const
  GL_NV_sample_mask_override_coverage = 1;

const
  GL_NV_shader_noperspective_interpolation = 1;

const
  GL_NV_shadow_samplers_array = 1;
  GL_SAMPLER_2D_ARRAY_SHADOW_NV = $8DC4;

const
  GL_NV_shadow_samplers_cube = 1;
  GL_SAMPLER_CUBE_SHADOW_NV = $8DC5;

const
  GL_NV_texture_border_clamp = 1;
  GL_TEXTURE_BORDER_COLOR_NV = $1004;
  GL_CLAMP_TO_BORDER_NV = $812D;

const
  GL_NV_texture_compression_s3tc_update = 1;

const
  GL_NV_texture_npot_2D_mipmap = 1;

const
  GL_NV_viewport_array = 1;
  GL_MAX_VIEWPORTS_NV = $825B;
  GL_VIEWPORT_SUBPIXEL_BITS_NV = $825C;
  GL_VIEWPORT_BOUNDS_RANGE_NV = $825D;
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = $825F;

const
  GL_NV_viewport_array2 = 1;

const
  GL_OVR_multiview = 1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = $9630;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = $9632;
  GL_MAX_VIEWS_OVR = $9631;

const
  GL_OVR_multiview2 = 1;

const
  GL_OVR_multiview_multisampled_render_to_texture = 1;

const
  GL_QCOM_alpha_test = 1;
  GL_ALPHA_TEST_QCOM = $0BC0;
  GL_ALPHA_TEST_FUNC_QCOM = $0BC1;
  GL_ALPHA_TEST_REF_QCOM = $0BC2;

const
  GL_QCOM_binning_control = 1;
  GL_BINNING_CONTROL_HINT_QCOM = $8FB0;
  GL_CPU_OPTIMIZED_QCOM = $8FB1;
  GL_GPU_OPTIMIZED_QCOM = $8FB2;
  GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = $8FB3;

const
  GL_QCOM_driver_control = 1;

const
  GL_QCOM_extended_get = 1;
  GL_TEXTURE_WIDTH_QCOM = $8BD2;
  GL_TEXTURE_HEIGHT_QCOM = $8BD3;
  GL_TEXTURE_DEPTH_QCOM = $8BD4;
  GL_TEXTURE_INTERNAL_FORMAT_QCOM = $8BD5;
  GL_TEXTURE_FORMAT_QCOM = $8BD6;
  GL_TEXTURE_TYPE_QCOM = $8BD7;
  GL_TEXTURE_IMAGE_VALID_QCOM = $8BD8;
  GL_TEXTURE_NUM_LEVELS_QCOM = $8BD9;
  GL_TEXTURE_TARGET_QCOM = $8BDA;
  GL_TEXTURE_OBJECT_VALID_QCOM = $8BDB;
  GL_STATE_RESTORE = $8BDC;

const
  GL_QCOM_extended_get2 = 1;

const
  GL_QCOM_perfmon_global_mode = 1;
  GL_PERFMON_GLOBAL_MODE_QCOM = $8FA0;

const
  GL_QCOM_tiled_rendering = 1;
  GL_COLOR_BUFFER_BIT0_QCOM = $00000001;
  GL_COLOR_BUFFER_BIT1_QCOM = $00000002;
  GL_COLOR_BUFFER_BIT2_QCOM = $00000004;
  GL_COLOR_BUFFER_BIT3_QCOM = $00000008;
  GL_COLOR_BUFFER_BIT4_QCOM = $00000010;
  GL_COLOR_BUFFER_BIT5_QCOM = $00000020;
  GL_COLOR_BUFFER_BIT6_QCOM = $00000040;
  GL_COLOR_BUFFER_BIT7_QCOM = $00000080;
  GL_DEPTH_BUFFER_BIT0_QCOM = $00000100;
  GL_DEPTH_BUFFER_BIT1_QCOM = $00000200;
  GL_DEPTH_BUFFER_BIT2_QCOM = $00000400;
  GL_DEPTH_BUFFER_BIT3_QCOM = $00000800;
  GL_DEPTH_BUFFER_BIT4_QCOM = $00001000;
  GL_DEPTH_BUFFER_BIT5_QCOM = $00002000;
  GL_DEPTH_BUFFER_BIT6_QCOM = $00004000;
  GL_DEPTH_BUFFER_BIT7_QCOM = $00008000;
  GL_STENCIL_BUFFER_BIT0_QCOM = $00010000;
  GL_STENCIL_BUFFER_BIT1_QCOM = $00020000;
  GL_STENCIL_BUFFER_BIT2_QCOM = $00040000;
  GL_STENCIL_BUFFER_BIT3_QCOM = $00080000;
  GL_STENCIL_BUFFER_BIT4_QCOM = $00100000;
  GL_STENCIL_BUFFER_BIT5_QCOM = $00200000;
  GL_STENCIL_BUFFER_BIT6_QCOM = $00400000;
  GL_STENCIL_BUFFER_BIT7_QCOM = $00800000;
  GL_MULTISAMPLE_BUFFER_BIT0_QCOM = $01000000;
  GL_MULTISAMPLE_BUFFER_BIT1_QCOM = $02000000;
  GL_MULTISAMPLE_BUFFER_BIT2_QCOM = $04000000;
  GL_MULTISAMPLE_BUFFER_BIT3_QCOM = $08000000;
  GL_MULTISAMPLE_BUFFER_BIT4_QCOM = $10000000;
  GL_MULTISAMPLE_BUFFER_BIT5_QCOM = $20000000;
  GL_MULTISAMPLE_BUFFER_BIT6_QCOM = $40000000;
  GL_MULTISAMPLE_BUFFER_BIT7_QCOM = $80000000;

const
  GL_QCOM_writeonly_rendering = 1;
  GL_WRITEONLY_RENDERING_QCOM = $8823;

const
  GL_VIV_shader_binary = 1;
  GL_SHADER_BINARY_VIV = $8FC4;

const
  __gl_h_ = 1;
  GL_VERSION_ES_CM_1_0 = 1;
  GL_VERSION_ES_CL_1_0 = 1;
  GL_VERSION_ES_CM_1_1 = 1;
  GL_VERSION_ES_CL_1_1 = 1;
  GL_CLIP_PLANE0 = $3000;
  GL_CLIP_PLANE1 = $3001;
  GL_CLIP_PLANE2 = $3002;
  GL_CLIP_PLANE3 = $3003;
  GL_CLIP_PLANE4 = $3004;
  GL_CLIP_PLANE5 = $3005;
  GL_LIGHTING = $0B50;
  GL_ALPHA_TEST = $0BC0;
  GL_COLOR_LOGIC_OP = $0BF2;
  GL_POINT_SMOOTH = $0B10;
  GL_LINE_SMOOTH = $0B20;
  GL_COLOR_MATERIAL = $0B57;
  GL_NORMALIZE = $0BA1;
  GL_RESCALE_NORMAL = $803A;
  GL_VERTEX_ARRAY = $8074;
  GL_NORMAL_ARRAY = $8075;
  GL_COLOR_ARRAY = $8076;
  GL_TEXTURE_COORD_ARRAY = $8078;
  GL_MULTISAMPLE = $809D;
  GL_SAMPLE_ALPHA_TO_ONE = $809F;
  GL_STACK_OVERFLOW = $0503;
  GL_STACK_UNDERFLOW = $0504;
  GL_EXP = $0800;
  GL_EXP2 = $0801;
  GL_FOG_DENSITY = $0B62;
  GL_FOG_START = $0B63;
  GL_FOG_END = $0B64;
  GL_FOG_MODE = $0B65;
  GL_FOG_COLOR = $0B66;
  GL_CURRENT_COLOR = $0B00;
  GL_CURRENT_NORMAL = $0B02;
  GL_CURRENT_TEXTURE_COORDS = $0B03;
  GL_POINT_SIZE = $0B11;
  GL_POINT_SIZE_MIN = $8126;
  GL_POINT_SIZE_MAX = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE = $8128;
  GL_POINT_DISTANCE_ATTENUATION = $8129;
  GL_SMOOTH_POINT_SIZE_RANGE = $0B12;
  GL_SMOOTH_LINE_WIDTH_RANGE = $0B22;
  GL_SHADE_MODEL = $0B54;
  GL_MATRIX_MODE = $0BA0;
  GL_MODELVIEW_STACK_DEPTH = $0BA3;
  GL_PROJECTION_STACK_DEPTH = $0BA4;
  GL_TEXTURE_STACK_DEPTH = $0BA5;
  GL_MODELVIEW_MATRIX = $0BA6;
  GL_PROJECTION_MATRIX = $0BA7;
  GL_TEXTURE_MATRIX = $0BA8;
  GL_ALPHA_TEST_FUNC = $0BC1;
  GL_ALPHA_TEST_REF = $0BC2;
  GL_BLEND_DST = $0BE0;
  GL_BLEND_SRC = $0BE1;
  GL_LOGIC_OP_MODE = $0BF0;
  GL_MAX_LIGHTS = $0D31;
  GL_MAX_CLIP_PLANES = $0D32;
  GL_MAX_MODELVIEW_STACK_DEPTH = $0D36;
  GL_MAX_PROJECTION_STACK_DEPTH = $0D38;
  GL_MAX_TEXTURE_STACK_DEPTH = $0D39;
  GL_MAX_TEXTURE_UNITS = $84E2;
  GL_VERTEX_ARRAY_SIZE = $807A;
  GL_VERTEX_ARRAY_TYPE = $807B;
  GL_VERTEX_ARRAY_STRIDE = $807C;
  GL_NORMAL_ARRAY_TYPE = $807E;
  GL_NORMAL_ARRAY_STRIDE = $807F;
  GL_COLOR_ARRAY_SIZE = $8081;
  GL_COLOR_ARRAY_TYPE = $8082;
  GL_COLOR_ARRAY_STRIDE = $8083;
  GL_TEXTURE_COORD_ARRAY_SIZE = $8088;
  GL_TEXTURE_COORD_ARRAY_TYPE = $8089;
  GL_TEXTURE_COORD_ARRAY_STRIDE = $808A;
  GL_VERTEX_ARRAY_POINTER = $808E;
  GL_NORMAL_ARRAY_POINTER = $808F;
  GL_COLOR_ARRAY_POINTER = $8090;
  GL_TEXTURE_COORD_ARRAY_POINTER = $8092;
  GL_PERSPECTIVE_CORRECTION_HINT = $0C50;
  GL_POINT_SMOOTH_HINT = $0C51;
  GL_LINE_SMOOTH_HINT = $0C52;
  GL_FOG_HINT = $0C54;
  GL_LIGHT_MODEL_AMBIENT = $0B53;
  GL_LIGHT_MODEL_TWO_SIDE = $0B52;
  GL_AMBIENT = $1200;
  GL_DIFFUSE = $1201;
  GL_SPECULAR = $1202;
  GL_POSITION = $1203;
  GL_SPOT_DIRECTION = $1204;
  GL_SPOT_EXPONENT = $1205;
  GL_SPOT_CUTOFF = $1206;
  GL_LINEAR_ATTENUATION = $1208;
  GL_QUADRATIC_ATTENUATION = $1209;
  GL_CLEAR = $1500;
  GL_AND = $1501;
  GL_AND_REVERSE = $1502;
  GL_COPY = $1503;
  GL_AND_INVERTED = $1504;
  GL_NOOP = $1505;
  GL_XOR = $1506;
  GL_OR = $1507;
  GL_NOR = $1508;
  GL_EQUIV = $1509;
  GL_OR_REVERSE = $150B;
  GL_COPY_INVERTED = $150C;
  GL_OR_INVERTED = $150D;
  GL_NAND = $150E;
  GL_SET = $150F;
  GL_EMISSION = $1600;
  GL_SHININESS = $1601;
  GL_AMBIENT_AND_DIFFUSE = $1602;
  GL_FLAT = $1D00;
  GL_SMOOTH = $1D01;
  GL_MODULATE = $2100;
  GL_DECAL = $2101;
  GL_ADD = $0104;
  GL_TEXTURE_ENV_MODE = $2200;
  GL_TEXTURE_ENV_COLOR = $2201;
  GL_TEXTURE_ENV = $2300;
  GL_CLIENT_ACTIVE_TEXTURE = $84E1;
  GL_LIGHT0 = $4000;
  GL_LIGHT1 = $4001;
  GL_LIGHT2 = $4002;
  GL_LIGHT3 = $4003;
  GL_LIGHT4 = $4004;
  GL_LIGHT5 = $4005;
  GL_LIGHT6 = $4006;
  GL_LIGHT7 = $4007;
  GL_VERTEX_ARRAY_BUFFER_BINDING = $8896;
  GL_NORMAL_ARRAY_BUFFER_BINDING = $8897;
  GL_COLOR_ARRAY_BUFFER_BINDING = $8898;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = $889A;
  GL_SUBTRACT = $84E7;
  GL_COMBINE = $8570;
  GL_COMBINE_RGB = $8571;
  GL_COMBINE_ALPHA = $8572;
  GL_RGB_SCALE = $8573;
  GL_ADD_SIGNED = $8574;
  GL_INTERPOLATE = $8575;
  GL_CONSTANT = $8576;
  GL_PRIMARY_COLOR = $8577;
  GL_PREVIOUS = $8578;
  GL_OPERAND0_RGB = $8590;
  GL_OPERAND1_RGB = $8591;
  GL_OPERAND2_RGB = $8592;
  GL_OPERAND0_ALPHA = $8598;
  GL_OPERAND1_ALPHA = $8599;
  GL_OPERAND2_ALPHA = $859A;
  GL_ALPHA_SCALE = $0D1C;
  GL_SRC0_RGB = $8580;
  GL_SRC1_RGB = $8581;
  GL_SRC2_RGB = $8582;
  GL_SRC0_ALPHA = $8588;
  GL_SRC1_ALPHA = $8589;
  GL_SRC2_ALPHA = $858A;
  GL_DOT3_RGB = $86AE;
  GL_DOT3_RGBA = $86AF;
{------------------------------------------------------------------------*
 * required OES extension tokens
 *------------------------------------------------------------------------ }

const
  GL_OES_read_format = 1;
  GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = $8B9A;
  GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = $8B9B;

const
  GL_OES_point_size_array = 1;
  GL_POINT_SIZE_ARRAY_OES = $8B9C;
  GL_POINT_SIZE_ARRAY_TYPE_OES = $898A;
  GL_POINT_SIZE_ARRAY_STRIDE_OES = $898B;
  GL_POINT_SIZE_ARRAY_POINTER_OES = $898C;
  GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = $8B9F;

const
  GL_OES_point_sprite = 1;
  GL_POINT_SPRITE_OES = $8861;
  GL_COORD_REPLACE_OES = $8862;

const
  __glext_h_ = 1;
{------------------------------------------------------------------------*
 * OES extension tokens
 *------------------------------------------------------------------------ }

const
  GL_BLEND_EQUATION_RGB_OES = $8009;
  GL_BLEND_EQUATION_ALPHA_OES = $883D;

const
  GL_BLEND_DST_RGB_OES = $80C8;
  GL_BLEND_SRC_RGB_OES = $80C9;
  GL_BLEND_DST_ALPHA_OES = $80CA;
  GL_BLEND_SRC_ALPHA_OES = $80CB;

const
  GL_BLEND_EQUATION_OES = $8009;
  GL_FUNC_ADD_OES = $8006;
  GL_FUNC_SUBTRACT_OES = $800A;
  GL_FUNC_REVERSE_SUBTRACT_OES = $800B;

const
  GL_TEXTURE_CROP_RECT_OES = $8B9D;

const
  GL_FIXED_OES = $140C;

const
  GL_NONE_OES = 0;
  GL_FRAMEBUFFER_OES = $8D40;
  GL_RENDERBUFFER_OES = $8D41;
  GL_RENDERBUFFER_WIDTH_OES = $8D42;
  GL_RENDERBUFFER_HEIGHT_OES = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT_OES = $8D44;
  GL_RENDERBUFFER_RED_SIZE_OES = $8D50;
  GL_RENDERBUFFER_GREEN_SIZE_OES = $8D51;
  GL_RENDERBUFFER_BLUE_SIZE_OES = $8D52;
  GL_RENDERBUFFER_ALPHA_SIZE_OES = $8D53;
  GL_RENDERBUFFER_DEPTH_SIZE_OES = $8D54;
  GL_RENDERBUFFER_STENCIL_SIZE_OES = $8D55;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = $8CD3;
  GL_COLOR_ATTACHMENT0_OES = $8CE0;
  GL_DEPTH_ATTACHMENT_OES = $8D00;
  GL_STENCIL_ATTACHMENT_OES = $8D20;
  GL_FRAMEBUFFER_COMPLETE_OES = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = $8CD9;
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = $8CDA;
  GL_FRAMEBUFFER_UNSUPPORTED_OES = $8CDD;
  GL_FRAMEBUFFER_BINDING_OES = $8CA6;
  GL_RENDERBUFFER_BINDING_OES = $8CA7;
  GL_MAX_RENDERBUFFER_SIZE_OES = $84E8;
  GL_INVALID_FRAMEBUFFER_OPERATION_OES = $0506;

const
  GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = $898D;
  GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = $898E;
  GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = $898F;

const
  GL_MAX_VERTEX_UNITS_OES = $86A4;
  GL_MAX_PALETTE_MATRICES_OES = $8842;
  GL_MATRIX_PALETTE_OES = $8840;
  GL_MATRIX_INDEX_ARRAY_OES = $8844;
  GL_WEIGHT_ARRAY_OES = $86AD;
  GL_CURRENT_PALETTE_MATRIX_OES = $8843;
  GL_MATRIX_INDEX_ARRAY_SIZE_OES = $8846;
  GL_MATRIX_INDEX_ARRAY_TYPE_OES = $8847;
  GL_MATRIX_INDEX_ARRAY_STRIDE_OES = $8848;
  GL_MATRIX_INDEX_ARRAY_POINTER_OES = $8849;
  GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = $8B9E;
  GL_WEIGHT_ARRAY_SIZE_OES = $86AB;
  GL_WEIGHT_ARRAY_TYPE_OES = $86A9;
  GL_WEIGHT_ARRAY_STRIDE_OES = $86AA;
  GL_WEIGHT_ARRAY_POINTER_OES = $86AC;
  GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = $889E;

const
  GL_INCR_WRAP_OES = $8507;
  GL_DECR_WRAP_OES = $8508;

const
  GL_NORMAL_MAP_OES = $8511;
  GL_REFLECTION_MAP_OES = $8512;
  GL_TEXTURE_CUBE_MAP_OES = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP_OES = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = $851A;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = $851C;
  GL_TEXTURE_GEN_MODE_OES = $2500;
  GL_TEXTURE_GEN_STR_OES = $8D60;

const
  GL_MIRRORED_REPEAT_OES = $8370;

const
  GL_MAX_TEXTURE_LOD_BIAS_EXT = $84FD;
  GL_TEXTURE_FILTER_CONTROL_EXT = $8500;
  GL_TEXTURE_LOD_BIAS_EXT = $8501;
{------------------------------------------------------------------------*
 * IMG extension tokens
 *------------------------------------------------------------------------ }

const
  GL_MODULATE_COLOR_IMG = $8C04;
  GL_RECIP_ADD_SIGNED_ALPHA_IMG = $8C05;
  GL_TEXTURE_ALPHA_MODULATE_IMG = $8C06;
  GL_FACTOR_ALPHA_MODULATE_IMG = $8C07;
  GL_FRAGMENT_ALPHA_MODULATE_IMG = $8C08;
  GL_ADD_BLEND_IMG = $8C09;
  GL_DOT3_RGBA_IMG = $86AF;

const
  GL_CLIP_PLANE0_IMG = $3000;
  GL_CLIP_PLANE1_IMG = $3001;
  GL_CLIP_PLANE2_IMG = $3002;
  GL_CLIP_PLANE3_IMG = $3003;
  GL_CLIP_PLANE4_IMG = $3004;
  GL_CLIP_PLANE5_IMG = $3005;
  GL_MAX_CLIP_PLANES_IMG = $0D32;
{------------------------------------------------------------------------*
 * OES extension functions
 *------------------------------------------------------------------------ }

const
  GL_OES_blend_equation_separate = 1;

const
  GL_OES_blend_func_separate = 1;

const
  GL_OES_blend_subtract = 1;

const
  GL_OES_byte_coordinates = 1;

const
  GL_OES_draw_texture = 1;

const
  GL_OES_extended_matrix_palette = 1;

const
  GL_OES_fixed_point = 1;

const
  GL_OES_framebuffer_object = 1;

const
  GL_OES_matrix_get = 1;

const
  GL_OES_matrix_palette = 1;

const
  GL_OES_query_matrix = 1;

const
  GL_OES_single_precision = 1;

const
  GL_OES_stencil8 = 1;

const
  GL_OES_stencil_wrap = 1;

const
  GL_OES_texture_cube_map = 1;

const
  GL_OES_texture_env_crossbar = 1;

const
  GL_OES_texture_mirrored_repeat = 1;

{------------------------------------------------------------------------*
 * APPLE extension functions
 *------------------------------------------------------------------------ }

const
  GL_APPLE_texture_2D_limited_npot = 1;
{------------------------------------------------------------------------*
 * EXT extension functions
 *------------------------------------------------------------------------ }

const
  GL_EXT_texture_lod_bias = 1;
{------------------------------------------------------------------------*
 * IMG extension functions
 *------------------------------------------------------------------------ }

const
  GL_IMG_texture_env_enhanced_fixed_function = 1;

const
  GL_IMG_user_clip_plane = 1;

type
  PGLintptr = ^TGLintptr;
  TGLintptr = Tptrdiff_t;

  PGLsizeiptr = ^TGLsizeiptr;
  TGLsizeiptr = Tptrdiff_t;

const
  GL_COMPRESSED_RGB8_ETC2 = $9274;
  GL_COMPRESSED_RGBA8_ETC2_EAC = $9278;

type
  PGLclampx = ^TGLclampx;
  TGLclampx = longint;

  TGLsync = Pointer;
  PGLsync = ^TGLsync;

const
  __gl3_h_ = 1;
  GL_READ_BUFFER = $0C02;
  GL_UNPACK_ROW_LENGTH = $0CF2;
  GL_UNPACK_SKIP_ROWS = $0CF3;
  GL_UNPACK_SKIP_PIXELS = $0CF4;
  GL_PACK_ROW_LENGTH = $0D02;
  GL_PACK_SKIP_ROWS = $0D03;
  GL_PACK_SKIP_PIXELS = $0D04;
  GL_COLOR = $1800;
  GL_DEPTH = $1801;
  GL_STENCIL = $1802;
  GL_RED = $1903;
  GL_RGB8 = $8051;
  GL_RGBA8 = $8058;
  GL_RGB10_A2 = $8059;
  GL_TEXTURE_BINDING_3D = $806A;
  GL_UNPACK_SKIP_IMAGES = $806D;
  GL_UNPACK_IMAGE_HEIGHT = $806E;
  GL_TEXTURE_WRAP_R = $8072;
  GL_MAX_3D_TEXTURE_SIZE = $8073;
  GL_UNSIGNED_INT_2_10_10_10_REV = $8368;
  GL_MAX_ELEMENTS_VERTICES = $80E8;
  GL_MAX_ELEMENTS_INDICES = $80E9;
  GL_TEXTURE_MIN_LOD = $813A;
  GL_TEXTURE_MAX_LOD = $813B;
  GL_TEXTURE_BASE_LEVEL = $813C;
  GL_TEXTURE_MAX_LEVEL = $813D;
  GL_DEPTH_COMPONENT24 = $81A6;
  GL_MAX_TEXTURE_LOD_BIAS = $84FD;
  GL_TEXTURE_COMPARE_MODE = $884C;
  GL_TEXTURE_COMPARE_FUNC = $884D;
  GL_CURRENT_QUERY = $8865;
  GL_QUERY_RESULT = $8866;
  GL_QUERY_RESULT_AVAILABLE = $8867;
  GL_BUFFER_MAPPED = $88BC;
  GL_BUFFER_MAP_POINTER = $88BD;
  GL_STREAM_READ = $88E1;
  GL_STREAM_COPY = $88E2;
  GL_STATIC_READ = $88E5;
  GL_STATIC_COPY = $88E6;
  GL_DYNAMIC_READ = $88E9;
  GL_DYNAMIC_COPY = $88EA;
  GL_MAX_DRAW_BUFFERS = $8824;
  GL_DRAW_BUFFER0 = $8825;
  GL_DRAW_BUFFER1 = $8826;
  GL_DRAW_BUFFER2 = $8827;
  GL_DRAW_BUFFER3 = $8828;
  GL_DRAW_BUFFER4 = $8829;
  GL_DRAW_BUFFER5 = $882A;
  GL_DRAW_BUFFER6 = $882B;
  GL_DRAW_BUFFER7 = $882C;
  GL_DRAW_BUFFER8 = $882D;
  GL_DRAW_BUFFER9 = $882E;
  GL_DRAW_BUFFER10 = $882F;
  GL_DRAW_BUFFER11 = $8830;
  GL_DRAW_BUFFER12 = $8831;
  GL_DRAW_BUFFER13 = $8832;
  GL_DRAW_BUFFER14 = $8833;
  GL_DRAW_BUFFER15 = $8834;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS = $8B4A;
  GL_SAMPLER_3D = $8B5F;
  GL_SAMPLER_2D_SHADOW = $8B62;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;
  GL_PIXEL_PACK_BUFFER = $88EB;
  GL_PIXEL_UNPACK_BUFFER = $88EC;
  GL_PIXEL_PACK_BUFFER_BINDING = $88ED;
  GL_PIXEL_UNPACK_BUFFER_BINDING = $88EF;
  GL_FLOAT_MAT2x3 = $8B65;
  GL_FLOAT_MAT2x4 = $8B66;
  GL_FLOAT_MAT3x2 = $8B67;
  GL_FLOAT_MAT3x4 = $8B68;
  GL_FLOAT_MAT4x2 = $8B69;
  GL_FLOAT_MAT4x3 = $8B6A;
  GL_SRGB = $8C40;
  GL_SRGB8 = $8C41;
  GL_SRGB8_ALPHA8 = $8C43;
  GL_COMPARE_REF_TO_TEXTURE = $884E;
  GL_MAJOR_VERSION = $821B;
  GL_MINOR_VERSION = $821C;
  GL_NUM_EXTENSIONS = $821D;
  GL_RGBA32F = $8814;
  GL_RGB32F = $8815;
  GL_RGBA16F = $881A;
  GL_RGB16F = $881B;
  GL_VERTEX_ATTRIB_ARRAY_INTEGER = $88FD;
  GL_MAX_ARRAY_TEXTURE_LAYERS = $88FF;
  GL_MIN_PROGRAM_TEXEL_OFFSET = $8904;
  GL_MAX_PROGRAM_TEXEL_OFFSET = $8905;
  GL_MAX_VARYING_COMPONENTS = $8B4B;
  GL_TEXTURE_BINDING_2D_ARRAY = $8C1D;
  GL_R11F_G11F_B10F = $8C3A;
  GL_UNSIGNED_INT_10F_11F_11F_REV = $8C3B;
  GL_RGB9_E5 = $8C3D;
  GL_UNSIGNED_INT_5_9_9_9_REV = $8C3E;
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = $8C76;
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE = $8C7F;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = $8C80;
  GL_TRANSFORM_FEEDBACK_VARYINGS = $8C83;
  GL_TRANSFORM_FEEDBACK_BUFFER_START = $8C84;
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = $8C85;
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = $8C88;
  GL_RASTERIZER_DISCARD = $8C89;
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = $8C8A;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = $8C8B;
  GL_INTERLEAVED_ATTRIBS = $8C8C;
  GL_SEPARATE_ATTRIBS = $8C8D;
  GL_TRANSFORM_FEEDBACK_BUFFER = $8C8E;
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = $8C8F;
  GL_RGBA32UI = $8D70;
  GL_RGB32UI = $8D71;
  GL_RGBA16UI = $8D76;
  GL_RGB16UI = $8D77;
  GL_RGBA8UI = $8D7C;
  GL_RGB8UI = $8D7D;
  GL_RGBA32I = $8D82;
  GL_RGB32I = $8D83;
  GL_RGBA16I = $8D88;
  GL_RGB16I = $8D89;
  GL_RGBA8I = $8D8E;
  GL_RGB8I = $8D8F;
  GL_RED_INTEGER = $8D94;
  GL_RGB_INTEGER = $8D98;
  GL_RGBA_INTEGER = $8D99;
  GL_SAMPLER_2D_ARRAY = $8DC1;
  GL_SAMPLER_2D_ARRAY_SHADOW = $8DC4;
  GL_SAMPLER_CUBE_SHADOW = $8DC5;
  GL_UNSIGNED_INT_VEC2 = $8DC6;
  GL_UNSIGNED_INT_VEC3 = $8DC7;
  GL_UNSIGNED_INT_VEC4 = $8DC8;
  GL_INT_SAMPLER_2D = $8DCA;
  GL_INT_SAMPLER_3D = $8DCB;
  GL_INT_SAMPLER_CUBE = $8DCC;
  GL_INT_SAMPLER_2D_ARRAY = $8DCF;
  GL_UNSIGNED_INT_SAMPLER_2D = $8DD2;
  GL_UNSIGNED_INT_SAMPLER_3D = $8DD3;
  GL_UNSIGNED_INT_SAMPLER_CUBE = $8DD4;
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = $8DD7;
  GL_BUFFER_ACCESS_FLAGS = $911F;
  GL_BUFFER_MAP_LENGTH = $9120;
  GL_BUFFER_MAP_OFFSET = $9121;
  GL_DEPTH_COMPONENT32F = $8CAC;
  GL_DEPTH32F_STENCIL8 = $8CAD;
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV = $8DAD;
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = $8210;
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = $8211;
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = $8212;
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = $8213;
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = $8214;
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = $8215;
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = $8216;
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = $8217;
  GL_FRAMEBUFFER_DEFAULT = $8218;
  GL_FRAMEBUFFER_UNDEFINED = $8219;
  GL_DEPTH_STENCIL_ATTACHMENT = $821A;
  GL_DEPTH_STENCIL = $84F9;
  GL_UNSIGNED_INT_24_8 = $84FA;
  GL_DEPTH24_STENCIL8 = $88F0;
  GL_UNSIGNED_NORMALIZED = $8C17;
  GL_DRAW_FRAMEBUFFER_BINDING = $8CA6;
  GL_READ_FRAMEBUFFER = $8CA8;
  GL_DRAW_FRAMEBUFFER = $8CA9;
  GL_READ_FRAMEBUFFER_BINDING = $8CAA;
  GL_RENDERBUFFER_SAMPLES = $8CAB;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = $8CD4;
  GL_MAX_COLOR_ATTACHMENTS = $8CDF;
  GL_COLOR_ATTACHMENT1 = $8CE1;
  GL_COLOR_ATTACHMENT2 = $8CE2;
  GL_COLOR_ATTACHMENT3 = $8CE3;
  GL_COLOR_ATTACHMENT4 = $8CE4;
  GL_COLOR_ATTACHMENT5 = $8CE5;
  GL_COLOR_ATTACHMENT6 = $8CE6;
  GL_COLOR_ATTACHMENT7 = $8CE7;
  GL_COLOR_ATTACHMENT8 = $8CE8;
  GL_COLOR_ATTACHMENT9 = $8CE9;
  GL_COLOR_ATTACHMENT10 = $8CEA;
  GL_COLOR_ATTACHMENT11 = $8CEB;
  GL_COLOR_ATTACHMENT12 = $8CEC;
  GL_COLOR_ATTACHMENT13 = $8CED;
  GL_COLOR_ATTACHMENT14 = $8CEE;
  GL_COLOR_ATTACHMENT15 = $8CEF;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = $8D56;
  GL_MAX_SAMPLES = $8D57;
  GL_HALF_FLOAT = $140B;
  GL_MAP_INVALIDATE_RANGE_BIT = $0004;
  GL_MAP_INVALIDATE_BUFFER_BIT = $0008;
  GL_MAP_FLUSH_EXPLICIT_BIT = $0010;
  GL_MAP_UNSYNCHRONIZED_BIT = $0020;
  GL_RG = $8227;
  GL_RG_INTEGER = $8228;
  GL_R8 = $8229;
  GL_RG8 = $822B;
  GL_R16F = $822D;
  GL_R32F = $822E;
  GL_RG16F = $822F;
  GL_RG32F = $8230;
  GL_R8I = $8231;
  GL_R8UI = $8232;
  GL_R16I = $8233;
  GL_R16UI = $8234;
  GL_R32I = $8235;
  GL_R32UI = $8236;
  GL_RG8I = $8237;
  GL_RG8UI = $8238;
  GL_RG16I = $8239;
  GL_RG16UI = $823A;
  GL_RG32I = $823B;
  GL_RG32UI = $823C;
  GL_VERTEX_ARRAY_BINDING = $85B5;
  GL_RGB8_SNORM = $8F96;
  GL_SIGNED_NORMALIZED = $8F9C;
  GL_PRIMITIVE_RESTART_FIXED_INDEX = $8D69;
  GL_COPY_READ_BUFFER = $8F36;
  GL_COPY_WRITE_BUFFER = $8F37;
  GL_COPY_READ_BUFFER_BINDING = $8F36;
  GL_COPY_WRITE_BUFFER_BINDING = $8F37;
  GL_UNIFORM_BUFFER = $8A11;
  GL_UNIFORM_BUFFER_BINDING = $8A28;
  GL_UNIFORM_BUFFER_START = $8A29;
  GL_UNIFORM_BUFFER_SIZE = $8A2A;
  GL_MAX_VERTEX_UNIFORM_BLOCKS = $8A2B;
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS = $8A2D;
  GL_MAX_COMBINED_UNIFORM_BLOCKS = $8A2E;
  GL_MAX_UNIFORM_BUFFER_BINDINGS = $8A2F;
  GL_MAX_UNIFORM_BLOCK_SIZE = $8A30;
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = $8A31;
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = $8A33;
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = $8A34;
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = $8A35;
  GL_ACTIVE_UNIFORM_BLOCKS = $8A36;
  GL_UNIFORM_TYPE = $8A37;
  GL_UNIFORM_SIZE = $8A38;
  GL_UNIFORM_NAME_LENGTH = $8A39;
  GL_UNIFORM_BLOCK_INDEX = $8A3A;
  GL_UNIFORM_OFFSET = $8A3B;
  GL_UNIFORM_ARRAY_STRIDE = $8A3C;
  GL_UNIFORM_MATRIX_STRIDE = $8A3D;
  GL_UNIFORM_IS_ROW_MAJOR = $8A3E;
  GL_UNIFORM_BLOCK_BINDING = $8A3F;
  GL_UNIFORM_BLOCK_DATA_SIZE = $8A40;
  GL_UNIFORM_BLOCK_NAME_LENGTH = $8A41;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = $8A42;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = $8A43;
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = $8A44;
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = $8A46;
  GL_INVALID_INDEX = $FFFFFFFF;
  GL_MAX_VERTEX_OUTPUT_COMPONENTS = $9122;
  GL_MAX_FRAGMENT_INPUT_COMPONENTS = $9125;
  GL_MAX_SERVER_WAIT_TIMEOUT = $9111;
  GL_OBJECT_TYPE = $9112;
  GL_SYNC_CONDITION = $9113;
  GL_SYNC_STATUS = $9114;
  GL_SYNC_FLAGS = $9115;
  GL_SYNC_FENCE = $9116;
  GL_SYNC_GPU_COMMANDS_COMPLETE = $9117;
  GL_UNSIGNALED = $9118;
  GL_SIGNALED = $9119;
  GL_ALREADY_SIGNALED = $911A;
  GL_TIMEOUT_EXPIRED = $911B;
  GL_CONDITION_SATISFIED = $911C;
  GL_WAIT_FAILED = $911D;
  GL_SYNC_FLUSH_COMMANDS_BIT = $00000001;
  GL_TIMEOUT_IGNORED = $FFFFFFFFFFFFFFFF;
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR = $88FE;
  GL_ANY_SAMPLES_PASSED = $8C2F;
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE = $8D6A;
  GL_SAMPLER_BINDING = $8919;
  GL_RGB10_A2UI = $906F;
  GL_TEXTURE_SWIZZLE_R = $8E42;
  GL_TEXTURE_SWIZZLE_G = $8E43;
  GL_TEXTURE_SWIZZLE_B = $8E44;
  GL_TEXTURE_SWIZZLE_A = $8E45;
  GL_GREEN = $1904;
  GL_BLUE = $1905;
  GL_INT_2_10_10_10_REV = $8D9F;
  GL_TRANSFORM_FEEDBACK_PAUSED = $8E23;
  GL_TRANSFORM_FEEDBACK_ACTIVE = $8E24;
  GL_TRANSFORM_FEEDBACK_BINDING = $8E25;
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT = $8257;
  GL_PROGRAM_BINARY_LENGTH = $8741;
  GL_NUM_PROGRAM_BINARY_FORMATS = $87FE;
  GL_PROGRAM_BINARY_FORMATS = $87FF;
  GL_COMPRESSED_R11_EAC = $9270;
  GL_COMPRESSED_SIGNED_R11_EAC = $9271;
  GL_COMPRESSED_RG11_EAC = $9272;
  GL_COMPRESSED_SIGNED_RG11_EAC = $9273;
  GL_COMPRESSED_SRGB8_ETC2 = $9275;
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9276;
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9277;
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = $9279;
  GL_TEXTURE_IMMUTABLE_FORMAT = $912F;
  GL_MAX_ELEMENT_INDEX = $8D6B;
  GL_NUM_SAMPLE_COUNTS = $9380;

const
  __gl31_h_ = 1;
  GL_COMPUTE_SHADER = $91B9;
  GL_MAX_COMPUTE_UNIFORM_BLOCKS = $91BB;
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = $91BC;
  GL_MAX_COMPUTE_IMAGE_UNIFORMS = $91BD;
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = $8262;
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS = $8263;
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = $8264;
  GL_MAX_COMPUTE_ATOMIC_COUNTERS = $8265;
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = $8266;
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = $90EB;
  GL_MAX_COMPUTE_WORK_GROUP_COUNT = $91BE;
  GL_MAX_COMPUTE_WORK_GROUP_SIZE = $91BF;
  GL_COMPUTE_WORK_GROUP_SIZE = $8267;
  GL_DISPATCH_INDIRECT_BUFFER = $90EE;
  GL_DISPATCH_INDIRECT_BUFFER_BINDING = $90EF;
  GL_COMPUTE_SHADER_BIT = $00000020;
  GL_DRAW_INDIRECT_BUFFER = $8F3F;
  GL_DRAW_INDIRECT_BUFFER_BINDING = $8F43;
  GL_MAX_UNIFORM_LOCATIONS = $826E;
  GL_FRAMEBUFFER_DEFAULT_WIDTH = $9310;
  GL_FRAMEBUFFER_DEFAULT_HEIGHT = $9311;
  GL_FRAMEBUFFER_DEFAULT_SAMPLES = $9313;
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = $9314;
  GL_MAX_FRAMEBUFFER_WIDTH = $9315;
  GL_MAX_FRAMEBUFFER_HEIGHT = $9316;
  GL_MAX_FRAMEBUFFER_SAMPLES = $9318;
  GL_UNIFORM = $92E1;
  GL_UNIFORM_BLOCK = $92E2;
  GL_PROGRAM_INPUT = $92E3;
  GL_PROGRAM_OUTPUT = $92E4;
  GL_BUFFER_VARIABLE = $92E5;
  GL_SHADER_STORAGE_BLOCK = $92E6;
  GL_ATOMIC_COUNTER_BUFFER = $92C0;
  GL_TRANSFORM_FEEDBACK_VARYING = $92F4;
  GL_ACTIVE_RESOURCES = $92F5;
  GL_MAX_NAME_LENGTH = $92F6;
  GL_MAX_NUM_ACTIVE_VARIABLES = $92F7;
  GL_NAME_LENGTH = $92F9;
  GL_TYPE = $92FA;
  GL_ARRAY_SIZE = $92FB;
  GL_OFFSET = $92FC;
  GL_BLOCK_INDEX = $92FD;
  GL_ARRAY_STRIDE = $92FE;
  GL_MATRIX_STRIDE = $92FF;
  GL_IS_ROW_MAJOR = $9300;
  GL_ATOMIC_COUNTER_BUFFER_INDEX = $9301;
  GL_BUFFER_BINDING = $9302;
  GL_BUFFER_DATA_SIZE = $9303;
  GL_NUM_ACTIVE_VARIABLES = $9304;
  GL_ACTIVE_VARIABLES = $9305;
  GL_REFERENCED_BY_VERTEX_SHADER = $9306;
  GL_REFERENCED_BY_FRAGMENT_SHADER = $930A;
  GL_REFERENCED_BY_COMPUTE_SHADER = $930B;
  GL_TOP_LEVEL_ARRAY_SIZE = $930C;
  GL_TOP_LEVEL_ARRAY_STRIDE = $930D;
  GL_LOCATION = $930E;
  GL_VERTEX_SHADER_BIT = $00000001;
  GL_FRAGMENT_SHADER_BIT = $00000002;
  GL_ALL_SHADER_BITS = $FFFFFFFF;
  GL_PROGRAM_SEPARABLE = $8258;
  GL_ACTIVE_PROGRAM = $8259;
  GL_PROGRAM_PIPELINE_BINDING = $825A;
  GL_ATOMIC_COUNTER_BUFFER_BINDING = $92C1;
  GL_ATOMIC_COUNTER_BUFFER_START = $92C2;
  GL_ATOMIC_COUNTER_BUFFER_SIZE = $92C3;
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = $92CC;
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = $92D0;
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = $92D1;
  GL_MAX_VERTEX_ATOMIC_COUNTERS = $92D2;
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS = $92D6;
  GL_MAX_COMBINED_ATOMIC_COUNTERS = $92D7;
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = $92D8;
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = $92DC;
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = $92D9;
  GL_UNSIGNED_INT_ATOMIC_COUNTER = $92DB;
  GL_MAX_IMAGE_UNITS = $8F38;
  GL_MAX_VERTEX_IMAGE_UNIFORMS = $90CA;
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS = $90CE;
  GL_MAX_COMBINED_IMAGE_UNIFORMS = $90CF;
  GL_IMAGE_BINDING_NAME = $8F3A;
  GL_IMAGE_BINDING_LEVEL = $8F3B;
  GL_IMAGE_BINDING_LAYERED = $8F3C;
  GL_IMAGE_BINDING_LAYER = $8F3D;
  GL_IMAGE_BINDING_ACCESS = $8F3E;
  GL_IMAGE_BINDING_FORMAT = $906E;
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = $00000001;
  GL_ELEMENT_ARRAY_BARRIER_BIT = $00000002;
  GL_UNIFORM_BARRIER_BIT = $00000004;
  GL_TEXTURE_FETCH_BARRIER_BIT = $00000008;
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = $00000020;
  GL_COMMAND_BARRIER_BIT = $00000040;
  GL_PIXEL_BUFFER_BARRIER_BIT = $00000080;
  GL_TEXTURE_UPDATE_BARRIER_BIT = $00000100;
  GL_BUFFER_UPDATE_BARRIER_BIT = $00000200;
  GL_FRAMEBUFFER_BARRIER_BIT = $00000400;
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT = $00000800;
  GL_ATOMIC_COUNTER_BARRIER_BIT = $00001000;
  GL_ALL_BARRIER_BITS = $FFFFFFFF;
  GL_IMAGE_2D = $904D;
  GL_IMAGE_3D = $904E;
  GL_IMAGE_CUBE = $9050;
  GL_IMAGE_2D_ARRAY = $9053;
  GL_INT_IMAGE_2D = $9058;
  GL_INT_IMAGE_3D = $9059;
  GL_INT_IMAGE_CUBE = $905B;
  GL_INT_IMAGE_2D_ARRAY = $905E;
  GL_UNSIGNED_INT_IMAGE_2D = $9063;
  GL_UNSIGNED_INT_IMAGE_3D = $9064;
  GL_UNSIGNED_INT_IMAGE_CUBE = $9066;
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY = $9069;
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = $90C7;
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = $90C8;
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = $90C9;
  GL_READ_ONLY = $88B8;
  GL_WRITE_ONLY = $88B9;
  GL_READ_WRITE = $88BA;
  GL_SHADER_STORAGE_BUFFER = $90D2;
  GL_SHADER_STORAGE_BUFFER_BINDING = $90D3;
  GL_SHADER_STORAGE_BUFFER_START = $90D4;
  GL_SHADER_STORAGE_BUFFER_SIZE = $90D5;
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = $90D6;
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = $90DA;
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = $90DB;
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = $90DC;
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = $90DD;
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE = $90DE;
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = $90DF;
  GL_SHADER_STORAGE_BARRIER_BIT = $00002000;
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = $8F39;
  GL_DEPTH_STENCIL_TEXTURE_MODE = $90EA;
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5E;
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5F;
  GL_SAMPLE_POSITION = $8E50;
  GL_SAMPLE_MASK = $8E51;
  GL_SAMPLE_MASK_VALUE = $8E52;
  GL_MAX_SAMPLE_MASK_WORDS = $8E59;
  GL_MAX_COLOR_TEXTURE_SAMPLES = $910E;
  GL_MAX_DEPTH_TEXTURE_SAMPLES = $910F;
  GL_MAX_INTEGER_SAMPLES = $9110;
  GL_TEXTURE_BINDING_2D_MULTISAMPLE = $9104;
  GL_TEXTURE_SAMPLES = $9106;
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = $9107;
  GL_TEXTURE_WIDTH = $1000;
  GL_TEXTURE_HEIGHT = $1001;
  GL_TEXTURE_DEPTH = $8071;
  GL_TEXTURE_INTERNAL_FORMAT = $1003;
  GL_TEXTURE_RED_SIZE = $805C;
  GL_TEXTURE_GREEN_SIZE = $805D;
  GL_TEXTURE_BLUE_SIZE = $805E;
  GL_TEXTURE_ALPHA_SIZE = $805F;
  GL_TEXTURE_DEPTH_SIZE = $884A;
  GL_TEXTURE_STENCIL_SIZE = $88F1;
  GL_TEXTURE_SHARED_SIZE = $8C3F;
  GL_TEXTURE_RED_TYPE = $8C10;
  GL_TEXTURE_GREEN_TYPE = $8C11;
  GL_TEXTURE_BLUE_TYPE = $8C12;
  GL_TEXTURE_ALPHA_TYPE = $8C13;
  GL_TEXTURE_DEPTH_TYPE = $8C16;
  GL_TEXTURE_COMPRESSED = $86A1;
  GL_SAMPLER_2D_MULTISAMPLE = $9108;
  GL_INT_SAMPLER_2D_MULTISAMPLE = $9109;
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = $910A;
  GL_VERTEX_ATTRIB_BINDING = $82D4;
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D5;
  GL_VERTEX_BINDING_DIVISOR = $82D6;
  GL_VERTEX_BINDING_OFFSET = $82D7;
  GL_VERTEX_BINDING_STRIDE = $82D8;
  GL_VERTEX_BINDING_BUFFER = $8F4F;
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D9;
  GL_MAX_VERTEX_ATTRIB_BINDINGS = $82DA;
  GL_MAX_VERTEX_ATTRIB_STRIDE = $82E5;

const
  __gl32_h_ = 1;

type

  TGLDEBUGPROC = procedure(source: TGLenum; _type: TGLenum; id: TGLuint; severity: TGLenum; length: TGLsizei; message: PGLchar; userParam: pointer); cdecl;

const
  GL_MULTISAMPLE_LINE_WIDTH_RANGE = $9381;
  GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = $9382;
  GL_MULTIPLY = $9294;
  GL_SCREEN = $9295;
  GL_OVERLAY = $9296;
  GL_DARKEN = $9297;
  GL_LIGHTEN = $9298;
  GL_COLORDODGE = $9299;
  GL_COLORBURN = $929A;
  GL_HARDLIGHT = $929B;
  GL_SOFTLIGHT = $929C;
  GL_DIFFERENCE = $929E;
  GL_EXCLUSION = $92A0;
  GL_HSL_HUE = $92AD;
  GL_HSL_SATURATION = $92AE;
  GL_HSL_COLOR = $92AF;
  GL_HSL_LUMINOSITY = $92B0;
  GL_DEBUG_OUTPUT_SYNCHRONOUS = $8242;
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = $8243;
  GL_DEBUG_CALLBACK_FUNCTION = $8244;
  GL_DEBUG_CALLBACK_USER_PARAM = $8245;
  GL_DEBUG_SOURCE_API = $8246;
  GL_DEBUG_SOURCE_WINDOW_SYSTEM = $8247;
  GL_DEBUG_SOURCE_SHADER_COMPILER = $8248;
  GL_DEBUG_SOURCE_THIRD_PARTY = $8249;
  GL_DEBUG_SOURCE_APPLICATION = $824A;
  GL_DEBUG_SOURCE_OTHER = $824B;
  GL_DEBUG_TYPE_ERROR = $824C;
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = $824D;
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = $824E;
  GL_DEBUG_TYPE_PORTABILITY = $824F;
  GL_DEBUG_TYPE_PERFORMANCE = $8250;
  GL_DEBUG_TYPE_OTHER = $8251;
  GL_DEBUG_TYPE_MARKER = $8268;
  GL_DEBUG_TYPE_PUSH_GROUP = $8269;
  GL_DEBUG_TYPE_POP_GROUP = $826A;
  GL_DEBUG_SEVERITY_NOTIFICATION = $826B;
  GL_MAX_DEBUG_GROUP_STACK_DEPTH = $826C;
  GL_DEBUG_GROUP_STACK_DEPTH = $826D;
  GL_BUFFER = $82E0;
  GL_SHADER = $82E1;
  GL_PROGRAM = $82E2;
  GL_QUERY = $82E3;
  GL_PROGRAM_PIPELINE = $82E4;
  GL_MAX_LABEL_LENGTH = $82E8;
  GL_MAX_DEBUG_MESSAGE_LENGTH = $9143;
  GL_MAX_DEBUG_LOGGED_MESSAGES = $9144;
  GL_DEBUG_LOGGED_MESSAGES = $9145;
  GL_DEBUG_SEVERITY_HIGH = $9146;
  GL_DEBUG_SEVERITY_MEDIUM = $9147;
  GL_DEBUG_SEVERITY_LOW = $9148;
  GL_DEBUG_OUTPUT = $92E0;
  GL_CONTEXT_FLAG_DEBUG_BIT = $00000002;
  GL_GEOMETRY_SHADER = $8DD9;
  GL_GEOMETRY_SHADER_BIT = $00000004;
  GL_GEOMETRY_VERTICES_OUT = $8916;
  GL_GEOMETRY_INPUT_TYPE = $8917;
  GL_GEOMETRY_OUTPUT_TYPE = $8918;
  GL_GEOMETRY_SHADER_INVOCATIONS = $887F;
  GL_LAYER_PROVOKING_VERTEX = $825E;
  GL_LINES_ADJACENCY = $000A;
  GL_LINE_STRIP_ADJACENCY = $000B;
  GL_TRIANGLES_ADJACENCY = $000C;
  GL_TRIANGLE_STRIP_ADJACENCY = $000D;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = $8DDF;
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS = $8A2C;
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = $8A32;
  GL_MAX_GEOMETRY_INPUT_COMPONENTS = $9123;
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = $9124;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = $8DE1;
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS = $8E5A;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = $8C29;
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = $92CF;
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS = $92D5;
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS = $90CD;
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = $90D7;
  GL_FIRST_VERTEX_CONVENTION = $8E4D;
  GL_LAST_VERTEX_CONVENTION = $8E4E;
  GL_UNDEFINED_VERTEX = $8260;
  GL_PRIMITIVES_GENERATED = $8C87;
  GL_FRAMEBUFFER_DEFAULT_LAYERS = $9312;
  GL_MAX_FRAMEBUFFER_LAYERS = $9317;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = $8DA8;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED = $8DA7;
  GL_REFERENCED_BY_GEOMETRY_SHADER = $9309;
  GL_PRIMITIVE_BOUNDING_BOX = $92BE;
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = $00000004;
  GL_CONTEXT_FLAGS = $821E;
  GL_LOSE_CONTEXT_ON_RESET = $8252;
  GL_GUILTY_CONTEXT_RESET = $8253;
  GL_INNOCENT_CONTEXT_RESET = $8254;
  GL_UNKNOWN_CONTEXT_RESET = $8255;
  GL_RESET_NOTIFICATION_STRATEGY = $8256;
  GL_NO_RESET_NOTIFICATION = $8261;
  GL_CONTEXT_LOST = $0507;
  GL_SAMPLE_SHADING = $8C36;
  GL_MIN_SAMPLE_SHADING_VALUE = $8C37;
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = $8E5B;
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = $8E5C;
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = $8E5D;
  GL_PATCHES = $000E;
  GL_PATCH_VERTICES = $8E72;
  GL_TESS_CONTROL_OUTPUT_VERTICES = $8E75;
  GL_TESS_GEN_MODE = $8E76;
  GL_TESS_GEN_SPACING = $8E77;
  GL_TESS_GEN_VERTEX_ORDER = $8E78;
  GL_TESS_GEN_POINT_MODE = $8E79;
  GL_ISOLINES = $8E7A;
  GL_QUADS = $0007;
  GL_FRACTIONAL_ODD = $8E7B;
  GL_FRACTIONAL_EVEN = $8E7C;
  GL_MAX_PATCH_VERTICES = $8E7D;
  GL_MAX_TESS_GEN_LEVEL = $8E7E;
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = $8E7F;
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E80;
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = $8E81;
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = $8E82;
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = $8E83;
  GL_MAX_TESS_PATCH_COMPONENTS = $8E84;
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = $8E85;
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = $8E86;
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = $8E89;
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = $8E8A;
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = $886C;
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = $886D;
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = $8E1E;
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E1F;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = $92CD;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = $92CE;
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = $92D3;
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = $92D4;
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = $90CB;
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = $90CC;
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = $90D8;
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = $90D9;
  GL_IS_PER_PATCH = $92E7;
  GL_REFERENCED_BY_TESS_CONTROL_SHADER = $9307;
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER = $9308;
  GL_TESS_CONTROL_SHADER = $8E88;
  GL_TESS_EVALUATION_SHADER = $8E87;
  GL_TESS_CONTROL_SHADER_BIT = $00000008;
  GL_TESS_EVALUATION_SHADER_BIT = $00000010;
  GL_TEXTURE_BORDER_COLOR = $1004;
  GL_CLAMP_TO_BORDER = $812D;
  GL_TEXTURE_BUFFER = $8C2A;
  GL_TEXTURE_BUFFER_BINDING = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE = $8C2B;
  GL_TEXTURE_BINDING_BUFFER = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING = $8C2D;
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = $919F;
  GL_SAMPLER_BUFFER = $8DC2;
  GL_INT_SAMPLER_BUFFER = $8DD0;
  GL_UNSIGNED_INT_SAMPLER_BUFFER = $8DD8;
  GL_IMAGE_BUFFER = $9051;
  GL_INT_IMAGE_BUFFER = $905C;
  GL_UNSIGNED_INT_IMAGE_BUFFER = $9067;
  GL_TEXTURE_BUFFER_OFFSET = $919D;
  GL_TEXTURE_BUFFER_SIZE = $919E;
  GL_COMPRESSED_RGBA_ASTC_4x4 = $93B0;
  GL_COMPRESSED_RGBA_ASTC_5x4 = $93B1;
  GL_COMPRESSED_RGBA_ASTC_5x5 = $93B2;
  GL_COMPRESSED_RGBA_ASTC_6x5 = $93B3;
  GL_COMPRESSED_RGBA_ASTC_6x6 = $93B4;
  GL_COMPRESSED_RGBA_ASTC_8x5 = $93B5;
  GL_COMPRESSED_RGBA_ASTC_8x6 = $93B6;
  GL_COMPRESSED_RGBA_ASTC_8x8 = $93B7;
  GL_COMPRESSED_RGBA_ASTC_10x5 = $93B8;
  GL_COMPRESSED_RGBA_ASTC_10x6 = $93B9;
  GL_COMPRESSED_RGBA_ASTC_10x8 = $93BA;
  GL_COMPRESSED_RGBA_ASTC_10x10 = $93BB;
  GL_COMPRESSED_RGBA_ASTC_12x10 = $93BC;
  GL_COMPRESSED_RGBA_ASTC_12x12 = $93BD;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = $93D0;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = $93D1;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = $93D2;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = $93D3;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = $93D4;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = $93D5;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = $93D6;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = $93D7;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = $93D8;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = $93D9;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = $93DA;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = $93DB;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = $93DC;
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = $93DD;
  GL_TEXTURE_CUBE_MAP_ARRAY = $9009;
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = $900A;
  GL_SAMPLER_CUBE_MAP_ARRAY = $900C;
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = $900D;
  GL_INT_SAMPLER_CUBE_MAP_ARRAY = $900E;
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = $900F;
  GL_IMAGE_CUBE_MAP_ARRAY = $9054;
  GL_INT_IMAGE_CUBE_MAP_ARRAY = $905F;
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = $906A;
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = $9105;
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY = $910B;
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910C;
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910D;

type
  PEvasGLSync = ^TEvasGLSync;
  TEvasGLSync = pointer;

  PEvasGLTime = ^TEvasGLTime;
  TEvasGLTime = qword;

const
  EVAS_GL_NONE = $3038;
  EVAS_GL_image_base = 1;
  EVAS_GL_IMAGE_PRESERVED = $30D2;
  EVAS_GL_image = 1;
  EVAS_GL_NATIVE_PIXMAP = $30B0;
  EVAS_VG_PARENT_IMAGE = $30BA;
  EVAS_GL_TEXTURE_2D = $30B1;
  EVAS_GL_TEXTURE_LEVEL = $30BC;
  EVAS_GL_TEXTURE_CUBE_MAP_POSITIVE_X = $30B3;
  EVAS_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $30B4;
  EVAS_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $30B5;
  EVAS_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $30B6;
  EVAS_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $30B7;
  EVAS_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $30B8;
  EVAS_GL_TEXTURE_3D = $30B2;
  EVAS_GL_TEXTURE_ZOFFSET = $30BD;
  EVAS_GL_RENDERBUFFER = $30B9;
  EVAS_GL_DONT_CARE = -(1);
  EVAS_GL_TIZEN_image_native_surface = 1;
  EVAS_GL_NATIVE_SURFACE_TIZEN = $32A1;
  EVAS_GL_SUCCESS = $0000;
  EVAS_GL_NOT_INITIALIZED = $0001;
  EVAS_GL_BAD_ACCESS = $0002;
  EVAS_GL_BAD_ALLOC = $0003;
  EVAS_GL_BAD_ATTRIBUTE = $0004;
  EVAS_GL_BAD_CONFIG = $0005;
  EVAS_GL_BAD_CONTEXT = $0006;
  EVAS_GL_BAD_CURRENT_SURFACE = $0007;
  EVAS_GL_BAD_DISPLAY = $0008;
  EVAS_GL_BAD_MATCH = $0009;
  EVAS_GL_BAD_NATIVE_PIXMAP = $000A;
  EVAS_GL_BAD_NATIVE_WINDOW = $000B;
  EVAS_GL_BAD_PARAMETER = $000C;
  EVAS_GL_BAD_SURFACE = $000D;
  EVAS_GL_CONTEXT_LOST = $000E;
  EVAS_GL_fence_sync = 1;
  EVAS_GL_reusable_sync = 1;
  EVAS_GL_KHR_wait_sync = 1;
  EVAS_GL_SYNC_PRIOR_COMMANDS_COMPLETE = $30F0;
  EVAS_GL_SYNC_STATUS = $30F1;
  EVAS_GL_SIGNALED = $30F2;
  EVAS_GL_UNSIGNALED = $30F3;
  EVAS_GL_TIMEOUT_EXPIRED = $30F5;
  EVAS_GL_CONDITION_SATISFIED = $30F6;
  EVAS_GL_SYNC_TYPE = $30F7;
  EVAS_GL_SYNC_CONDITION = $30F8;
  EVAS_GL_SYNC_FENCE = $30F9;
  EVAS_GL_SYNC_REUSABLE = $30FA;
  EVAS_GL_SYNC_FLUSH_COMMANDS_BIT = $0001;
  EVAS_GL_FOREVER = $FFFFFFFFFFFFFFFF;

function EVAS_GL_NO_SYNC: TEvasGLSync;

const
  EVAS_GL_HEIGHT = $3056;
  EVAS_GL_WIDTH = $3057;
  EVAS_GL_TEXTURE_FORMAT = $3080;
  EVAS_GL_TEXTURE_TARGET = $3081;
  EVAS_GL_API_VERSION = 7;

type
  Teqn = array[0..3] of TGLfloat;
  Teqnfix = array[0..3] of TGLfixed;
  TeqnfixMat = array[0..15] of TGLfixed;
  TIntMat = array[0..15] of TGLint;

  PEvas_GL_API = ^TEvas_GL_API;

  TEvas_GL_API = record
    version: longint;
    glActiveTexture: procedure(texture: TGLenum); cdecl;
    glAttachShader: procedure(program_: TGLuint; shader: TGLuint); cdecl;
    glBindAttribLocation: procedure(program_: TGLuint; index: TGLuint; name: pchar); cdecl;
    glBindBuffer: procedure(target: TGLenum; buffer: TGLuint); cdecl;
    glBindFramebuffer: procedure(target: TGLenum; framebuffer: TGLuint); cdecl;
    glBindRenderbuffer: procedure(target: TGLenum; renderbuffer: TGLuint); cdecl;
    glBindTexture: procedure(target: TGLenum; texture: TGLuint); cdecl;
    glBlendColor: procedure(red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf); cdecl;
    glBlendEquation: procedure(mode: TGLenum); cdecl;
    glBlendEquationSeparate: procedure(modeRGB: TGLenum; modeAlpha: TGLenum); cdecl;
    glBlendFunc: procedure(sfactor: TGLenum; dfactor: TGLenum); cdecl;
    glBlendFuncSeparate: procedure(srcRGB: TGLenum; dstRGB: TGLenum; srcAlpha: TGLenum; dstAlpha: TGLenum); cdecl;
    glBufferData: procedure(target: TGLenum; size: TGLsizeiptr; data: pointer; usage: TGLenum); cdecl;
    glBufferSubData: procedure(target: TGLenum; offset: TGLintptr; size: TGLsizeiptr; data: pointer); cdecl;
    glCheckFramebufferStatus: function(target: TGLenum): TGLenum; cdecl;
    glClear: procedure(mask: TGLbitfield); cdecl;
    glClearColor: procedure(red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf); cdecl;
    glClearDepthf: procedure(depth: TGLclampf); cdecl;
    glClearStencil: procedure(s: TGLint); cdecl;
    glColorMask: procedure(red: TGLboolean; green: TGLboolean; blue: TGLboolean; alpha: TGLboolean); cdecl;
    glCompileShader: procedure(shader: TGLuint); cdecl;
    glCompressedTexImage2D: procedure(target: TGLenum; level: TGLint; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; border: TGLint; imageSize: TGLsizei; data: pointer); cdecl;
    glCompressedTexSubImage2D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; imageSize: TGLsizei; data: pointer); cdecl;
    glCopyTexImage2D: procedure(target: TGLenum; level: TGLint; internalformat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint); cdecl;
    glCopyTexSubImage2D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glCreateProgram: function: TGLuint; cdecl;
    glCreateShader: function(_type: TGLenum): TGLuint; cdecl;
    glCullFace: procedure(mode: TGLenum); cdecl;
    glDeleteBuffers: procedure(n: TGLsizei; buffers: PGLuint); cdecl;
    glDeleteFramebuffers: procedure(n: TGLsizei; framebuffers: PGLuint); cdecl;
    glDeleteProgram: procedure(program_: TGLuint); cdecl;
    glDeleteRenderbuffers: procedure(n: TGLsizei; renderbuffers: PGLuint); cdecl;
    glDeleteShader: procedure(shader: TGLuint); cdecl;
    glDeleteTextures: procedure(n: TGLsizei; textures: PGLuint); cdecl;
    glDepthFunc: procedure(func: TGLenum); cdecl;
    glDepthMask: procedure(flag: TGLboolean); cdecl;
    glDepthRangef: procedure(zNear: TGLclampf; zFar: TGLclampf); cdecl;
    glDetachShader: procedure(program_: TGLuint; shader: TGLuint); cdecl;
    glDisable: procedure(cap: TGLenum); cdecl;
    glDisableVertexAttribArray: procedure(index: TGLuint); cdecl;
    glDrawArrays: procedure(mode: TGLenum; first: TGLint; count: TGLsizei); cdecl;
    glDrawElements: procedure(mode: TGLenum; count: TGLsizei; _type: TGLenum; indices: pointer); cdecl;
    glEnable: procedure(cap: TGLenum); cdecl;
    glEnableVertexAttribArray: procedure(index: TGLuint); cdecl;
    glFinish: procedure; cdecl;
    glFlush: procedure; cdecl;
    glFramebufferRenderbuffer: procedure(target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: TGLuint); cdecl;
    glFramebufferTexture2D: procedure(target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); cdecl;
    glFrontFace: procedure(mode: TGLenum); cdecl;
    glGenBuffers: procedure(n: TGLsizei; buffers: PGLuint); cdecl;
    glGenerateMipmap: procedure(target: TGLenum); cdecl;
    glGenFramebuffers: procedure(n: TGLsizei; framebuffers: PGLuint); cdecl;
    glGenRenderbuffers: procedure(n: TGLsizei; renderbuffers: PGLuint); cdecl;
    glGenTextures: procedure(n: TGLsizei; textures: PGLuint); cdecl;
    glGetActiveAttrib: procedure(program_: TGLuint; index: TGLuint; bufsize: TGLsizei; length: PGLsizei; size: PGLint; _type: PGLenum; name: pchar); cdecl;
    glGetActiveUniform: procedure(program_: TGLuint; index: TGLuint; bufsize: TGLsizei; length: PGLsizei; size: PGLint;_type: PGLenum; name: pchar); cdecl;
    glGetAttachedShaders: procedure(program_: TGLuint; maxcount: TGLsizei; count: PGLsizei; shaders: PGLuint); cdecl;
    glGetAttribLocation: function(program_: TGLuint; name: pchar): longint; cdecl;
    glGetBooleanv: procedure(pname: TGLenum; params: PGLboolean); cdecl;
    glGetBufferParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetError: function: TGLenum; cdecl;
    glGetFloatv: procedure(pname: TGLenum; params: PGLfloat); cdecl;
    glGetFramebufferAttachmentParameteriv: procedure(target: TGLenum; attachment: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetIntegerv: procedure(pname: TGLenum; params: PGLint); cdecl;
    glGetProgramiv: procedure(program_: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetProgramInfoLog: procedure(program_: TGLuint; bufsize: TGLsizei; length: PGLsizei; infolog: pchar); cdecl;
    glGetRenderbufferParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetShaderiv: procedure(shader: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetShaderInfoLog: procedure(shader: TGLuint; bufsize: TGLsizei; length: PGLsizei; infolog: pchar); cdecl;
    glGetShaderPrecisionFormat: procedure(shadertype: TGLenum; precisiontype: TGLenum; range: PGLint; precision: PGLint); cdecl;
    glGetShaderSource: procedure(shader: TGLuint; bufsize: TGLsizei; length: PGLsizei; source: pchar); cdecl;
    glGetString: function(name: TGLenum): PGLubyte; cdecl;
    glGetTexParameterfv: procedure(target: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glGetTexParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetUniformfv: procedure(program_: TGLuint; location: TGLint; params: PGLfloat); cdecl;
    glGetUniformiv: procedure(program_: TGLuint; location: TGLint; params: PGLint); cdecl;
    glGetUniformLocation: function(program_: TGLuint; name: pchar): longint; cdecl;
    glGetVertexAttribfv: procedure(index: TGLuint; pname: TGLenum; params: PGLfloat); cdecl;
    glGetVertexAttribiv: procedure(index: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetVertexAttribPointerv: procedure(index: TGLuint; pname: TGLenum; pointer: Ppointer); cdecl;
    glHint: procedure(target: TGLenum; mode: TGLenum); cdecl;
    glIsBuffer: function(buffer: TGLuint): TGLboolean; cdecl;
    glIsEnabled: function(cap: TGLenum): TGLboolean; cdecl;
    glIsFramebuffer: function(framebuffer: TGLuint): TGLboolean; cdecl;
    glIsProgram: function(program_: TGLuint): TGLboolean; cdecl;
    glIsRenderbuffer: function(renderbuffer: TGLuint): TGLboolean; cdecl;
    glIsShader: function(shader: TGLuint): TGLboolean; cdecl;
    glIsTexture: function(texture: TGLuint): TGLboolean; cdecl;
    glLineWidth: procedure(width: TGLfloat); cdecl;
    glLinkProgram: procedure(program_: TGLuint); cdecl;
    glPixelStorei: procedure(pname: TGLenum; param: TGLint); cdecl;
    glPolygonOffset: procedure(factor: TGLfloat; units: TGLfloat); cdecl;
    glReadPixels: procedure(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; pixels: pointer); cdecl;
    glReleaseShaderCompiler: procedure; cdecl;
    glRenderbufferStorage: procedure(target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glSampleCoverage: procedure(value: TGLclampf; invert: TGLboolean); cdecl;
    glScissor: procedure(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glShaderBinary: procedure(n: TGLsizei; shaders: PGLuint; binaryformat: TGLenum; binary: pointer; length: TGLsizei); cdecl;
    glShaderSource: procedure(shader: TGLuint; count: TGLsizei; _string: PPchar; length: PGLint); cdecl;
    glStencilFunc: procedure(func: TGLenum; ref: TGLint; mask: TGLuint); cdecl;
    glStencilFuncSeparate: procedure(face: TGLenum; func: TGLenum; ref: TGLint; mask: TGLuint); cdecl;
    glStencilMask: procedure(mask: TGLuint); cdecl;
    glStencilMaskSeparate: procedure(face: TGLenum; mask: TGLuint); cdecl;
    glStencilOp: procedure(fail: TGLenum; zfail: TGLenum; zpass: TGLenum); cdecl;
    glStencilOpSeparate: procedure(face: TGLenum; fail: TGLenum; zfail: TGLenum; zpass: TGLenum); cdecl;
    glTexImage2D: procedure(target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; height: TGLsizei;      border: TGLint; format: TGLenum; _type: TGLenum; pixels: pointer); cdecl;
    glTexParameterf: procedure(target: TGLenum; pname: TGLenum; param: TGLfloat); cdecl;
    glTexParameterfv: procedure(target: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glTexParameteri: procedure(target: TGLenum; pname: TGLenum; param: TGLint); cdecl;
    glTexParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glTexSubImage2D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; pixels: pointer); cdecl;
    glUniform1f: procedure(location: TGLint; x: TGLfloat); cdecl;
    glUniform1fv: procedure(location: TGLint; count: TGLsizei; v: PGLfloat); cdecl;
    glUniform1i: procedure(location: TGLint; x: TGLint); cdecl;
    glUniform1iv: procedure(location: TGLint; count: TGLsizei; v: PGLint); cdecl;
    glUniform2f: procedure(location: TGLint; x: TGLfloat; y: TGLfloat); cdecl;
    glUniform2fv: procedure(location: TGLint; count: TGLsizei; v: PGLfloat); cdecl;
    glUniform2i: procedure(location: TGLint; x: TGLint; y: TGLint); cdecl;
    glUniform2iv: procedure(location: TGLint; count: TGLsizei; v: PGLint); cdecl;
    glUniform3f: procedure(location: TGLint; x: TGLfloat; y: TGLfloat; z: TGLfloat); cdecl;
    glUniform3fv: procedure(location: TGLint; count: TGLsizei; v: PGLfloat); cdecl;
    glUniform3i: procedure(location: TGLint; x: TGLint; y: TGLint; z: TGLint); cdecl;
    glUniform3iv: procedure(location: TGLint; count: TGLsizei; v: PGLint); cdecl;
    glUniform4f: procedure(location: TGLint; x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); cdecl;
    glUniform4fv: procedure(location: TGLint; count: TGLsizei; v: PGLfloat); cdecl;
    glUniform4i: procedure(location: TGLint; x: TGLint; y: TGLint; z: TGLint; w: TGLint); cdecl;
    glUniform4iv: procedure(location: TGLint; count: TGLsizei; v: PGLint); cdecl;
    glUniformMatrix2fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix3fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix4fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUseProgram: procedure(program_: TGLuint); cdecl;
    glValidateProgram: procedure(program_: TGLuint); cdecl;
    glVertexAttrib1f: procedure(indx: TGLuint; x: TGLfloat); cdecl;
    glVertexAttrib1fv: procedure(indx: TGLuint; values: PGLfloat); cdecl;
    glVertexAttrib2f: procedure(indx: TGLuint; x: TGLfloat; y: TGLfloat); cdecl;
    glVertexAttrib2fv: procedure(indx: TGLuint; values: PGLfloat); cdecl;
    glVertexAttrib3f: procedure(indx: TGLuint; x: TGLfloat; y: TGLfloat; z: TGLfloat); cdecl;
    glVertexAttrib3fv: procedure(indx: TGLuint; values: PGLfloat); cdecl;
    glVertexAttrib4f: procedure(indx: TGLuint; x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); cdecl;
    glVertexAttrib4fv: procedure(indx: TGLuint; values: PGLfloat); cdecl;
    glVertexAttribPointer: procedure(indx: TGLuint; size: TGLint; _type: TGLenum; normalized: TGLboolean; stride: TGLsizei; ptr: pointer); cdecl;
    glViewport: procedure(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glEvasGLImageTargetTexture2DOES: procedure(target: TGLenum; image: TEvasGLImage); cdecl;
    glEvasGLImageTargetRenderbufferStorageOES: procedure(target: TGLenum; image: TEvasGLImage); cdecl;
    glGetProgramBinaryOES: procedure(program_: TGLuint; bufSize: TGLsizei; length: PGLsizei; binaryFormat: PGLenum; binary: pointer); cdecl;
    glProgramBinaryOES: procedure(program_: TGLuint; binaryFormat: TGLenum; binary: pointer; length: TGLint); cdecl;
    glMapBufferOES: function(target: TGLenum; access: TGLenum): pointer; cdecl;
    glUnmapBufferOES: function(target: TGLenum): TGLboolean; cdecl;
    glGetBufferPointervOES: procedure(target: TGLenum; pname: TGLenum; params: Ppointer); cdecl;
    glTexImage3DOES: procedure(target: TGLenum; level: TGLint; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; pixels: pointer); cdecl;
    glTexSubImage3DOES: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; format: TGLenum; _type: TGLenum; pixels: pointer); cdecl;
    glCopyTexSubImage3DOES: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glCompressedTexImage3DOES: procedure(target: TGLenum; level: TGLint; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei; border: TGLint; imageSize: TGLsizei; data: pointer); cdecl;
    glCompressedTexSubImage3DOES: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; format: TGLenum; imageSize: TGLsizei; data: pointer); cdecl;
    glFramebufferTexture3DOES: procedure(target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint; zoffset: TGLint); cdecl;
    glGetPerfMonitorGroupsAMD: procedure(numGroups: PGLint; groupsSize: TGLsizei; groups: PGLuint); cdecl;
    glGetPerfMonitorCountersAMD: procedure(group: TGLuint; numCounters: PGLint; maxActiveCounters: PGLint; counterSize: TGLsizei; counters: PGLuint); cdecl;
    glGetPerfMonitorGroupStringAMD: procedure(group: TGLuint; bufSize: TGLsizei; length: PGLsizei; groupString: pchar); cdecl;
    glGetPerfMonitorCounterStringAMD: procedure(group: TGLuint; counter: TGLuint; bufSize: TGLsizei; length: PGLsizei; counterString: pchar); cdecl;
    glGetPerfMonitorCounterInfoAMD: procedure(group: TGLuint; counter: TGLuint; pname: TGLenum; data: pointer); cdecl;
    glGenPerfMonitorsAMD: procedure(n: TGLsizei; monitors: PGLuint); cdecl;
    glDeletePerfMonitorsAMD: procedure(n: TGLsizei; monitors: PGLuint); cdecl;
    glSelectPerfMonitorCountersAMD: procedure(monitor: TGLuint; enable: TGLboolean; group: TGLuint; numCounters: TGLint; countersList: PGLuint); cdecl;
    glBeginPerfMonitorAMD: procedure(monitor: TGLuint); cdecl;
    glEndPerfMonitorAMD: procedure(monitor: TGLuint); cdecl;
    glGetPerfMonitorCounterDataAMD: procedure(monitor: TGLuint; pname: TGLenum; dataSize: TGLsizei; data: PGLuint; bytesWritten: PGLint); cdecl;
    glDiscardFramebufferEXT: procedure(target: TGLenum; numAttachments: TGLsizei; attachments: PGLenum); cdecl;
    glMultiDrawArraysEXT: procedure(mode: TGLenum; first: PGLint; count: PGLsizei; primcount: TGLsizei); cdecl;
    glMultiDrawElementsEXT: procedure(mode: TGLenum; count: PGLsizei; _type: TGLenum; indices: PPGLvoid; primcount: TGLsizei); cdecl;
    glDeleteFencesNV: procedure(n: TGLsizei; fences: PGLuint); cdecl;
    glGenFencesNV: procedure(n: TGLsizei; fences: PGLuint); cdecl;
    glIsFenceNV: function(fence: TGLuint): TGLboolean; cdecl;
    glTestFenceNV: function(fence: TGLuint): TGLboolean; cdecl;
    glGetFenceivNV: procedure(fence: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glFinishFenceNV: procedure(fence: TGLuint); cdecl;
    glSetFenceNV: procedure(para1: TGLuint; para2: TGLenum); cdecl;
    glGetDriverControlsQCOM: procedure(num: PGLint; size: TGLsizei; driverControls: PGLuint); cdecl;
    glGetDriverControlStringQCOM: procedure(driverControl: TGLuint; bufSize: TGLsizei; length: PGLsizei; driverControlString: pchar); cdecl;
    glEnableDriverControlQCOM: procedure(driverControl: TGLuint); cdecl;
    glDisableDriverControlQCOM: procedure(driverControl: TGLuint); cdecl;
    glExtGetTexturesQCOM: procedure(textures: PGLuint; maxTextures: TGLint; numTextures: PGLint); cdecl;
    glExtGetBuffersQCOM: procedure(buffers: PGLuint; maxBuffers: TGLint; numBuffers: PGLint); cdecl;
    glExtGetRenderbuffersQCOM: procedure(renderbuffers: PGLuint; maxRenderbuffers: TGLint; numRenderbuffers: PGLint); cdecl;
    glExtGetFramebuffersQCOM: procedure(framebuffers: PGLuint; maxFramebuffers: TGLint; numFramebuffers: PGLint); cdecl;
    glExtGetTexLevelParameterivQCOM: procedure(texture: TGLuint; face: TGLenum; level: TGLint; pname: TGLenum; params: PGLint); cdecl;
    glExtTexObjectStateOverrideiQCOM: procedure(target: TGLenum; pname: TGLenum; param: TGLint); cdecl;
    glExtGetTexSubImageQCOM: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; format: TGLenum; _type: TGLenum; texels: pointer); cdecl;
    glExtGetBufferPointervQCOM: procedure(target: TGLenum; params: Ppointer); cdecl;
    glExtGetShadersQCOM: procedure(shaders: PGLuint; maxShaders: TGLint; numShaders: PGLint); cdecl;
    glExtGetProgramsQCOM: procedure(programs: PGLuint; maxPrograms: TGLint; numPrograms: PGLint); cdecl;
    glExtIsProgramBinaryQCOM: function(program_: TGLuint): TGLboolean; cdecl;
    glExtGetProgramBinarySourceQCOM: procedure(program_: TGLuint; shadertype: TGLenum; source: pchar; length: PGLint); cdecl;
    evasglCreateImage: function(target: longint; buffer: pointer; attrib_list: Plongint): TEvasGLImage; cdecl;
    evasglDestroyImage: procedure(image: TEvasGLImage); cdecl;
    evasglCreateImageForContext: function(evas_gl: PEvas_GL; ctx: PEvas_GL_Context; target: longint; buffer: pointer; attrib_list: Plongint): TEvasGLImage; cdecl;
    glAlphaFunc: procedure(func: TGLenum; ref: TGLclampf); cdecl;
    glClipPlanef: procedure(plane: TGLenum; equation: PGLfloat); cdecl;
    glColor4f: procedure(red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); cdecl;
    glFogf: procedure(pname: TGLenum; param: TGLfloat); cdecl;
    glFogfv: procedure(pname: TGLenum; params: PGLfloat); cdecl;
    glFrustumf: procedure(left: TGLfloat; right: TGLfloat; bottom: TGLfloat; top: TGLfloat; zNear: TGLfloat; zFar: TGLfloat); cdecl;
    glGetClipPlanef: procedure(pname: TGLenum; eqn: Teqn); cdecl;
    glGetLightfv: procedure(light: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glGetMaterialfv: procedure(face: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glGetTexEnvfv: procedure(env: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glLightModelf: procedure(pname: TGLenum; param: TGLfloat); cdecl;
    glLightModelfv: procedure(pname: TGLenum; params: PGLfloat); cdecl;
    glLightf: procedure(light: TGLenum; pname: TGLenum; param: TGLfloat); cdecl;
    glLightfv: procedure(light: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glLoadMatrixf: procedure(m: PGLfloat); cdecl;
    glMaterialf: procedure(face: TGLenum; pname: TGLenum; param: TGLfloat); cdecl;
    glMaterialfv: procedure(face: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glMultMatrixf: procedure(m: PGLfloat); cdecl;
    glMultiTexCoord4f: procedure(target: TGLenum; s: TGLfloat; t: TGLfloat; r: TGLfloat; q: TGLfloat); cdecl;
    glNormal3f: procedure(nx: TGLfloat; ny: TGLfloat; nz: TGLfloat); cdecl;
    glOrthof: procedure(left: TGLfloat; right: TGLfloat; bottom: TGLfloat; top: TGLfloat; zNear: TGLfloat; zFar: TGLfloat); cdecl;
    glPointParameterf: procedure(pname: TGLenum; param: TGLfloat); cdecl;
    glPointParameterfv: procedure(pname: TGLenum; params: PGLfloat); cdecl;
    glPointSize: procedure(size: TGLfloat); cdecl;
    glPointSizePointerOES: procedure(_type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glRotatef: procedure(angle: TGLfloat; x: TGLfloat; y: TGLfloat; z: TGLfloat); cdecl;
    glScalef: procedure(x: TGLfloat; y: TGLfloat; z: TGLfloat); cdecl;
    glTexEnvf: procedure(target: TGLenum; pname: TGLenum; param: TGLfloat); cdecl;
    glTexEnvfv: procedure(target: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glTranslatef: procedure(x: TGLfloat; y: TGLfloat; z: TGLfloat); cdecl;
    glAlphaFuncx: procedure(func: TGLenum; ref: TGLclampx); cdecl;
    glClearColorx: procedure(red: TGLclampx; green: TGLclampx; blue: TGLclampx; alpha: TGLclampx); cdecl;
    glClearDepthx: procedure(depth: TGLclampx); cdecl;
    glClientActiveTexture: procedure(texture: TGLenum); cdecl;
    glClipPlanex: procedure(plane: TGLenum; equation: PGLfixed); cdecl;
    glColor4ub: procedure(red: TGLubyte; green: TGLubyte; blue: TGLubyte; alpha: TGLubyte); cdecl;
    glColor4x: procedure(red: TGLfixed; green: TGLfixed; blue: TGLfixed; alpha: TGLfixed); cdecl;
    glColorPointer: procedure(size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glDepthRangex: procedure(zNear: TGLclampx; zFar: TGLclampx); cdecl;
    glDisableClientState: procedure(array_: TGLenum); cdecl;
    glEnableClientState: procedure(array_: TGLenum); cdecl;
    glFogx: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glFogxv: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glFrustumx: procedure(left: TGLfixed; right: TGLfixed; bottom: TGLfixed; top: TGLfixed; zNear: TGLfixed; zFar: TGLfixed); cdecl;
    glGetClipPlanex: procedure(pname: TGLenum; eqn: Teqnfix); cdecl;
    glGetFixedv: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glGetLightxv: procedure(light: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetMaterialxv: procedure(face: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetPointerv: procedure(pname: TGLenum; params: PPGLvoid); cdecl;
    glGetTexEnviv: procedure(env: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetTexEnvxv: procedure(env: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetTexParameterxv: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glLightModelx: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glLightModelxv: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glLightx: procedure(light: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glLightxv: procedure(light: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glLineWidthx: procedure(width: TGLfixed); cdecl;
    glLoadIdentity: procedure; cdecl;
    glLoadMatrixx: procedure(m: PGLfixed); cdecl;
    glLogicOp: procedure(opcode: TGLenum); cdecl;
    glMaterialx: procedure(face: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glMaterialxv: procedure(face: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glMatrixMode: procedure(mode: TGLenum); cdecl;
    glMultMatrixx: procedure(m: PGLfixed); cdecl;
    glMultiTexCoord4x: procedure(target: TGLenum; s: TGLfixed; t: TGLfixed; r: TGLfixed; q: TGLfixed); cdecl;
    glNormal3x: procedure(nx: TGLfixed; ny: TGLfixed; nz: TGLfixed); cdecl;
    glNormalPointer: procedure(_type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glOrthox: procedure(left: TGLfixed; right: TGLfixed; bottom: TGLfixed; top: TGLfixed; zNear: TGLfixed; zFar: TGLfixed); cdecl;
    glPointParameterx: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glPointParameterxv: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glPointSizex: procedure(size: TGLfixed); cdecl;
    glPolygonOffsetx: procedure(factor: TGLfixed; units: TGLfixed); cdecl;
    glPopMatrix: procedure; cdecl;
    glPushMatrix: procedure; cdecl;
    glRotatex: procedure(angle: TGLfixed; x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glSampleCoveragex: procedure(value: TGLclampx; invert: TGLboolean); cdecl;
    glScalex: procedure(x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glShadeModel: procedure(mode: TGLenum); cdecl;
    glTexCoordPointer: procedure(size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glTexEnvi: procedure(target: TGLenum; pname: TGLenum; param: TGLint); cdecl;
    glTexEnvx: procedure(target: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glTexEnviv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glTexEnvxv: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glTexParameterx: procedure(target: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glTexParameterxv: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glTranslatex: procedure(x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glVertexPointer: procedure(size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glBlendEquationSeparateOES: procedure(modeRGB: TGLenum; modeAlpha: TGLenum); cdecl;
    glBlendFuncSeparateOES: procedure(srcRGB: TGLenum; dstRGB: TGLenum; srcAlpha: TGLenum; dstAlpha: TGLenum); cdecl;
    glBlendEquationOES: procedure(mode: TGLenum); cdecl;
    glDrawTexsOES: procedure(x: TGLshort; y: TGLshort; z: TGLshort; width: TGLshort; height: TGLshort); cdecl;
    glDrawTexiOES: procedure(x: TGLint; y: TGLint; z: TGLint; width: TGLint; height: TGLint); cdecl;
    glDrawTexxOES: procedure(x: TGLfixed; y: TGLfixed; z: TGLfixed; width: TGLfixed; height: TGLfixed); cdecl;
    glDrawTexsvOES: procedure(coords: PGLshort); cdecl;
    glDrawTexivOES: procedure(coords: PGLint); cdecl;
    glDrawTexxvOES: procedure(coords: PGLfixed); cdecl;
    glDrawTexfOES: procedure(x: TGLfloat; y: TGLfloat; z: TGLfloat; width: TGLfloat; height: TGLfloat); cdecl;
    glDrawTexfvOES: procedure(coords: PGLfloat); cdecl;
    glAlphaFuncxOES: procedure(func: TGLenum; ref: TGLclampx); cdecl;
    glClearColorxOES: procedure(red: TGLclampx; green: TGLclampx; blue: TGLclampx; alpha: TGLclampx); cdecl;
    glClearDepthxOES: procedure(depth: TGLclampx); cdecl;
    glClipPlanexOES: procedure(plane: TGLenum; equation: PGLfixed); cdecl;
    glColor4xOES: procedure(red: TGLfixed; green: TGLfixed; blue: TGLfixed; alpha: TGLfixed); cdecl;
    glDepthRangexOES: procedure(zNear: TGLclampx; zFar: TGLclampx); cdecl;
    glFogxOES: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glFogxvOES: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glFrustumxOES: procedure(left: TGLfixed; right: TGLfixed; bottom: TGLfixed; top: TGLfixed; zNear: TGLfixed; zFar: TGLfixed); cdecl;
    glGetClipPlanexOES: procedure(pname: TGLenum; eqn: Teqnfix); cdecl;
    glGetFixedvOES: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glGetLightxvOES: procedure(light: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetMaterialxvOES: procedure(face: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetTexEnvxvOES: procedure(env: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetTexParameterxvOES: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glLightModelxOES: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glLightModelxvOES: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glLightxOES: procedure(light: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glLightxvOES: procedure(light: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glLineWidthxOES: procedure(width: TGLfixed); cdecl;
    glLoadMatrixxOES: procedure(m: PGLfixed); cdecl;
    glMaterialxOES: procedure(face: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glMaterialxvOES: procedure(face: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glMultMatrixxOES: procedure(m: PGLfixed); cdecl;
    glMultiTexCoord4xOES: procedure(target: TGLenum; s: TGLfixed; t: TGLfixed; r: TGLfixed; q: TGLfixed); cdecl;
    glNormal3xOES: procedure(nx: TGLfixed; ny: TGLfixed; nz: TGLfixed); cdecl;
    glOrthoxOES: procedure(left: TGLfixed; right: TGLfixed; bottom: TGLfixed; top: TGLfixed; zNear: TGLfixed; zFar: TGLfixed); cdecl;
    glPointParameterxOES: procedure(pname: TGLenum; param: TGLfixed); cdecl;
    glPointParameterxvOES: procedure(pname: TGLenum; params: PGLfixed); cdecl;
    glPointSizexOES: procedure(size: TGLfixed); cdecl;
    glPolygonOffsetxOES: procedure(factor: TGLfixed; units: TGLfixed); cdecl;
    glRotatexOES: procedure(angle: TGLfixed; x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glSampleCoveragexOES: procedure(value: TGLclampx; invert: TGLboolean); cdecl;
    glScalexOES: procedure(x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glTexEnvxOES: procedure(target: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glTexEnvxvOES: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glTexParameterxOES: procedure(target: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glTexParameterxvOES: procedure(target: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glTranslatexOES: procedure(x: TGLfixed; y: TGLfixed; z: TGLfixed); cdecl;
    glIsRenderbufferOES: function(renderbuffer: TGLuint): TGLboolean; cdecl;
    glBindRenderbufferOES: procedure(target: TGLenum; renderbuffer: TGLuint); cdecl;
    glDeleteRenderbuffersOES: procedure(n: TGLsizei; renderbuffers: PGLuint); cdecl;
    glGenRenderbuffersOES: procedure(n: TGLsizei; renderbuffers: PGLuint); cdecl;
    glRenderbufferStorageOES: procedure(target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glGetRenderbufferParameterivOES: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glIsFramebufferOES: function(framebuffer: TGLuint): TGLboolean; cdecl;
    glBindFramebufferOES: procedure(target: TGLenum; framebuffer: TGLuint); cdecl;
    glDeleteFramebuffersOES: procedure(n: TGLsizei; framebuffers: PGLuint); cdecl;
    glGenFramebuffersOES: procedure(n: TGLsizei; framebuffers: PGLuint); cdecl;
    glCheckFramebufferStatusOES: function(target: TGLenum): TGLenum; cdecl;
    glFramebufferRenderbufferOES: procedure(target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: TGLuint); cdecl;
    glFramebufferTexture2DOES: procedure(target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); cdecl;
    glGetFramebufferAttachmentParameterivOES: procedure(target: TGLenum; attachment: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGenerateMipmapOES: procedure(target: TGLenum); cdecl;
    glCurrentPaletteMatrixOES: procedure(matrixpaletteindex: TGLuint); cdecl;
    glLoadPaletteFromModelViewMatrixOES: procedure; cdecl;
    glMatrixIndexPointerOES: procedure(size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glWeightPointerOES: procedure(size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glQueryMatrixxOES: function(mantissa: TeqnfixMat; exponent: TIntMat): TGLbitfield; cdecl;
    glDepthRangefOES: procedure(zNear: TGLclampf; zFar: TGLclampf); cdecl;
    glFrustumfOES: procedure(left: TGLfloat; right: TGLfloat; bottom: TGLfloat; top: TGLfloat; zNear: TGLfloat; zFar: TGLfloat); cdecl;
    glOrthofOES: procedure(left: TGLfloat; right: TGLfloat; bottom: TGLfloat; top: TGLfloat; zNear: TGLfloat; zFar: TGLfloat); cdecl;
    glClipPlanefOES: procedure(plane: TGLenum; equation: PGLfloat); cdecl;
    glGetClipPlanefOES: procedure(pname: TGLenum; eqn: Teqn); cdecl;
    glClearDepthfOES: procedure(depth: TGLclampf); cdecl;
    glTexGenfOES: procedure(coord: TGLenum; pname: TGLenum; param: TGLfloat); cdecl;
    glTexGenfvOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glTexGeniOES: procedure(coord: TGLenum; pname: TGLenum; param: TGLint); cdecl;
    glTexGenivOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glTexGenxOES: procedure(coord: TGLenum; pname: TGLenum; param: TGLfixed); cdecl;
    glTexGenxvOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glGetTexGenfvOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLfloat); cdecl;
    glGetTexGenivOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetTexGenxvOES: procedure(coord: TGLenum; pname: TGLenum; params: PGLfixed); cdecl;
    glBindVertexArrayOES: procedure(array_: TGLuint); cdecl;
    glDeleteVertexArraysOES: procedure(n: TGLsizei; arrays: PGLuint); cdecl;
    glGenVertexArraysOES: procedure(n: TGLsizei; arrays: PGLuint); cdecl;
    glIsVertexArrayOES: function(array_: TGLuint): TGLboolean; cdecl;
    glCopyTextureLevelsAPPLE: procedure(destinationTexture: TGLuint; sourceTexture: TGLuint; sourceBaseLevel: TGLint; sourceLevelCount: TGLsizei); cdecl;
    glRenderbufferStorageMultisampleAPPLE: procedure(para1: TGLenum; para2: TGLsizei; para3: TGLenum; para4: TGLsizei; para5: TGLsizei); cdecl;
    glResolveMultisampleFramebufferAPPLE: procedure; cdecl;
    glFenceSyncAPPLE: function(condition: TGLenum; flags: TGLbitfield): TGLsync; cdecl;
    glIsSyncAPPLE: function(sync: TGLsync): TGLboolean; cdecl;
    glDeleteSyncAPPLE: procedure(sync: TGLsync); cdecl;
    glClientWaitSyncAPPLE: function(sync: TGLsync; flags: TGLbitfield; timeout: uint64): TGLenum; cdecl;
    glWaitSyncAPPLE: procedure(sync: TGLsync; flags: TGLbitfield; timeout: uint64); cdecl;
    glGetInteger64vAPPLE: procedure(pname: TGLenum; params: Pint64); cdecl;
    glGetSyncivAPPLE: procedure(sync: TGLsync; pname: TGLenum; bufSize: TGLsizei; length: PGLsizei; values: PGLint); cdecl;
    glMapBufferRangeEXT: function(target: TGLenum; offset: TGLintptr; length: TGLsizeiptr; access: TGLbitfield): pointer; cdecl;
    glFlushMappedBufferRangeEXT: procedure(target: TGLenum; offset: TGLintptr; length: TGLsizeiptr); cdecl;
    glRenderbufferStorageMultisampleEXT: procedure(para1: TGLenum; para2: TGLsizei; para3: TGLenum; para4: TGLsizei; para5: TGLsizei); cdecl;
    glFramebufferTexture2DMultisampleEXT: procedure(para1: TGLenum; para2: TGLenum; para3: TGLenum; para4: TGLuint; para5: TGLint; para6: TGLsizei); cdecl;
    glGetGraphicsResetStatusEXT: function: TGLenum; cdecl;
    glReadnPixelsEXT: procedure(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum;_type: TGLenum; bufSize: TGLsizei; data: pointer); cdecl;
    glGetnUniformfvEXT: procedure(program_: TGLuint; location: TGLint; bufSize: TGLsizei; params: Psingle); cdecl;
    glGetnUniformivEXT: procedure(program_: TGLuint; location: TGLint; bufSize: TGLsizei; params: PGLint); cdecl;
    glTexStorage1DEXT: procedure(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei); cdecl;
    glTexStorage2DEXT: procedure(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glTexStorage3DEXT: procedure(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei); cdecl;
    glTextureStorage1DEXT: procedure(texture: TGLuint; target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei); cdecl;
    glTextureStorage2DEXT: procedure(texture: TGLuint; target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glTextureStorage3DEXT: procedure(texture: TGLuint; target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei); cdecl;
    glClipPlanefIMG: procedure(para1: TGLenum; para2: PGLfloat); cdecl;
    glClipPlanexIMG: procedure(para1: TGLenum; para2: PGLfixed); cdecl;
    glRenderbufferStorageMultisampleIMG: procedure(para1: TGLenum; para2: TGLsizei; para3: TGLenum; para4: TGLsizei; para5: TGLsizei); cdecl;
    glFramebufferTexture2DMultisampleIMG: procedure(para1: TGLenum; para2: TGLenum; para3: TGLenum; para4: TGLuint; para5: TGLint; para6: TGLsizei); cdecl;
    glStartTilingQCOM: procedure(x: TGLuint; y: TGLuint; width: TGLuint; height: TGLuint; preserveMask: TGLbitfield); cdecl;
    glEndTilingQCOM: procedure(preserveMask: TGLbitfield); cdecl;
    evasglCreateSync: function(evas_gl: PEvas_GL; _type: dword; attrib_list: Plongint): TEvasGLSync; cdecl;
    evasglDestroySync: function(evas_gl: PEvas_GL; sync: TEvasGLSync): TEina_Bool; cdecl;
    evasglClientWaitSync: function(evas_gl: PEvas_GL; sync: TEvasGLSync; flags: longint; timeout: TEvasGLTime): longint; cdecl;
    evasglSignalSync: function(evas_gl: PEvas_GL; sync: TEvasGLSync; mode: dword): TEina_Bool; cdecl;
    evasglGetSyncAttrib: function(evas_gl: PEvas_GL; sync: TEvasGLSync; attribute: longint; value: Plongint): TEina_Bool; cdecl;
    evasglWaitSync: function(evas_gl: PEvas_GL; sync: TEvasGLSync; flags: longint): longint; cdecl;
    evasglBindWaylandDisplay: function(evas_gl: PEvas_GL; wl_display: pointer): TEina_Bool; cdecl;
    evasglUnbindWaylandDisplay: function(evas_gl: PEvas_GL; wl_display: pointer): TEina_Bool; cdecl;
    evasglQueryWaylandBuffer: function(evas_gl: PEvas_GL; buffer: pointer; attribute: longint; value: Plongint): TEina_Bool; cdecl;
    glBeginQuery: procedure(target: TGLenum; id: TGLuint); cdecl;
    glBeginTransformFeedback: procedure(primitiveMode: TGLenum); cdecl;
    glBindBufferBase: procedure(target: TGLenum; index: TGLuint; buffer: TGLuint); cdecl;
    glBindBufferRange: procedure(target: TGLenum; index: TGLuint; buffer: TGLuint; offset: TGLintptr; size: TGLsizeiptr); cdecl;
    glBindSampler: procedure(unit_: TGLuint; sampler: TGLuint); cdecl;
    glBindTransformFeedback: procedure(target: TGLenum; id: TGLuint); cdecl;
    glBindVertexArray: procedure(array_: TGLuint); cdecl;
    glBlitFramebuffer: procedure(srcX0: TGLint; srcY0: TGLint; srcX1: TGLint; srcY1: TGLint; dstX0: TGLint; dstY0: TGLint; dstX1: TGLint; dstY1: TGLint; mask: TGLbitfield; filter: TGLenum); cdecl;
    glClearBufferfi: procedure(buffer: TGLenum; drawBuffer: TGLint; depth: TGLfloat; stencil: TGLint); cdecl;
    glClearBufferfv: procedure(buffer: TGLenum; drawBuffer: TGLint; value: PGLfloat); cdecl;
    glClearBufferiv: procedure(buffer: TGLenum; drawBuffer: TGLint; value: PGLint); cdecl;
    glClearBufferuiv: procedure(buffer: TGLenum; drawBuffer: TGLint; value: PGLuint); cdecl;
    glClientWaitSync: function(sync: TGLsync; flags: TGLbitfield; timeout: uint64): TGLenum; cdecl;
    glCompressedTexImage3D: procedure(target: TGLenum; level: TGLint; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei; border: TGLint; imageSize: TGLsizei; data: PGLvoid); cdecl;
    glCompressedTexSubImage3D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; format: TGLenum; imageSize: TGLsizei; data: PGLvoid); cdecl;
    glCopyBufferSubData: procedure(readtarget: TGLenum; writetarget: TGLenum; readoffset: TGLintptr; writeoffset: TGLintptr; size: TGLsizeiptr); cdecl;
    glCopyTexSubImage3D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glDeleteQueries: procedure(n: TGLsizei; ids: PGLuint); cdecl;
    glDeleteSamplers: procedure(n: TGLsizei; samplers: PGLuint); cdecl;
    glDeleteSync: procedure(sync: TGLsync); cdecl;
    glDeleteTransformFeedbacks: procedure(n: TGLsizei; ids: PGLuint); cdecl;
    glDeleteVertexArrays: procedure(n: TGLsizei; arrays: PGLuint); cdecl;
    glDrawArraysInstanced: procedure(mode: TGLenum; first: TGLint; count: TGLsizei; primcount: TGLsizei); cdecl;
    glDrawBuffers: procedure(n: TGLsizei; bufs: PGLenum); cdecl;
    glDrawElementsInstanced: procedure(mode: TGLenum; count: TGLsizei; _type: TGLenum; indices: pointer; primcount: TGLsizei); cdecl;
    glDrawRangeElements: procedure(mode: TGLenum; start: TGLuint; end_: TGLuint; count: TGLsizei; _type: TGLenum; indices: PGLvoid); cdecl;
    glEndQuery: procedure(target: TGLenum); cdecl;
    glEndTransformFeedback: procedure; cdecl;
    glFenceSync: function(condition: TGLenum; flags: TGLbitfield): TGLsync; cdecl;
    glFlushMappedBufferRange: function(target: TGLenum; offset: TGLintptr; length: TGLsizeiptr): TGLsync; cdecl;
    glFramebufferTextureLayer: procedure(target: TGLenum; attachment: TGLenum; texture: TGLuint; level: TGLint; layer: TGLint); cdecl;
    glGenQueries: procedure(n: TGLsizei; ids: PGLuint); cdecl;
    glGenSamplers: procedure(n: TGLsizei; samplers: PGLuint); cdecl;
    glGenTransformFeedbacks: procedure(n: TGLsizei; ids: PGLuint); cdecl;
    glGenVertexArrays: procedure(n: TGLsizei; arrays: PGLuint); cdecl;
    glGetActiveUniformBlockiv: procedure(program_: TGLuint; uniformBlockIndex: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetActiveUniformBlockName: procedure(program_: TGLuint; uniformBlockIndex: TGLuint; bufSize: TGLsizei; length: PGLsizei; uniformBlockName: PGLchar); cdecl;
    glGetActiveUniformsiv: procedure(program_: TGLuint; uniformCount: TGLsizei; uniformIndices: PGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetBufferParameteri64v: procedure(target: TGLenum; value: TGLenum; data: Pint64); cdecl;
    glGetBufferPointerv: procedure(target: TGLenum; pname: TGLenum; params: PPGLvoid); cdecl;
    glGetFragDataLocation: function(program_: TGLuint; name: pchar): TGLint; cdecl;
    glGetInteger64i_v: procedure(target: TGLenum; index: TGLuint; data: Pint64); cdecl;
    glGetInteger64v: procedure(pname: TGLenum; data: Pint64); cdecl;
    glGetIntegeri_v: procedure(target: TGLenum; index: TGLuint; data: PGLint); cdecl;
    glGetInternalformativ: procedure(target: TGLenum; internalformat: TGLenum; pname: TGLenum; bufSize: TGLsizei; params: PGLint); cdecl;
    glGetProgramBinary: procedure(program_: TGLuint; bufsize: TGLsizei; length: PGLsizei; binaryFormat: PGLenum; binary: pointer); cdecl;
    glGetQueryiv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetQueryObjectuiv: procedure(id: TGLuint; pname: TGLenum; params: PGLuint); cdecl;
    glGetSamplerParameterfv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLfloat); cdecl;
    glGetSamplerParameteriv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetStringi: function(name: TGLenum; index: TGLuint): PGLubyte; cdecl;
    glGetSynciv: procedure(sync: TGLsync; pname: TGLenum; bufSize: TGLsizei; length: PGLsizei; values: PGLint); cdecl;
    glGetTransformFeedbackVarying: procedure(program_: TGLuint; index: TGLuint; bufSize: TGLsizei; length: PGLsizei; size: PGLsizei; _type: PGLenum; name: pchar); cdecl;
    glGetUniformBlockIndex: function(program_: TGLuint; uniformBlockName: PGLchar): TGLuint; cdecl;
    glGetUniformIndices: procedure(program_: TGLuint; uniformCount: TGLsizei; uniformNames: PPGLchar; uniformIndices: PGLuint); cdecl;
    glGetUniformuiv: procedure(program_: TGLuint; location: TGLint; params: PGLuint); cdecl;
    glGetVertexAttribIiv: procedure(index: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetVertexAttribIuiv: procedure(index: TGLuint; pname: TGLenum; params: PGLuint); cdecl;
    glInvalidateFramebuffer: procedure(target: TGLenum; numAttachments: TGLsizei; attachments: PGLenum); cdecl;
    glInvalidateSubFramebuffer: procedure(target: TGLenum; numAttachments: TGLsizei; attachments: PGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); cdecl;
    glIsQuery: function(id: TGLuint): TGLboolean; cdecl;
    glIsSampler: function(id: TGLuint): TGLboolean; cdecl;
    glIsSync: function(sync: TGLsync): TGLboolean; cdecl;
    glIsTransformFeedback: function(id: TGLuint): TGLboolean; cdecl;
    glIsVertexArray: function(array_: TGLuint): TGLboolean; cdecl;
    glMapBufferRange: function(target: TGLenum; offset: TGLintptr; length: TGLsizeiptr; access: TGLbitfield): pointer; cdecl;
    glPauseTransformFeedback: procedure; cdecl;
    glProgramBinary: procedure(program_: TGLuint; binaryFormat: TGLenum; binary: pointer; length: TGLsizei); cdecl;
    glProgramParameteri: procedure(program_: TGLuint; pname: TGLenum; value: TGLint); cdecl;
    glReadBuffer: procedure(src: TGLenum); cdecl;
    glRenderbufferStorageMultisample: procedure(target: TGLenum; samples: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glResumeTransformFeedback: procedure; cdecl;
    glSamplerParameterf: procedure(sampler: TGLuint; pname: TGLenum; param: TGLfloat); cdecl;
    glSamplerParameterfv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLfloat); cdecl;
    glSamplerParameteri: procedure(sampler: TGLuint; pname: TGLenum; param: TGLint); cdecl;
    glSamplerParameteriv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glTexImage3D: procedure(target: TGLenum; level: TGLint; internalFormat: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; data: PGLvoid); cdecl;
    glTexStorage2D: procedure(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); cdecl;
    glTexStorage3D: procedure(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei); cdecl;
    glTexSubImage3D: procedure(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; zoffset: TGLint; width: TGLsizei; height: TGLsizei; depth: TGLsizei; format: TGLenum; _type: TGLenum; data: PGLvoid); cdecl;
    glTransformFeedbackVaryings: procedure(program_: TGLuint; count: TGLsizei; varyings: PPGLchar; bufferMode: TGLenum); cdecl;
    glUniform1ui: procedure(location: TGLint; v0: TGLuint); cdecl;
    glUniform1uiv: procedure(location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glUniform2ui: procedure(location: TGLint; v0: TGLuint; v1: TGLuint); cdecl;
    glUniform2uiv: procedure(location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glUniform3ui: procedure(location: TGLint; v0: TGLuint; v1: TGLuint; v2: TGLuint); cdecl;
    glUniform3uiv: procedure(location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glUniform4ui: procedure(location: TGLint; v0: TGLuint; v1: TGLuint; v2: TGLuint; v3: TGLuint); cdecl;
    glUniform4uiv: procedure(location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glUniformBlockBinding: procedure(program_: TGLuint; uniformBlockIndex: TGLuint; uniformBlockBinding: TGLuint); cdecl;
    glUniformMatrix2x3fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix3x2fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix2x4fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix4x2fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix3x4fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUniformMatrix4x3fv: procedure(location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glUnmapBuffer: function(target: TGLenum): TGLboolean; cdecl;
    glVertexAttribDivisor: procedure(index: TGLuint; divisor: TGLuint); cdecl;
    glVertexAttribI4i: procedure(index: TGLuint; v0: TGLint; v1: TGLint; v2: TGLint; v3: TGLint); cdecl;
    glVertexAttribI4iv: procedure(index: TGLuint; v: PGLint); cdecl;
    glVertexAttribI4ui: procedure(index: TGLuint; v0: TGLuint; v1: TGLuint; v2: TGLuint; v3: TGLuint); cdecl;
    glVertexAttribI4uiv: procedure(index: TGLuint; v: PGLuint); cdecl;
    glVertexAttribIPointer: procedure(index: TGLuint; size: TGLint; _type: TGLenum; stride: TGLsizei; pointer: PGLvoid); cdecl;
    glWaitSync: procedure(sync: TGLsync; flags: TGLbitfield; timeout: uint64); cdecl;
    glDispatchCompute: procedure(num_groups_x: TGLuint; num_groups_y: TGLuint; num_groups_z: TGLuint); cdecl;
    glDispatchComputeIndirect: procedure(indirect: TGLintptr); cdecl;
    glDrawArraysIndirect: procedure(mode: TGLenum; indirect: pointer); cdecl;
    glDrawElementsIndirect: procedure(mode: TGLenum; _type: TGLenum; indirect: pointer); cdecl;
    glFramebufferParameteri: procedure(target: TGLenum; pname: TGLenum; param: TGLint); cdecl;
    glGetFramebufferParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetProgramInterfaceiv: procedure(program_: TGLuint; programInterface: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetProgramResourceIndex: function(program_: TGLuint; programInterface: TGLenum; name: PGLchar): TGLuint; cdecl;
    glGetProgramResourceName: procedure(program_: TGLuint; programInterface: TGLenum; index: TGLuint; bufSize: TGLsizei; length: PGLsizei; name: PGLchar); cdecl;
    glGetProgramResourceiv: procedure(program_: TGLuint; programInterface: TGLenum; index: TGLuint; propCount: TGLsizei; props: PGLenum; bufSize: TGLsizei; length: PGLsizei; params: PGLint); cdecl;
    glGetProgramResourceLocation: function(program_: TGLuint; programInterface: TGLenum; name: PGLchar): TGLint; cdecl;
    glUseProgramStages: procedure(pipeline: TGLuint; stages: TGLbitfield; program_: TGLuint); cdecl;
    glActiveShaderProgram: procedure(pipeline: TGLuint; program_: TGLuint); cdecl;
    glCreateShaderProgramv: function(_type: TGLenum; count: TGLsizei; strings: PPGLchar): TGLuint; cdecl;
    glBindProgramPipeline: procedure(pipeline: TGLuint); cdecl;
    glDeleteProgramPipelines: procedure(n: TGLsizei; pipelines: PGLuint); cdecl;
    glGenProgramPipelines: procedure(n: TGLsizei; pipelines: PGLuint); cdecl;
    glIsProgramPipeline: function(pipeline: TGLuint): TGLboolean; cdecl;
    glGetProgramPipelineiv: procedure(pipeline: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glProgramUniform1i: procedure(program_: TGLuint; location: TGLint; v0: TGLint); cdecl;
    glProgramUniform2i: procedure(program_: TGLuint; location: TGLint; v0: TGLint; v1: TGLint); cdecl;
    glProgramUniform3i: procedure(program_: TGLuint; location: TGLint; v0: TGLint; v1: TGLint; v2: TGLint); cdecl;
    glProgramUniform4i: procedure(program_: TGLuint; location: TGLint; v0: TGLint; v1: TGLint; v2: TGLint; v3: TGLint); cdecl;
    glProgramUniform1ui: procedure(program_: TGLuint; location: TGLint; v0: TGLuint); cdecl;
    glProgramUniform2ui: procedure(program_: TGLuint; location: TGLint; v0: TGLuint; v1: TGLuint); cdecl;
    glProgramUniform3ui: procedure(program_: TGLuint; location: TGLint; v0: TGLuint; v1: TGLuint; v2: TGLuint); cdecl;
    glProgramUniform4ui: procedure(program_: TGLuint; location: TGLint; v0: TGLuint; v1: TGLuint; v2: TGLuint; v3: TGLuint); cdecl;
    glProgramUniform1f: procedure(program_: TGLuint; location: TGLint; v0: TGLfloat); cdecl;
    glProgramUniform2f: procedure(program_: TGLuint; location: TGLint; v0: TGLfloat; v1: TGLfloat); cdecl;
    glProgramUniform3f: procedure(program_: TGLuint; location: TGLint; v0: TGLfloat; v1: TGLfloat; v2: TGLfloat); cdecl;
    glProgramUniform4f: procedure(program_: TGLuint; location: TGLint; v0: TGLfloat; v1: TGLfloat; v2: TGLfloat; v3: TGLfloat); cdecl;
    glProgramUniform1iv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLint); cdecl;
    glProgramUniform2iv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLint); cdecl;
    glProgramUniform3iv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLint); cdecl;
    glProgramUniform4iv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLint); cdecl;
    glProgramUniform1uiv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glProgramUniform2uiv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glProgramUniform3uiv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glProgramUniform4uiv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLuint); cdecl;
    glProgramUniform1fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLfloat); cdecl;
    glProgramUniform2fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLfloat); cdecl;
    glProgramUniform3fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLfloat); cdecl;
    glProgramUniform4fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; value: PGLfloat); cdecl;
    glProgramUniformMatrix2fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix3fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix4fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix2x3fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix3x2fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix2x4fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix4x2fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix3x4fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glProgramUniformMatrix4x3fv: procedure(program_: TGLuint; location: TGLint; count: TGLsizei; transpose: TGLboolean; value: PGLfloat); cdecl;
    glValidateProgramPipeline: procedure(pipeline: TGLuint); cdecl;
    glGetProgramPipelineInfoLog: procedure(pipeline: TGLuint; bufSize: TGLsizei; length: PGLsizei; infoLog: PGLchar); cdecl;
    glBindImageTexture: procedure(unit_: TGLuint; texture: TGLuint; level: TGLint; layered: TGLboolean; layer: TGLint; access: TGLenum; format: TGLenum); cdecl;
    glGetBooleani_v: procedure(target: TGLenum; index: TGLuint; data: PGLboolean); cdecl;
    glMemoryBarrier: procedure(barriers: TGLbitfield); cdecl;
    glMemoryBarrierByRegion: procedure(barriers: TGLbitfield); cdecl;
    glTexStorage2DMultisample: procedure(target: TGLenum; samples: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; fixedsamplelocations: TGLboolean); cdecl;
    glGetMultisamplefv: procedure(pname: TGLenum; index: TGLuint; val: PGLfloat); cdecl;
    glSampleMaski: procedure(maskNumber: TGLuint; mask: TGLbitfield); cdecl;
    glGetTexLevelParameteriv: procedure(target: TGLenum; level: TGLint; pname: TGLenum; params: PGLint); cdecl;
    glGetTexLevelParameterfv: procedure(target: TGLenum; level: TGLint; pname: TGLenum; params: PGLfloat); cdecl;
    glBindVertexBuffer: procedure(bindingindex: TGLuint; buffer: TGLuint; offset: TGLintptr; stride: TGLsizei); cdecl;
    glVertexAttribFormat: procedure(attribindex: TGLuint; size: TGLint; _type: TGLenum; normalized: TGLboolean; relativeoffset: TGLuint); cdecl;
    glVertexAttribIFormat: procedure(attribindex: TGLuint; size: TGLint; _type: TGLenum; relativeoffset: TGLuint); cdecl;
    glVertexAttribBinding: procedure(attribindex: TGLuint; bindingindex: TGLuint); cdecl;
    glVertexBindingDivisor: procedure(bindingindex: TGLuint; divisor: TGLuint); cdecl;
    glBlendBarrier: procedure; cdecl;
    glCopyImageSubData: procedure(srcName: TGLuint; srcTarget: TGLenum; srcLevel: TGLint; srcX: TGLint; srcY: TGLint; srcZ: TGLint; dstName: TGLuint; dstTarget: TGLenum; dstLevel: TGLint; dstX: TGLint; dstY: TGLint; dstZ: TGLint; srcWidth: TGLsizei; srcHeight: TGLsizei; srcDepth: TGLsizei); cdecl;
    glDebugMessageControl: procedure(source: TGLenum; _type: TGLenum; severity: TGLenum; count: TGLsizei; ids: PGLuint; enabled: TGLboolean); cdecl;
    glDebugMessageInsert: procedure(source: TGLenum; _type: TGLenum; id: TGLuint; severity: TGLenum; length: TGLsizei; buf: PGLchar); cdecl;
    glDebugMessageCallback: procedure(callback: TGLDEBUGPROC; userParam: pointer); cdecl;
    glGetDebugMessageLog: function(count: TGLuint; bufSize: TGLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): TGLuint; cdecl;
    glPushDebugGroup: procedure(source: TGLenum; id: TGLuint; length: TGLsizei; message: PGLchar); cdecl;
    glPopDebugGroup: procedure; cdecl;
    glObjectLabel: procedure(identifier: TGLenum; name: TGLuint; length: TGLsizei; _label: PGLchar); cdecl;
    glGetObjectLabel: procedure(identifier: TGLenum; name: TGLuint; bufSize: TGLsizei; length: PGLsizei; _label: PGLchar); cdecl;
    glObjectPtrLabel: procedure(ptr: pointer; length: TGLsizei; _label: PGLchar); cdecl;
    glGetObjectPtrLabel: procedure(ptr: pointer; bufSize: TGLsizei; length: PGLsizei; _label: PGLchar); cdecl;
    glEnablei: procedure(target: TGLenum; index: TGLuint); cdecl;
    glDisablei: procedure(target: TGLenum; index: TGLuint); cdecl;
    glBlendEquationi: procedure(buf: TGLuint; mode: TGLenum); cdecl;
    glBlendEquationSeparatei: procedure(buf: TGLuint; modeRGB: TGLenum; modeAlpha: TGLenum); cdecl;
    glBlendFunci: procedure(buf: TGLuint; src: TGLenum; dst: TGLenum); cdecl;
    glBlendFuncSeparatei: procedure(buf: TGLuint; srcRGB: TGLenum; dstRGB: TGLenum; srcAlpha: TGLenum; dstAlpha: TGLenum); cdecl;
    glColorMaski: procedure(index: TGLuint; r: TGLboolean; g: TGLboolean; b: TGLboolean; a: TGLboolean); cdecl;
    glIsEnabledi: function(target: TGLenum; index: TGLuint): TGLboolean; cdecl;
    glDrawElementsBaseVertex: procedure(mode: TGLenum; count: TGLsizei; _type: TGLenum; indices: pointer; basevertex: TGLint); cdecl;
    glDrawRangeElementsBaseVertex: procedure(mode: TGLenum; start: TGLuint; end_: TGLuint; count: TGLsizei; _type: TGLenum; indices: pointer; basevertex: TGLint); cdecl;
    glDrawElementsInstancedBaseVertex: procedure(mode: TGLenum; count: TGLsizei; _type: TGLenum; indices: pointer; instancecount: TGLsizei; basevertex: TGLint); cdecl;
    glFramebufferTexture: procedure(target: TGLenum; attachment: TGLenum; texture: TGLuint; level: TGLint); cdecl;
    glPrimitiveBoundingBox: procedure(minX: TGLfloat; minY: TGLfloat; minZ: TGLfloat; minW: TGLfloat; maxX: TGLfloat; maxY: TGLfloat; maxZ: TGLfloat; maxW: TGLfloat); cdecl;
    glGetGraphicsResetStatus: function: TGLenum; cdecl;
    glReadnPixels: procedure(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum;_type: TGLenum; bufSize: TGLsizei; data: pointer); cdecl;
    glGetnUniformfv: procedure(program_: TGLuint; location: TGLint; bufSize: TGLsizei; params: PGLfloat); cdecl;
    glGetnUniformiv: procedure(program_: TGLuint; location: TGLint; bufSize: TGLsizei; params: PGLint); cdecl;
    glGetnUniformuiv: procedure(program_: TGLuint; location: TGLint; bufSize: TGLsizei; params: PGLuint); cdecl;
    glMinSampleShading: procedure(value: TGLfloat); cdecl;
    glPatchParameteri: procedure(pname: TGLenum; value: TGLint); cdecl;
    glTexParameterIiv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glTexParameterIuiv: procedure(target: TGLenum; pname: TGLenum; params: PGLuint); cdecl;
    glGetTexParameterIiv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); cdecl;
    glGetTexParameterIuiv: procedure(target: TGLenum; pname: TGLenum; params: PGLuint); cdecl;
    glSamplerParameterIiv: procedure(sampler: TGLuint; pname: TGLenum; param: PGLint); cdecl;
    glSamplerParameterIuiv: procedure(sampler: TGLuint; pname: TGLenum; param: PGLuint); cdecl;
    glGetSamplerParameterIiv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLint); cdecl;
    glGetSamplerParameterIuiv: procedure(sampler: TGLuint; pname: TGLenum; params: PGLuint); cdecl;
    glTexBuffer: procedure(target: TGLenum; internalformat: TGLenum; buffer: TGLuint); cdecl;
    glTexBufferRange: procedure(target: TGLenum; internalformat: TGLenum; buffer: TGLuint; offset: TGLintptr; size: TGLsizeiptr); cdecl;
    glTexStorage3DMultisample: procedure(target: TGLenum; samples: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; depth: TGLsizei; fixedsamplelocations: TGLboolean); cdecl;
    evasglQueryDmaBufFormats: function(evas_gl: PEvas_GL; max_formats: longint; formats: Plongint; num_formats: Plongint): TEina_Bool; cdecl;
    evasglQueryDmaBufModifiers: function(evas_gl: PEvas_GL; format: longint; max_modifiers: longint; modifiers: Puint64; external_only: PEina_Bool; num_modifiers: Plongint): TEina_Bool; cdecl;
  end;

function evas_gl_new(e: PEvas): PEvas_GL; cdecl; external libevas;
procedure evas_gl_free(evas_gl: PEvas_GL); cdecl; external libevas;
function evas_gl_config_new: PEvas_GL_Config; cdecl; external libevas;
procedure evas_gl_config_free(cfg: PEvas_GL_Config); cdecl; external libevas;
function evas_gl_surface_create(evas_gl: PEvas_GL; cfg: PEvas_GL_Config; w: longint; h: longint): PEvas_GL_Surface; cdecl; external libevas;
function evas_gl_pbuffer_surface_create(evas_gl: PEvas_GL; cfg: PEvas_GL_Config; w: longint; h: longint; attrib_list: Plongint): PEvas_GL_Surface; cdecl; external libevas;
procedure evas_gl_surface_destroy(evas_gl: PEvas_GL; surf: PEvas_GL_Surface); cdecl; external libevas;
function evas_gl_context_create(evas_gl: PEvas_GL; share_ctx: PEvas_GL_Context): PEvas_GL_Context; cdecl; external libevas;
function evas_gl_context_version_create(evas_gl: PEvas_GL; share_ctx: PEvas_GL_Context; version: TEvas_GL_Context_Version): PEvas_GL_Context; cdecl; external libevas;
procedure evas_gl_context_destroy(evas_gl: PEvas_GL; ctx: PEvas_GL_Context); cdecl; external libevas;
function evas_gl_make_current(evas_gl: PEvas_GL; surf: PEvas_GL_Surface; ctx: PEvas_GL_Context): TEina_Bool; cdecl; external libevas;
function evas_gl_string_query(evas_gl: PEvas_GL; name: longint): pchar; cdecl; external libevas;
function evas_gl_proc_address_get(evas_gl: PEvas_GL; name: pchar): TEvas_GL_Func; cdecl; external libevas;
function evas_gl_native_surface_get(evas_gl: PEvas_GL; surf: PEvas_GL_Surface; ns: PEvas_Native_Surface): TEina_Bool; cdecl; external libevas;
function evas_gl_api_get(evas_gl: PEvas_GL): PEvas_GL_API; cdecl; external libevas;
function evas_gl_context_api_get(evas_gl: PEvas_GL; ctx: PEvas_GL_Context): PEvas_GL_API; cdecl; external libevas;
function evas_gl_rotation_get(evas_gl: PEvas_GL): longint; cdecl; external libevas;
function evas_gl_surface_query(evas_gl: PEvas_GL; surface: PEvas_GL_Surface; attribute: longint; value: pointer): TEina_Bool; cdecl; external libevas;
function evas_gl_error_get(evas_gl: PEvas_GL): longint; cdecl; external libevas;
function evas_gl_current_context_get(evas_gl: PEvas_GL): PEvas_GL_Context; cdecl; external libevas;
function evas_gl_current_surface_get(evas_gl: PEvas_GL): PEvas_GL_Surface; cdecl; external libevas;
function evas_gl_current_evas_gl_get(context: PPEvas_GL_Context; surface: PPEvas_GL_Surface): PEvas_GL; cdecl; external libevas;


// === Konventiert am: 13-5-25 12:55:52 ===


{$ENDIF read_interface}


{$IFDEF read_implementation}


function EVAS_GL_NO_SYNC: TEvasGLSync;
begin
  EVAS_GL_NO_SYNC := TEvasGLSync(nil);
end;


{$ENDIF read_implementation}
